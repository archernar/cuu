#!/usr/bin/ksh
PN="$$"
Tmp="/tmp/$$"
Tmp2="/tmp/$$_$$"
Tmp3="/tmp/$$_$$_$$"
TmpDir="/tmp/dir$$"
CuuCommandFile="/tmp/CuuCommandFile$$"
DotCuuFile="/tmp/DotCuuFile$$"
# trap 'rm -f "$Tmp" >/dev/null 2>&1;rm -f "$Tmp2" >/dev/null 2>&1;rm -f "$CuuCommandFile" >/dev/null 2>&1;' 0
trap 'rm -f "$Tmp" >/dev/null 2>&1;rm -f "$CuuCommandFile" >/dev/null 2>&1;' 0
trap 'rm -f "$DotCuuFile" >/dev/null 2>&1;' 0
trap "exit 2" 1 2 3 13 15
rm $Tmp  >/dev/null 2>&1
# -----------------------------------------------------------------------------------------------------------------------
# -- CUU ENVIRONMENT 
# --      CUUHOME should be set to the cuu home directory
# --      CUUHOME should be set to the cuu home directory
# --      CUUHOME should be set to the cuu home directory
# -----------------------------------------------------------------------------------------------------------------------
if [ "$CUUHOME" == "" ] ; then
    print "Error:  CUUHOME not defined"
    exit 1
fi

# if [ "$AWKPATH" == "" ] ; then
#      export AWKPATH=$CUUHOME
# else
#      export AWKPATH=$AWKPATH:$CUUHOME
# fi

export AWKPATH=$AWKPATH:$CUUHOME/awk


# ---------------------------------------------------------------------------------------------------------
#  / ___| | | | | | |            / \   _ __      / \ \      / / ___|   / ___| |   |_ _| |_   _|__   ___ | |
# | |   | | | | | | |  _____    / _ \ | '_ \    / _ \ \ /\ / /\___ \  | |   | |    | |    | |/ _ \ / _ \| |
# | |___| |_| | |_| | |_____|  / ___ \| | | |  / ___ \ V  V /  ___) | | |___| |___ | |    | | (_) | (_) | |
#  \____|\___/ \___/          /_/   \_\_| |_| /_/   \_\_/\_/  |____/   \____|_____|___|   |_|\___/ \___/|_|
#                                     https://github.com/archernar/cuu.git
# ---------------------------------------------------------------------------------------------------------
#                               | |/ / ___|| | | | |  _ \ _   _| | ___  ___| | | |
#                               | ' /\___ \| |_| | | |_) | | | | |/ _ \/ __| | | |
#                               | . \ ___) |  _  | |  _ <| |_| | |  __/\__ \_|_|_|
#                               |_|\_\____/|_| |_| |_| \_\\__,_|_|\___||___(_|_|_)
# ---------------------------------------------------------------------------------------------------------
#                                / ___| __ ___      _| | __ |  _ \ _   _| | ___  ___ 
#                               | |  _ / _` \ \ /\ / / |/ / | |_) | | | | |/ _ \/ __|
#                               | |_| | (_| |\ V  V /|   <  |  _ <| |_| | |  __/\__ \
#                                \____|\__,_| \_/\_/ |_|\_\ |_| \_\\__,_|_|\___||___/
# ---------------------------------------------------------------------------------------------------------
# CUU - An AWS CLI Wrapper
# M <pre>
usage(){
# README.md Start
     print "Usage: cuu [-h][-a][-u][-p][-t][-d][-D][-j][-F][-B][-E][-R][-Z][-i][-c][-e]"
     print "  info"
     print "       build date: BUILDDATE"
     print "       repo:       https://github.com/archernar/cuu"
     print "  operands"
     print "      -c  <operand>:  a command name (see below)"
     print "      -a  <operand>:  cli profile name, maps to AWS account (from .aws/config)"
     print "      -u  <operand>:  username    (use \"ALLUSERS\" to operate on all users)"
     print "      -p  <operand>:  password    (default may be set in ~/.cuu.txt)"
     print "      -t  <operand>:  thing name  (specify a resource or object name)"
     print "      -T  <operand>:  time window in hours (to specify (now minus T) to now)"
     print "      -D  <operand>:  specify a document\file to upload (e.g. a policy document)"
     print "      -e  <operand>:  expire time in seconds (0 == 7 days)"
     print "      -b  <operand>:  S3 bucket name"
     print "      -k  <operand>:  S3 key name"
     print "      -C  <operand>:  content type (pdf, text, html, mp3)"
     print "      -n  <operand>:  name string"
     print "  flags"
     print "      -h              display usage"
     print "      -d              limits abbreviations"
     print "      -j              use long datetime fields"
     print "      -F              force mode, do not confirm any command"
     print "      -B              show full user names"
     print "      -E              show event names"
     print "      -R              show raw records in output"
     print "      -Z              output iso time"
     print "      -i              interactive mode ('q' to quit)"
     print "          Optional :UL: may specify a user, a list of users, a file, or the keyword ALLUSERS"
     print "          Optional :PL: may specify a profile, a list of profiles, or the special keyword ALLPROFILES"
     print " "
# README.md End
# M </pre>
}
commandABBREVIATIONS() {
	case "$COMMAND" in
            LR)                    COMMAND="LISTROLES" ;;
            VPC2)                  COMMAND="CREATEVPC-2SUBNETS" ;;
            CTM)                   COMMAND="CLOUDTRAILMENU" ;;
            CTMENU)                COMMAND="CLOUDTRAILMENU" ;;
            DUMENU)                COMMAND="USERMENU" ;;
            UM)                    COMMAND="USERMENU" ;;
            DUM)                   COMMAND="USERMENU" ;;
            CAK)                   COMMAND="CREATEACCESSKEYS" ;;
            RAK)                   COMMAND="REPLACEACCESSKEYS" ;;
            LAK)                   COMMAND="LISTACCESSKEYS" ;;
            DAK)                   COMMAND="DELETEACCESSKEYS" ;;
            GLP)                   COMMAND="GETLOCALPOLICIES" ;;
            GAP)                   COMMAND="GETALLPOLICIES" ;;
            LAP)                   COMMAND="LISTALLPOLICIES" ;;
            LLP)                   COMMAND="LISTLOCALPOLICIES" ;;
            LAWSP)                 COMMAND="LISTAWSPOLICIES" ;;
            CP)                    COMMAND="CHANGEPASSWORD" ;;
            CA)                    COMMAND="CLOUDTRAIL-ACTIVE" ;;
            CZ)                    COMMAND="CLOUDTRAIL-USER"
                                   USERNAME="ALL"
                                   ;;
            CW)                    COMMAND="CLOUDTRAIL-WATCH" ;;
            LU2)                   COMMAND="LISTUSERS2" ;;
            LG)                    COMMAND="LISTGROUPS" ;;
            LR)                    COMMAND="LISTROLES" ;;
            SCRAM)                 COMMAND="SCRAMPASSWORD" ;;
	esac
}
# ---------------------------------------------------------------------------------------------------------
# MACROS
# ---------------------------------------------------------------------------------------------------------
putconfig() {
     EPOCHTIME=`date --rfc-3339=seconds |gawk '{print $1 "." $2}'`
     cp  ~/.cuu.txt  ~/.cuu.$EPOCHTIME.txt
     $CUUHOME/putconfig.awkx "$1"  "$2"
}
putconfigecho() {
     EPOCHTIME=`date --rfc-3339=seconds |gawk '{print $1 "." $2}'`
     cp   ~/.cuu.txt  ~/.cuu.$EPOCHTIME.txt
     $CUUHOME/putconfig.awkx "$1"  "$2"
     printf "%-18s %s\n" "$1" "$2"
}
getconfig() {
     CONFIGITEM=`gawk  -v w=$1 -v def=NONE -F= '{r=def;gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {r=$2;exit;}} END{print r;}' ~/.cuu.txt`
}
getconfigecho() {
     CONFIGITEM=`gawk  -v w=$1 -v def=NONE -F= '{r=def;gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {r=$2;exit;}} END{print r;}' ~/.cuu.txt`
     printf "%-18s %s\n" $1 $CONFIGITEM
}
window() {
     print "WINDOW START TIME  "$ISOAGO"  "$AGO
     print "WINDOW END TIME    "$ISOANON"  "$ANON
}
createACCESSKEY() {
     assertACCOUNTandUSERNAME
     aws --profile $ACCOUNT --output text iam create-access-key --user-name $USERNAME > $Tmp
     cat $Tmp | gawk -v A=$ACCOUNT -v U=$USERNAME '@include "cuu.awk"; { print configrecord($0,A,U,A); }'
}
createLOGINPROFILE() {
     assertACCOUNTandUSERNAMEandPASSWORD
     aws --profile $ACCOUNT iam create-login-profile --user-name $USERNAME --password $PASSWORD  --password-reset-required
     optionalGROUPADD
}
createUSER() {
     assertACCOUNTandUSERNAMEandPASSWORD
     aws --profile $ACCOUNT iam create-user --user-name $USERNAME
     aws --profile $ACCOUNT iam create-login-profile --user-name $USERNAME --password $PASSWORD  --password-reset-required
     aws --profile $ACCOUNT iam attach-user-policy --user-name $USERNAME --policy-arn arn:aws:iam::aws:policy/IAMUserChangePassword
}
deleteUSER() {
     assertACCOUNTandUSERNAME
     aws --profile $ACCOUNT iam delete-login-profile --user-name $USERNAME 
     aws --profile $ACCOUNT iam delete-user --user-name $USERNAME 
}
wipeUSER() {
     assertACCOUNTandUSERNAME
               MFALIST=`aws --profile $ACCOUNT --output text iam list-mfa-devices  --user-name $USERNAME --query "MFADevices[*].[SerialNumber]"`
               for ITEM in $MFALIST; do
                    aws --profile $ACCOUNT iam deactivate-mfa-device --user-name $USERNAME --serial-number $ITEM
               done
               MFALIST=""
     wipePOLICIES
     wipeGROUPS
     wipeACCESSKEYS
     print "User Wiped"
}
wipeSERVICESPECIFICCREDENTIALS() {
     assertACCOUNTandUSERNAME
     # aws --profile $ACCOUNT iam list-service-specific-credentials --user-name $USERNAME 
     LISTCREDS=`aws --profile $ACCOUNT iam list-service-specific-credentials --user-name $USERNAME --query "ServiceSpecificCredentials[*].[ServiceSpecificCredentialId]" --output text`
     print $LISTCREDS
     for ITEM in $LISTCREDS; do
          print "Delete "$ITEM
          aws --profile $ACCOUNT iam delete-service-specific-credential --service-specific-credential-id $ITEM --user-name $USERNAME
     done
     LISTCREDS=""
 }
wipeSSHPUBLICKEYS() {
     assertACCOUNTandUSERNAME
     # aws --profile $ACCOUNT iam list-ssh-public-keys --user-name $USERNAME 
     LISTKEYS=`aws --profile $ACCOUNT iam list-ssh-public-keys --user-name $USERNAME --query "SSHPublicKeys[*].[SSHPublicKeyId]" --output text`
     print $LISTKEYS
     for ITEM in $LISTKEYS; do
          print "Delete "$ITEM
          aws --profile $ACCOUNT iam delete-ssh-public-key --ssh-public-key-id $ITEM --user-name $USERNAME
     done
     LISTKEYS=""
 }

wipePOLICIES() {
     assertACCOUNTandUSERNAME
     LISTPOLICIES=`aws --profile $ACCOUNT iam list-attached-user-policies --user-name $USERNAME --query "AttachedPolicies[*].[PolicyArn]" --output text`
     for ITEM in $LISTPOLICIES; do
          aws --profile $ACCOUNT iam detach-user-policy --user-name $USERNAME --policy-arn $ITEM 
     done
     LISTPOLICIES=""
 }
wipeGROUPS() {
     assertACCOUNTandUSERNAME
     GROUPLIST=`aws --profile $ACCOUNT iam list-groups-for-user --user-name $USERNAME --query "Groups[*].[GroupName]" --output text`
     confirm
     for ITEM in $GROUPLIST; do
          aws --profile $ACCOUNT iam remove-user-from-group --user-name $USERNAME --group-name $ITEM 
     done
     GROUPLIST=""
}
wipeACCESSKEYS() {
     assertACCOUNTandUSERNAME
     ACCESSKEYLIST=`aws --profile $ACCOUNT iam list-access-keys --user-name $USERNAME  --query "AccessKeyMetadata[*].[AccessKeyId]" --output text`
     for ITEM in $ACCESSKEYLIST; do
          print $ITEM
     done
     for ITEM in $ACCESSKEYLIST; do
          aws --profile $ACCOUNT iam delete-access-key --user-name $USERNAME --access-key-id $ITEM
     done
     ACCESSKEYLIST=""
}
stampCUUOUT() {
     print "# --------------------------------------------------------------------------------------------------------" >> /tmp/cuu.out
     print "# --------------------------------------------------------------------------------------------------------" >> /tmp/cuu.out
     print "# --------------------------------------------------------------------------------------------------------" >> /tmp/cuu.out
     date >> /tmp/cuu.out
}
datestampCUUOUT() {
     date >> /tmp/cuu.out
}
buildUSERLIST() {
     USERLIST=""
     if [ "$USERNAME" == "USERLIST" ] ; then
          USERLIST=`cat userlist`
     else
          if [ "$USERNAME" == "ALL" ] ; then
              confirmprompt "You have selected all the users in "$1
              USERLIST=`aws --profile $1 iam list-users --query "Users[*].[UserName]" --output text`
          else
              USERLIST=$USERNAME
          fi
     fi
}
buildPROFILELISTnp() {
     PROFILELIST=""
     PROFILELIST=$ACCOUNT
     if [ "$ACCOUNT" == "ACCOUNTLIST" ] ; then
          PROFILELIST=`cat profilelist`
     fi
     if [ "$ACCOUNT" == "" ] ; then
          PROFILELIST=`gawk -v  w=PROFILELIST -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
     fi
     if [ "$ACCOUNT" == "ALL" ] ; then
          PROFILELIST=`gawk -v  w=PROFILELIST -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
     fi
}
buildPROFILELIST() {
     PROFILELIST=""
     PROFILELIST=$ACCOUNT
     if [ "$ACCOUNT" == "ACCOUNTLIST" ] ; then
          PROFILELIST=`cat profilelist`
     fi
     if [ "$ACCOUNT" == "" ] ; then
          confirmprompt "You have selected all the accounts from ~/.cuu.txt"
          PROFILELIST=`gawk -v  w=PROFILELIST -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
     fi
     if [ "$ACCOUNT" == "ALL" ] ; then
          confirmprompt "You have selected all the accounts from ~/.cuu.txt"
          PROFILELIST=`gawk -v  w=PROFILELIST -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
     fi
}
buildPROFILELIST2() {
     PROFILELIST=""
     if [ "$ACCOUNT" == "ACCOUNTLIST" ] ; then
          PROFILELIST=`cat profilelist`
     else
          if [ "$ACCOUNT" == "" ] ; then
              confirmprompt "You have selected all the accounts from ~/.cuu.txt"
              PROFILELIST=`gawk -v  w=PROFILELIST -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
          else
              PROFILELIST=$ACCOUNT
          fi
     fi
     print $PROFILELIST
}
buildVOLUMELIST() {
     VOLUMELIST=""
     VOLUMELIST=`aws --profile $ACCOUNT --region $REGION ec2 describe-volumes --query "Volumes[*].{ID:VolumeId}"`
}
buildINSTANCELIST() {
     INSTANCELIST=""
     INSTANCELIST=`aws --profile $ACCOUNT --region $REGION ec2 describe-instances --query "Reservations[*].[Instances[*].InstanceId]"`
}
buildREGIONLIST() {
     REGIONLIST=$REGION;
     if [ "$REGION" == "REGIONLIST" ] ; then
          REGIONLIST=`gawk -v  w=REGIONLIST -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
     fi
     if [ "$REGION" == "US" ] ; then
          REGIONLIST="us-east-1 us-east-2 us-west-1 us-west-2"
     fi
     if [ "$REGION" == "EUROPE" ] ; then
          REGIONLIST="eu-west-1 eu-west-2 eu-west-3 eu-central-1"
     fi
     if [ "$REGION" == "GLOBAL" ] ; then
          REGIONLIST="us-east-1 us-east-2 us-west-1 us-west-2 eu-west-1 eu-west-2 eu-west-3 eu-central-1 ap-south-1 ap-northeast-2 ap-northeast-1 ap-southeast-1 ap-southeast-2 ca-central-1 sa-east-1"
     fi
}
verbose() {
     if [ "$VERBOSE" == "1" ] ; then
          print $1 >&2
     fi
}
groupREMOVE() {
     aws --profile $ACCOUNT iam remove-user-from-group --user-name $USERNAME --group-name $1
}
optionalGROUPADD() {
     if [ "$THING" != "" ] ; then
           aws --profile $ACCOUNT iam add-user-to-group --group-name $THING  --user-name $USERNAME
     fi
}
groupADD() {
     aws --profile $ACCOUNT iam add-user-to-group --user-name $USERNAME --group-name $1
}
groupsetREMOVE() {
               THISSET=`cat groupset.txt | egrep -v "(^#)|(^$)" | egrep arn[:]aws[:]iam`
               confirmset
               for ITEM in $THISSET; do
                    groupREMOVE $ITEM
               done
               THISSET=""
}
groupsetATTACH() {
               THISSET=`cat groupset.txt | egrep -v "(^#)|(^$)" | egrep arn[:]aws[:]iam`
               confirmset
               for ITEM in $THISSET; do
                    groupADD $ITEM
               done
               THISSET=""
}
policysetREMOVE() {
               THISSET=`cat policyset.txt | egrep -v "(^#)|(^$)" | egrep arn[:]aws[:]iam`
               confirmset
               for ITEM in $THISSET; do
                    policyREMOVE $ITEM
               done
               THISSET=""
}
policysetATTACH() {
     THISSET=`cat policyset.txt | egrep -v "(^#)|(^$)" | egrep arn[:]aws[:]iam`
     confirmset
     for ITEM in $THISSET; do
          policyATTACH $ITEM
     done
     THISSET=""
}

policyREMOVE() {
     assertACCOUNTandUSERNAME
     THISACCT=`aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"`
     THISPOLICY=`echo $1 | sed -e s/THISACCOUNT/$THISACCT/g`
     echo $1
     echo $THISPOLICY
     if [ "$USERNAME" == "USERLIST" ] ; then
          LIST=`cat userlist`
     else
          LIST=$USERNAME
     fi
     for USER in $LIST; do
          print $USER $THISPOLICY
          aws --profile $ACCOUNT iam detach-user-policy --policy-arn $THISPOLICY --user-name $USER
     done
     LIST=""
}
policyATTACH() {
     assertACCOUNTandUSERNAME
     THISACCT=`aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"`
     THISPOLICY=`echo $1 | sed -e s/THISACCOUNT/$THISACCT/g`
     echo $1
     echo $THISPOLICY
     if [ "$USERNAME" == "USERLIST" ] ; then
         LIST=`cat userlist`
     else
         LIST=$USERNAME
     fi
     for USER in $LIST; do
          print $USER $1
          aws --profile $ACCOUNT iam attach-user-policy --policy-arn $THISPOLICY --user-name $USER
     done
     LIST=""
}
notifyhtml() {
               if [ "$NOTIFYTO" == "" ] ; then
                     NOTHING=0
               else
                   print "Sending...."
                   cat /tmp/email.html | mailx -a 'Content-Type: text/html' -r $NOTIFYFROM -s $1 $NOTIFYTO
               fi
}
notify() {
               if [ "$NOTIFYTO" == "" ] ; then
                     NOTHING=0
               else
                   print "Sending...."
                   cat $Tmp | mailx -r $NOTIFYFROM -s $1 $NOTIFYTO
               fi
}

clean() {
    rm -rf $Tmp
    rm -rf $Tmp2
    rm -rf $Tmp3
    rm -rf ./cuu.out
    rm -rf ./cuureport.txt
}
awsnull() {
    NOTHING=0;
}
awsdbg() {
     printf "DBGOUT:   aws %s %s %s %s %s %s %s %s %s %s %s %s\n" $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12
}
crack() {
    print $1
    exit 1
}
# -----------------------------------------------------------------------------------------------------------------------
# -- ASSERTS
# -----------------------------------------------------------------------------------------------------------------------
debug() {
    if [ 1 == 1 ] ; then
         print $1
    fi
}
assertfile() {
    if [ -a $1 ] ; then
         NOTHING=0
    else
         print "File "$1" Not Found"
         exit 1
    fi
}
asserte() {
    print "Checking: "$1
    if [ "$1" == "" ] ; then
         print $2
         exit 1
    fi
}
assert() {
    if [ "$1" == "" ] ; then
         print $2
         exit 1
    fi
}
assertgroupexists() {
    if [ "$1" == "" ] ; then
         NOTHING=0
    else
         assert "$ACCOUNT" "Profile not specified"
         print "GROUP : " $1
    fi
}
assertpolicyexists() {
    if [ "$1" == "" ] ; then
         NOTHING=0
    else
         assert "$ACCOUNT" "Profile not specified"
         print "POLICY: " $1
    fi
}
groupassert() {
    if [ "$1" == "" ] ; then
         NOTHING=0
    else
         assertACCOUNTandUSERNAME
         groupADD $1
    fi
}
policyassert() {
    if [ "$1" == "" ] ; then
         NOTHING=0
    else
         assertACCOUNTandUSERNAME
         policyATTACH $1
    fi
}
wildcard() {
    THIS=`echo "$1" | gawk -v re="[*]" '{sz=""; if ($0 ~ re) sz="match";} END {print sz;}'`
    if [ "$THIS" == "" ] ; then
        NOTHING=0
    else
         print "Failed Regex Check"
         print "Use the % as a wildcard character, not the * character"
         exit 1
    fi

}
assertACCOUNTandS3BUCKETandS3KEYandDOCUMENT() {
     assert "$ACCOUNT"  "Profile not specified"
     assert "$S3BUCKET"  "S3 Bucket not specified"
     assert "$S3KEY"     "S3 Key not specified"
     assert "$DOCUMENT"  "Document/Content/File not specified"
}
assertACCOUNTandS3BUCKET() {
     assert "$ACCOUNT"  "Profile not specified"
     assert "$S3BUCKET"  "S3 Bucket not specified"
}
assertACCOUNTandS3BUCKETandS3KEY() {
     assert "$ACCOUNT"  "Profile not specified"
     assert "$S3BUCKET"  "S3 Bucket not specified"
     assert "$S3KEY"     "S3 Key not specified"
}
assertACCOUNTandUSERNAME() {
     assert "$ACCOUNT" "Profile not specified"
     assert "$USERNAME" "User not specified"
}
assertACCOUNTandUSERNAMEandPASSWORD() {
     assert "$ACCOUNT"  "Profile not specified"
     assert "$USERNAME" "Username not specified"
     assert "$PASSWORD" "Password not specified"
}
assertACCOUNTandUSERNAMEandTHING() {
     assert "$ACCOUNT"  "Profile not specified"
     assert "$USERNAME" "Username not specified"
     assert "$THING"    $1" not specified"
}
assertACCOUNTandTHING() {
     assert "$ACCOUNT"  "Profile not specified"
     assert "$THING"    $1" not specified"
}
antiassert() {
    if [ "$1" != "" ] ; then
         print $2
         exit 1
    fi
}
confirmset() {
     print ""
     for ITEM in $THISSET; do
          print "   "$ITEM
     done
     confirm
}
confirmprompt() {
     if [ "$FORCE" != "yes" ] ; then
          print "   "$1
          confirm
     fi
}
confirm() {
     if [ "$FORCE" != "yes" ] ; then
          print -n "   For "$ACCOUNT":  Enter '10111' to confirm >> "
          read STRIN
          if [ "$STRIN" != "10111" ] ; then
               print "   Exiting - No Match"
               exit 1
          fi
     fi
}

echoitem() {
    print $1
}
typeset -A DOTCUU
getdotcuu() {
     SZITEM=`gawk -v w=$1 -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
     DOTCUU[$SZITEM]=$2
     print $1 >> $DotCuuFile
}
typeset -A CMDREL
typeset -A INFO 
typeset -A OPTO 
typeset -A CMDALI
typeset -u COMMAND
typeset -u UPPERSTRING
typeset -l CTYPE
typeset -u EXTRA
COMMAND=""
USERNAME=""
ACCOUNT=""
CREATEUSER=""
THING=""
COUNT=""
ACCTNUMBER=""
IN=""
OUT=""
FORCE=""
LOOP="no"
GROUPREMOVE="" 
POLICYADD="" 
MYCIDR="" 
VPCID="" 
IGWID="" 
AMI="" 
# -----------------------------------------------------------------------------------------------------------------------
# -- SETUPS
# -----------------------------------------------------------------------------------------------------------------------
THISDAY=`echo "1" | gawk '@include "time.awk"; { print thisDAY(); }'`
LASTMONTHSTART=`echo "1" | gawk '@include "time.awk"; { print lastMONTH(thisMONTH(0)); }'`
LASTMONTHEND=`echo "1" | gawk '@include "time.awk"; { print MONTHEND(lastMONTH(thisMONTH(0))); }'`
THISMONTHSTART=`echo "1" | gawk '@include "time.awk"; { print thisMONTH(0); }'`
THISMONTHEND=`echo "1" | gawk '@include "time.awk"; { print MONTHEND(thisMONTH(0)); }'`
THISYEAR=`echo "1" | gawk '@include "time.awk"; { print thisYEAR(); }'`
THISYEAREND=`echo "1" | gawk '@include "time.awk"; { print thisYEAREND(); }'`
NEXTYEAR=`echo "1" | gawk '@include "time.awk"; { print nextYEAR(); }'`
NEXTYEAREND=`echo "1" | gawk '@include "time.awk"; { print nextYEAREND(); }'`
USREGIONLIST="us-east-1 us-east-2 us-west-1 us-west-2"
EUROPEREGIONLIST="eu-west-1 eu-west-2 eu-west-3 eu-central-1"
GLOBALREGIONLIST="us-east-1 us-east-2 us-west-1 us-west-2 eu-west-1 eu-west-2 eu-west-3 eu-central-1 ap-south-1 ap-northeast-2 ap-northeast-1 ap-southeast-1 ap-southeast-2 ca-central-1 sa-east-1"
RAN=`tr -cd \#_[:alnum:] < /dev/urandom |  fold -w 18 | head -1 |gawk '{print $0 "!!"}'`
getdotcuu "P1" "Policy 1 ARN"; P1=$SZITEM;
getdotcuu "P2" "Policy 2 ARN"; P2=$SZITEM;
getdotcuu "P3" "Policy 3 ARN"; P3=$SZITEM;
getdotcuu "P4" "Policy 4 ARN"; P4=$SZITEM;
getdotcuu "P5" "Policy 5 ARN"; P5=$SZITEM;

P1=`gawk -v w=P1 -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
P2=`gawk -v w=P2 -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
P3=`gawk -v w=P3 -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
P4=`gawk -v w=P4 -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
P5=`gawk -v w=P5 -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
G1=`gawk -v w=G1 -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
G2=`gawk -v w=G2 -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
G3=`gawk -v w=G3 -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
G4=`gawk -v w=G4 -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
G5=`gawk -v w=G5 -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
PASSWORD=`gawk  -v w=PASSWORD  -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
FIXEDWORD=`gawk -v w=FIXEDWORD -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
WATCHUSER=`gawk -v w=WATCHUSER -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
WATCHPROFILE=`gawk -v w=WATCHPROFILE -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
PROFILELIST=`gawk -v w=PROFILELIST -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
POLICYLIST=`gawk -v  w=POLICYLIST -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
GROUPREMOVE=`gawk -v w=GROUPREMOVE -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
POLICYADD=`gawk -v   w=POLICYADD -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
MYCIDR=`gawk -v  w=MYCIDR -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
VPCID=`gawk -v  w=VPCID -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
IGWID=`gawk -v  w=IGWID -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
SUBNET1=`gawk -v  w=SUBNET1 -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
SUBNET2=`gawk -v  w=SUBNET2 -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
AMI=`gawk -v  w=AMI -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
KP=`gawk -v  w=KP -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
PUBLISHBUCKET=`gawk -v w=PUBLISHBUCKET -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
DEFAULTUSERGROUP=`gawk -v  w=DEFAULTUSERGROUP -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
DEFAULTUSERPOLICY=`gawk -v  w=DEFAULTUSERPOLICY -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
AWSPOLICY1=`gawk -v  w=AWSPOLICY1 -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
AWSPOLICY2=`gawk -v  w=AWSPOLICY2 -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
AWSPOLICY3=`gawk -v  w=AWSPOLICY3 -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
AWSPOLICY4=`gawk -v  w=AWSPOLICY4 -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
GROUPNAME1=`gawk -v  w=GROUPNAME1 -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
GROUPNAME2=`gawk -v  w=GROUPNAME2 -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
GROUPNAME3=`gawk -v  w=GROUPNAME3 -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
GROUPNAME4=`gawk -v  w=GROUPNAME4 -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`


# This is the modified get parameter function, with a default option
NOTIFYTO=""

MYCUUTAG=`gawk -v w=MYCUUTAG -v def=NONE -F= '{r=def;gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {r=$2;exit;}} END{print r;}' ~/.cuu.txt`
EXPIRES=`gawk -v w=EXPIRES -v def=43200 -F= '{r=def;gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {r=$2;exit;}} END{print r;}' ~/.cuu.txt`
REGION=`gawk -v w=REGION -v def=us-east-1 -F= '{r=def;gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {r=$2;exit;}} END{print r;}' ~/.cuu.txt`
TIMEFACTOR=`gawk -v w=TIMEFACTOR -v def=24 -F= '{r=def;gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {r=$2;exit;}} END{print r;}' ~/.cuu.txt`
TRUNCATELENGTH=`gawk -v w=TRUNCATELENGTH -v def=56 -F= '{r=def;gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {r=$2;exit;}} END{print r;}' ~/.cuu.txt`
NOTIFICATION=`gawk -v w=NOTIFICATION -v def="ON" -F= '{r=def;gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {r=$2;exit;}} END{print r;}' ~/.cuu.txt`
# NOTIFYTO=`gawk -v w=NOTIFYTO -v def="NONE" -F= '{r=def;gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {r=$2;exit;}} END{print r;}' ~/.cuu.txt`
NOTIFYFROM=`gawk -v w=NOTIFYFROM -v def="NONE" -F= '{r=def;gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {r=$2;exit;}} END{print r;}' ~/.cuu.txt`
DETAILFLAG=""
SHOWRAW="no" 
ISOTIME="no" 
BIGNAMES="no" 
BIGEVENTS="no" 
SUMMARY="no" 
S3BUCKET=""
S3KEY="";
CTYPE="";
EXTRA="";
VERBOSE="0"
MAILME="0"


while getopts "mvX:e:C:b:k:jr:Ff:D:dN:n:c:Ru:a:p:t:ihH:SZBET:Q:" arg
do
	case $arg in
            v) VERBOSE="1" ;;
            m) MAILME="1" ;;
            X) EXTRA=$OPTARG ;;
            N) NOTIFYTO=$OPTARG ;;
            n) NAMESTRING=$OPTARG ;;
            e) EXPIRES=$OPTARG 
               if [ $EXPIRES -eq 0 ] ; then
                    EXPIRES=$((3600*24*7))
               fi
               ;;
            C) CTYPE=$OPTARG ;;
            b) S3BUCKET=$OPTARG ;;
            k) S3KEY=$OPTARG ;;
            S) SUMMARY="yes" ;;
            B) BIGNAMES="yes" ;;
            E) BIGEVENTS="yes" ;;
            Z) ISOTIME="yes" ;;
            r) REGION=$OPTARG  ;;
            F) FORCE="yes" ;;
            f) FILE=$OPTARG ;;
            i) LOOP="yes" ;;
            d) DETAIL="yes"; DETAILFLAG=" -d " ;;
            D) DOCUMENT=$OPTARG ;;
            T) TIMEFACTOR=$OPTARG ;;
            Q) QUANTAFACTOR=$OPTARG ;;
            c) COMMAND=$OPTARG ;;
            u) USERNAME=$OPTARG
               if [ "$USERNAME" == "ALLUSERS" ] ; then
                  assert "$ACCOUNT"  "Profile not specified"
                  USERNAME=`aws --profile $ACCOUNT iam list-users --query "Users[*].[UserName]" --output text`
                  print "" 
                  print "   You are operating on all the users in the account"
                  print "" 
                  echo $USERNAME
                  print "" 
                  confirm
                  print "" 
               fi
               ;;
            R) SHOWRAW="yes" ;;
            p) PASSWORD=$OPTARG ;;
            t) THING=$OPTARG ;;
	    H) cuu -c commands | egrep -i "^[ ]*$OPTARG"
               exit 0;;
	    h) usage
	       cuu -c commands
               exit 0 ;;
            a) ACCOUNT=$OPTARG
               ;;
            abc) ACCOUNT=$OPTARG
               if [ "$ACCOUNT" == "ALL" ] ; then
                   ACCOUNT=$PROFILELIST
               fi
               if [ "$ACCOUNT" == "ALLACCOUNTS" ] ; then
                   ACCOUNT=$PROFILELIST
               fi
               if [ "$ACCOUNT" == "LIST" ] ; then
                   ACCOUNT=$PROFILELIST
               fi
               ;;
	    *) exit 0 ;;
	esac
done
shift $(($OPTIND - 1))


if [ $# -eq 1 ] ; then
     if [ "$COMMAND" == "" ] ; then
          COMMAND=$1
          ARG2=""
     fi
fi
if [ $# -eq 2 ] ; then
     if [ "$COMMAND" == "" ] ; then
          COMMAND=$1
          ARG2=$2
     fi
fi

commandABBREVIATIONS
# putconfig "LASTBUCKET"  "$S3BUCKET"
# -----------------------------------------------------------------------------------------------------------------------
# Notes
# -----------------------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------------------
# -- AWS CLI command line prefix setup
# -----------------------------------------------------------------------------------------------------------------------
AWS="aws --profile $ACCOUNT --region $REGION --output text "
AWSJ="aws --profile $ACCOUNT --region $REGION --output json "
# -----------------------------------------------------------------------------------------------------------------------
# -- TIME SETUPS
# -----------------------------------------------------------------------------------------------------------------------
ISOAGO=`gawk -v T=$TIMEFACTOR '@include "cuu.awk"; BEGIN { print isoyesterhour(T);}'`
ISOFUTURE=`gawk -v T=$TIMEFACTOR '@include "cuu.awk"; BEGIN { print isofuturehour(T);}'`
ISOFUTUREMINUTE=`gawk -v T=$TIMEFACTOR '@include "cuu.awk"; BEGIN { print isofutureminute(1);}'`
ISOANON=`gawk '@include "cuu.awk"; BEGIN { print isonow();}'`
AGO=`gawk  -v T=$ISOAGO  '@include "cuu.awk"; BEGIN { print isotolocal(T, "%m/%d/%Y %I:%M:%S%p");}'`
ANON=`gawk -v T=$ISOANON '@include "cuu.awk"; BEGIN { print isotolocal(T, "%m/%d/%Y %I:%M:%S%p");}'`

# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND PROCESSOR: 
# -----------------------------------------------------------------------------------------------------------------------
bCmd=0
gCmd=0
szCmd=""
OA="-a"
OART="-a -r -t"
OAR="-a -r"
OAU="-a -u"
OAUT="-a -u -t"

touch ~/.cuu.txt
LASTCONFIG() {
    cat ~/.cuu.last | gawk -v I=$1 '
    /^$1[=]/ {next}
             {print $0}
    '  > ~/.cuu.local
    cp ~/.cuu.local ~/.cuu.last
    rm -rf  ~/.cuu.local
    print $1"="$2 >> ~/.cuu.last
}

rm -rf $CuuCommandFile  >/dev/null 2>&1
CUUABEND() { print "CUU Internal Error!"; print "     Duplicate Command: "$1; exit 1; }

typeset -A COMMANDSET
typeset -A COMMANDALIASES
CMDRAN=`tr -cd \#_[:alnum:] < /dev/urandom |  fold -w 18 | head -1 |gawk '{print $0 "##"}'`
LOGCOMMAND() {
     EPOCHTIME=`date --rfc-3339=seconds |gawk '{print $1 "." $2}'`
     NOTHING=0
     return 0
}
COMMANDPROC() {
     bCmd=0
     THISCMD=`echo "$1" | gawk -F, '{s=$1;sub(/^ */, "", s);sub(/ *$/, "", s);print s;}'`
     MASTERCMD=`echo "$1" | gawk -F, '{s=$1;sub(/^ */, "", s);sub(/ *$/, "", s);print s;}'`
     COMMANDALIASES["$THISCMD"]="$1"
     if [ "$THISCMD" == "" ] ; then return bCmd; fi
     if [ "${COMMANDSET[$THISCMD]}" == "$CMDRAN" ] ; then CUUABEND "$THISCMD"; else COMMANDSET[$THISCMD]="$CMDRAN"; fi
     if [ "$4" != "" ] ; then print $THISCMD >> $CuuCommandFile; fi
     INFO[$THISCMD]="$2"
     OPTO[$THISCMD]="$3"
     CMDREL[$THISCMD]="$4"
     if [ "$COMMAND" == "$THISCMD" ] ; then LOGCOMMAND; fi
     if [ "$COMMAND" == "$THISCMD" ] ; then bCmd=1; gCmd=1; szCmd="$COMMAND"; return bCmd; fi


     bCmd=0
     THISCMD=`echo "$1" | gawk -F, '{s=$2;sub(/^ */, "", s);sub(/ *$/, "", s);print s;}'`
     if [ "$THISCMD" == "" ] ; then return bCmd; fi
     if [ "${COMMANDSET[$THISCMD]}" == "$CMDRAN" ] ; then CUUABEND "$THISCMD"; else COMMANDSET[$THISCMD]="$CMDRAN"; fi
     CMDALI[$MASTERCMD]=${CMDALI[$MASTERCMD]}"$THISCMD"" "
     # if [ "$4" != "" ] ; then print $THISCMD >> $CuuCommandFile; fi
     INFO[$THISCMD]="$2"
     OPTO[$THISCMD]="$3"
     CMDREL[$THISCMD]="$4"
     if [ "$COMMAND" == "$THISCMD" ] ; then LOGCOMMAND; fi
     if [ "$COMMAND" == "$THISCMD" ] ; then bCmd=1; gCmd=1; szCmd="$COMMAND"; return bCmd; fi

     bCmd=0
     THISCMD=`echo "$1" | gawk -F, '{s=$3;sub(/^ */, "", s);sub(/ *$/, "", s);print s;}'`
     if [ "$THISCMD" == "" ] ; then return bCmd; fi
     if [ "${COMMANDSET[$THISCMD]}" == "$CMDRAN" ] ; then CUUABEND "$THISCMD"; else COMMANDSET[$THISCMD]="$CMDRAN"; fi
     CMDALI[$MASTERCMD]=${CMDALI[$MASTERCMD]}"$THISCMD"" "
     # if [ "$4" != "" ] ; then print $THISCMD >> $CuuCommandFile; fi
     INFO[$THISCMD]="$2"
     OPTO[$THISCMD]="$3"
     CMDREL[$THISCMD]="$4"
     if [ "$COMMAND" == "$THISCMD" ] ; then LOGCOMMAND; fi
     if [ "$COMMAND" == "$THISCMD" ] ; then bCmd=1; gCmd=1; szCmd="$COMMAND"; return bCmd; fi

     bCmd=0
     THISCMD=`echo "$1" | gawk -F, '{s=$4;sub(/^ */, "", s);sub(/ *$/, "", s);print s;}'`
     if [ "$THISCMD" == "" ] ; then return bCmd; fi
     if [ "${COMMANDSET[$THISCMD]}" == "$CMDRAN" ] ; then CUUABEND "$THISCMD"; else COMMANDSET[$THISCMD]="$CMDRAN"; fi
     CMDALI[$MASTERCMD]=${CMDALI[$MASTERCMD]}"$THISCMD"" "
     # if [ "$4" != "" ] ; then print $THISCMD >> $CuuCommandFile; fi
     INFO[$THISCMD]="$2"
     OPTO[$THISCMD]="$3"
     CMDREL[$THISCMD]="$4"
     if [ "$COMMAND" == "$THISCMD" ] ; then LOGCOMMAND; fi
     if [ "$COMMAND" == "$THISCMD" ] ; then bCmd=1; gCmd=1; szCmd="$COMMAND"; return bCmd; fi

     return 0
}
commands() {
     COMMANDLIST
}
COMMANDLIST() {
     rm $Tmp  >/dev/null 2>&1
     LIST=`cat $CuuCommandFile`
     # printf "%-21s %-26s %-6s %-45s %s\n" "Command" "Options" "Ver" "Description" "Aliases" >> $Tmp
     printf "%s | %s | %s | %s | %s\n" "Command" "Options" "Ver" "Description" "Aliases" >> $Tmp
     for ITEM in $LIST; do
          SZOPTO="${OPTO[$ITEM]}"
          if [ "$SZOPTO" == "" ] ;      then SZOPTO="-a [-r]"; fi
          if [ "$SZOPTO" == "-a" ] ;    then SZOPTO="-a [-r]"; fi
          if [ "$SZOPTO" == "-a -u" ] ; then SZOPTO="-a [-r] -u"; fi
          if [ "$SZOPTO" == "-a -t" ] ; then SZOPTO="-a [-r] -u"; fi
          if [ "$SZOPTO" == "-a -b" ] ; then SZOPTO="-a [-r] -u"; fi
          if [ "$SZOPTO" == "-a -p -u" ] ; then SZOPTO="-a [-r] -u"; fi
          if [ "$SZOPTO" == "-a -u -p" ] ; then SZOPTO="-a [-r] -u"; fi
               typeset -l v=$ITEM
               UPPERSTRING=$v
               # printf "%-21s %-26s %-6s %-45s %s\n" $UPPERSTRING "$SZOPTO" "${CMDREL[$ITEM]}" "${INFO[$ITEM]}" "${CMDALI[$ITEM]}" >> $Tmp
               printf "%s | %s | %s | %s | %s\n" $UPPERSTRING "$SZOPTO" "${CMDREL[$ITEM]}" "${INFO[$ITEM]}" "${CMDALI[$ITEM]}" >> $Tmp
     done
     cp $Tmp fed
     if [ "$1" == "" ] ; then 
          cat $Tmp | sort
     else
          cat $Tmp | sort | egrep -i "^[ ]*$1"
     fi
     NOTHING=0
     LIST=""
}
COMMANDINFO() {
    INFO[$szCmd]="$1"
    # print ${INFO[$szCmd]}
}

DOTCUULIST() {
     rm $Tmp  >/dev/null 2>&1
     LIST=`cat $DotCuuFile`
     printf "     %s %s\n" "Item" "Description"
     for ITEM in $LIST; do
               printf "     %s %s\n" "$ITEM" "${DOTCUU["$ITEM"]}"
     done
     NOTHING=0
     LIST=""
}
COMMANDPROC "ONE,TWO,THREE" "Mark the cuu.out file with a stamp" "-a"; if [ $bCmd -gt 0 ] ; then
     print "START"
fi
COMMANDPROC "STAMPCUUOUT,STAMP" "Mark the cuu.out file with a stamp" "-a"; if [ $bCmd -gt 0 ] ; then
     stampCUUOUT
fi
COMMANDPROC "CLEARCUUOUT" "Clear cuu.out" "-a"; if [ $bCmd -gt 0 ] ; then
     rm -rf /tmp/cuu.out
     touch  /tmp/cuu.out
fi
# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: LAMBDA Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "LAMBDALS,LAMBDATLIST" "List Lambda Functions" "-a" "v2.0"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     FLDS="FunctionName,Description"
     $AWS lambda list-functions --output json  --query 'Functions[].['$FLDS']'  \
      | tr -d '\n] "' \
      | tr '[' '\n'   \
      | tr ',' ' '    \
      | column -t
fi
# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: VPC Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "VPCDELETE,DELETEVPC" "Delete VPC" "-a -t" "v1.0"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$REGION"   "Region not specified"
     assert "$THING"    "VPC ID not specified"
     VPCID=$THING
     if [ "$THING" == "LASTVPC" ] ; then getconfigecho "LASTVPCID";   VPCID=$CONFIGITEM; fi
     if [ "$THING" == "LAST" ] ;    then getconfigecho "LASTVPCID";   VPCID=$CONFIGITEM; fi
     print "VPC ID to be deleted is: "$VPCID
     confirm

     IGWID=`$AWS ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPCID" --query "InternetGateways[].InternetGatewayId"`
     print "IGW   "$IGWID

     RTLIST=`$AWS ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPCID" "Name=association.main,Values=false" --query "RouteTables[].RouteTableId"`
     print "RT    "$RTLIST

     LIST=`$AWS ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPCID" --query "SecurityGroups[].GroupId"`
     print $LIST
     for ITEM in $LIST; do
          aws --profile $ACCOUNT --output json --region $REGION ec2 delete-security-group --group-id $ITEM >/dev/null 2>&1
     done
     LIST=""

     LIST=`$AWS ec2 describe-subnets --filters "Name=vpc-id,Values=$VPCID" --query "Subnets[*].SubnetId"`
     for ITEM in $LIST; do
          aws --profile $ACCOUNT --output text --region $REGION ec2 delete-subnet --subnet-id $ITEM
     done
     LIST=""

     LIST=`$AWS ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPCID" "Name=association.main,Values=false" --query "RouteTables[*].Associations[*].RouteTableAssociationId"`
     for ITEM in $LIST; do
          aws --profile $ACCOUNT --output json --region $REGION ec2 disassociate-route-table  --association-id $ITEM
     done
     LIST=""

     $AWSJ ec2 delete-route-table --route-table-id $RTLIST
     $AWSJ ec2 detach-internet-gateway --internet-gateway-id $IGWID --vpc-id $VPCID
     $AWSJ ec2 delete-internet-gateway --internet-gateway-id $IGWID
     $AWSJ ec2 delete-vpc --vpc-id $VPCID

     NOTHING=0
fi

COMMANDPROC "VPCLS" "List VPCs" "-a" "v1.0"; if [ $bCmd -gt 0 ] ; then
      $AWS ec2 describe-vpcs           --query "Vpcs[*].[VpcId,CidrBlock]"
fi


COMMANDPROC "EC2TERMINATE" "Terminate Instance" "-a [-r] -t <id>" "v1.1"; if [ $bCmd -gt 0 ] ; then
     print "Instance ID "$THING
     $AWS ec2 terminate-instances --instance-id $THING
fi
COMMANDPROC "EC2TERMINATELAST" "Terminate Last Instance" "-a"; if [ $bCmd -gt 0 ] ; then
     getconfigecho "LASTINSTANCEID";    LASTINSTANCEID=$CONFIGITEM
     print "Instance ID "$LASTINSTANCEID
     $AWS ec2 terminate-instances --instance-id $LASTINSTANCEID
fi
COMMANDPROC "AMICREATE" "AMI CREATE" "-a"; if [ $bCmd -gt 0 ] ; then
   assert "$ACCOUNT" "Profile not specified"
#   assert "$THING"   "Instance ID not specified (use -t)"
   buildINSTANCELIST
   for IID in $INSTANCELIST; do
#   if [ "$THING" != "" ] ; then
          IDETAIL=`aws --output text --profile $ACCOUNT ec2 describe-instances --instance-ids $IID --query "Reservations[*].Instances[*].Tags[?Key=='Name'].Value"`
          if [ -z "${IDETAIL}" ] ; then
              IDETAIL="EMPTY"
          fi
              IDETAIL=$IDETAIL","$IID,$PN
          IDETAILFILTERED=`print "$IDETAIL" | gawk '{gsub(/[, ]/,"-",$0);print $0}'`
          print $IDETAILFILTERED
          print $IDETAIL
#         AMIID=`aws --profile ADM ec2 create-image --description "DELETE ME" --name "DELETE ME2" --instance-id i-004b3821c2935b790 --output text`
          AMIID=`aws --profile $ACCOUNT ec2 create-image --description "$IDETAIL" --name "$IDETAILFILTERED"  --instance-id $IID`
          if [ -z "${AMIID}" ] ; then
               aws --profile $ACCOUNT ec2 create-tags   --resources $AMIID --tags Key=CUU,Value=CUU
          fi
          print $AMIID
   done
#   fi
fi
COMMANDPROC "AMILS" "List Local AMIs" "-a"; if [ $bCmd -gt 0 ] ; then
    $AWS ec2 --output text describe-images --owners self --query "Images[].[ImageId,Name,RootDeviceName,CreationDate,BlockDeviceMappings[].[DeviceName,Ebs.SnapshotId]]" | \
          egrep "(ami)|(snap)" | gawk '/^ami-/ { sz = $0; getline; print sz " "$0; }' | sort -k2.2 |column -t

fi
COMMANDPROC "VPCINSTANCE" "Create an instance in the VPC" "-a"; if [ $bCmd -gt 0 ] ; then
     assert $NAMESTRING
     AMI=ami-a4dc46db
     AMI=ami-4ab0e335
     getconfigecho "LASTVPCID";   LASTVPCID=$CONFIGITEM
     getconfigecho "LASTSUBNET1"; LASTSUBNET1=$CONFIGITEM
     getconfigecho "LASTSUBNET2"; LASTSUBNET2=$CONFIGITEM
     getconfigecho "LASTSGID";    LASTSGID=$CONFIGITEM
     INSTANCEID=`aws --profile $ACCOUNT --region $REGION --output text ec2 run-instances  \
                                        --image-id $AMI --count 1 --instance-type m5.large \
                                        --key-name MyStarKeyPairEastOne --security-group-ids $LASTSGID \
                                        --subnet-id $LASTSUBNET1 --query "Instances[0].InstanceId"`
     $AWS ec2 create-tags --resources $INSTANCEID --tags Key=Name,Value=$NAMESTRING
     $AWS ec2 create-tags --resources $INSTANCEID --tags Key=CuuTag,Value=$MYCUUTAG
     $AWS ec2 create-tags --resources $INSTANCEID --tags Key=CuuData,Value=CreatedByCUU

     IP=`aws --profile $ACCOUNT --region $REGION --output text ec2 describe-instances --instance-id $INSTANCEID --query "Reservations[0].Instances[0].PublicIpAddress"`
     putconfigecho "LASTINSTANCEID"   "$INSTANCEID"
     putconfigecho "LASTIP"   "$IP"
     NAMESTRINGNAME="NAMESTRING-"$NAMESTRING
     putconfigecho "$NAMESTRINGNAME"  "$IP"
     print "ssh -i MyStarKeyPairEastOne.pem ubuntu@"$IP
     print "scp -i MyStarKeyPairEastOne.pem ./file ec2-user@"$IP":~/file"
     print $NAMESTRING
     print $INSTANCEID
     print $IP


#      --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=$NAMESTRING}]' 'ResourceType=volume,Tags=[{Key=IName,Value=$NAMESTRING}]'`
#      putconfigecho "LASTSSH"   "ssh -i MyStarKeyPairEastOne.pem ubuntu@"$IP
#      putconfigecho "LASTSCP"   "scp -i MyStarKeyPairEastOne.pem ./file ec2-user@"$IP":~/file"
     # putconfigecho "LASTSSH"   "ssh -i MyStarKeyPairEastOne.pem ec2-user@"$IP
     # aws --profile $ACCOUNT --region $REGION --output text ec2 describe-instances --instance-id $INSTANCEID --query "Reservations[0].Instances[0].State.Name"
 fi


COMMANDPROC "VPCCREATE,CREATEVPC-2SUBNETS" "Create a Two Subnet VPC" "-a" "v1.0"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$REGION"   "Region not specified"
     assert "$MYCIDR"   "My CIDR not specified"
     THIS=""
     SUBNET1=""
     SUBNET2=""
     IGWID=""
     confirm

     # $AWS        ec2 describe-vpcs           --query "Vpcs[*].[VpcId,CidrBlock]"
     VPCID=`$AWS   ec2 create-vpc              --cidr-block 10.0.0.0/16 --query "Vpc.VpcId"`
     SUBNET1=`$AWS ec2 create-subnet           --vpc-id $VPCID --cidr-block 10.0.0.0/24 --availability-zone us-east-1a --query "Subnet.SubnetId"`
     SUBNET2=`$AWS ec2 create-subnet           --vpc-id $VPCID --cidr-block 10.0.1.0/24 --availability-zone us-east-1a --query "Subnet.SubnetId"`
     IGWID=`$AWS   ec2 create-internet-gateway --query "InternetGateway.InternetGatewayId"`
     $AWS          ec2 attach-internet-gateway --vpc-id $VPCID --internet-gateway-id $IGWID > $Tmp
     THIS=`$AWS    ec2 create-route-table      --vpc-id $VPCID --query "RouteTable.RouteTableId"`
     $AWS          ec2 create-route            --route-table-id $THIS --destination-cidr-block 0.0.0.0/0 --gateway-id $IGWID > $Tmp
     ASSID=`$AWS   ec2 associate-route-table   --subnet-id $SUBNET1 --route-table-id $THIS --query "AssociationId"`
     $AWS          ec2 modify-subnet-attribute --subnet-id $SUBNET1 --map-public-ip-on-launch > $Tmp
     SGID=`$AWS    ec2 create-security-group   --group-name SSHAccess --description "SG for SSH access" --vpc-id $VPCID --query "GroupId"`
     $AWSJ         ec2 authorize-security-group-ingress --group-id $SGID --protocol tcp --port 22 --cidr $MYCIDR > $Tmp
     print "My CIDR     "$MYCIDR
     print "VPC ID      "$VPCID
     print "SUBNET1     "$SUBNET1
     print "SUBNET2     "$SUBNET2
     print "SGID        "$SGID
     putconfig "LASTVPCID"   "$VPCID"
     putconfig "LASTSUBNET1" "$SUBNET1"
     putconfig "LASTSUBNET2" "$SUBNET2"
     putconfig "LASTSGID"    "$SGID"
     THIS=""
     NOTHING=0
fi

COMMANDPROC "WWEC2" "Another form of describe instances" "-a"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     LIST=`aws ec2 describe-regions --query "Regions[*].RegionName" --output text`
     for ITEM in $LIST; do
          aws --profile $ACCOUNT  --region $ITEM ec2 describe-instances --query "Reservations[*].Instances[*].
               {ST: State.Name, ID:InstanceId, TY: InstanceType}" --output text | gawk -v r=$ITEM '{print r,$0;}'
     done

fi
# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: POLICY Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "POLICYP1-ADD,P1A" "Attach policy P1 to user" "-a -u -t"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$USERNAME" "Username not specified"
     policyATTACH $THISPOLICY
fi
COMMANDPROC "POLICYP2-ADD,P2A" "Attach policy P2 to user" "-a -u -t"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$USERNAME" "Username not specified"
     policyATTACH $P2
fi
COMMANDPROC "POLICYP3-ADD,P3A" "Attach policy P3 to user" "-a -u -t"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$USERNAME" "Username not specified"
     policyATTACH $P3
fi
COMMANDPROC "POLICYP4-ADD,P4A" "Attach policy P4 to user" "-a -u -t"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$USERNAME" "Username not specified"
     policyATTACH $P4
fi
COMMANDPROC "POLICYP5-ADD,P5A" "Attach policy P5 to user" "-a -u -t"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$USERNAME" "Username not specified"
     policyATTACH $P5
fi
COMMANDPROC "POLICYP1-REMOVE,P1R" "Remove policy P1 to user" "-a -u -t"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$USERNAME" "Username not specified"
     policyREMOVE $P1
fi
COMMANDPROC "POLICYP2-REMOVE,P2R" "Remove policy P2 to user" "-a -u -t"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$USERNAME" "Username not specified"
     policyREMOVE $P2
fi
COMMANDPROC "POLICYP3-REMOVE.P3R" "Remove policy P3 to user" "-a -u -t"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$USERNAME" "Username not specified"
     policyREMOVE $P3
fi
COMMANDPROC "POLICYP4-REMOVE,P4R" "Remove policy P4 to user" "-a -u -t"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$USERNAME" "Username not specified"
     policyREMOVE $P4
fi
COMMANDPROC "POLICYP5-REMOVE,P5R" "Remove policy P5 to user" "-a -u -t"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$USERNAME" "Username not specified"
     policyREMOVE $P5
fi
COMMANDPROC "POLICYBYARN-REMOVE" "Detach policy from user by ARN" "-a -u -t"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandUSERNAMEandTHING "Policy-ARN"
     policyREMOVE $THING
fi
COMMANDPROC "POLICYBYARN-ADD" "Attach policy to user by ARN" "-a -u -t"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandUSERNAMEandTHING "Policy-ARN"
     policyATTACH $THING
fi
COMMANDPROC "POLICYBYNAME-REMOVE" "Detach local policy from user by policy name" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandTHING "Policy-Name"
     ACCT=`aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"`
     policyREMOVE "arn:aws:iam::"$ACCT":policy/"$THING
     ACCT=""
fi
COMMANDPROC "POLICYBYNAME-ADD" "Attach local policy to user by policy name" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandTHING "Policy-Name"
     ACCT=`aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"`
     policyATTACH "arn:aws:iam::"$ACCT":policy/"$THING
     ACCT=""
fi
COMMANDPROC "POLICYCREATE" "Create policy bu name and upload policy document this.json" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandTHING "Policy-Name"
     confirm
     aws --profile $ACCOUNT iam create-policy --policy-name $THING --policy-document file://this.json
     THIS=""
fi
COMMANDPROC "POLICYDELETE" "Delete local policy ARN" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandTHING "Policy-Name"
     confirm
     THIS=`aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"`
     aws --profile $ACCOUNT iam delete-policy --policy-arn "arn:aws:iam::"$THIS":policy/"$THING
     THIS=""
fi
COMMANDPROC "POLICYLISTUSER,LISTUSERPOLICIES" "List policies atttached to user" "-a -u" "v1.0"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandUSERNAME
     aws --profile $ACCOUNT iam list-attached-user-policies --user-name $USERNAME --query "AttachedPolicies[*].[PolicyName,PolicyArn]" --output text
fi
COMMANDPROC "POLICYDETACH" "Detach policy from user" "-a [-r] -u -t arn" "v1.0"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandUSERNAME
     confirm
     aws --profile $ACCOUNT iam detach-user-policy --user-name $USERNAME --policy-arn $THING 
fi
COMMANDPROC "POLICYUSERDETACHALL,DETACHUSERPOLICIES" "Detach all policies from user" "-a -u" "v1.0"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandUSERNAME
     confirm
     aws --profile $ACCOUNT iam list-attached-user-policies --user-name $USERNAME | gawk -v A=$ACCOUNT -v U=$USERNAME ' {
          sz = "aws --profile " A " iam detach-user-policy --user-name " U " --policy-arn " $2
          system(sz)
     }'
fi
COMMANDPROC "POLICYATTACHTOALLUSERS,ATTACHPOLICYTOALLUSERS" "Attach policy to all users" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandTHING "Policy-ARN"
     buildUSERLIST $ACCOUNT
     for USER in $USERLIST; do
          policyATTACH $THING
     done
     USERLIST=""
fi
COMMANDPROC "POLICYATTACHTOUSER,ATTACHPOLICYTOUSER" "Attach policy to user" "-a -u"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandUSERNAME
     assert "$THING" "Thing not specified"
     policyATTACH $THING
fi
COMMANDPROC "POLICYGET,GETPOLICY" "Get policy" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$THING"    "Policy not specified"
     LIST=`$AWS iam list-policies --scope All --query "Policies[*].[join(',',[PolicyName,Arn,DefaultVersionId])]" |grep $THING |tee $Tmp`
     cat $Tmp
fi
COMMANDPROC "POLICYUPDATE,UPDATEPOLICY" "Update policy" "-a -t -D"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$THING"    "Policy not specified"
     asserte "$DOCUMENT" "Document not specified"
     THIS=`aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"`
     ARN="arn:aws:iam::"$THIS":policy/"$THING
     LIST=`aws --profile $ACCOUNT iam list-policy-versions --output text --policy-arn $ARN --query "Versions[*].[VersionId]" |gawk -f skipfirst.awk`
     for ITEM in $LIST; do
          aws --profile $ACCOUNT iam delete-policy-version --policy-arn $ARN --version-id $ITEM
     done
     gawk -v A=$THIS -f thisaccount.awk $DOCUMENT > $Tmp
     aws --profile $ACCOUNT iam create-policy-version  --policy-arn $ARN --policy-document file://$Tmp --set-as-default
     aws --profile $ACCOUNT iam list-policy-versions --output text --policy-arn $ARN --query "Versions[*].[VersionId,CreateDate,IsDefaultVersion]" 
     THIS=""
     ARN=""
fi
COMMANDPROC "GAPP" "Get all policy documents"; if [ $bCmd -gt 0 ] ; then
          $AWS--profile $ACCOUNT iam list-policies  --output text
fi
COMMANDPROC "POLICYGETALL,GETALLPOLICIES,GAP" "Get all policy documents"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     if [ "$THING" == "" ] ; then
          LIST=`aws --profile $ACCOUNT iam list-policies --scope All --output text --query "Policies[*].[join(',',[PolicyName,Arn,DefaultVersionId])]" | tee $Tmp`
     else 
          LIST=`aws --profile $ACCOUNT iam list-policies --scope All --output text --query "Policies[*].[join(',',[PolicyName,Arn,DefaultVersionId])]" |egrep $THING |tee $Tmp`
     fi
     CT=`cat $Tmp | wc -l`
     confirmprompt $CT" Policy Document(s) will be retrieved"
     mkdir -p ./policies
     for ITEM in $LIST; do
          gNAME=`print "$ITEM" | gawk -F, '{print $1}'`
          gVER=`print "$ITEM" | gawk -F, '{print $3}'`
          gFILE="./policies/"$ACCOUNT"___"$gNAME"___"$gVER
          gARN=`print "$ITEM" | gawk -F, '{print $2}'`
          gARNFILE=`print "$ITEM" | gawk -F, '{gsub(/[/]/,"::::",$2);print "./policies/"$2}'`
          print "\nUpdate with:"
          print "cuu -a "$ACCOUNT" -c updatepolicy  -t "$gARN"   -D <file>"
          print $gARNFILE
          print "this.json"
          aws --profile $ACCOUNT --output json iam get-policy-version --policy-arn $gARN --version-id $gVER | jq .[].Document.Statement > $gARNFILE
          cp $gARNFILE this.json
     done
fi
COMMANDPROC "POLICYGETDOCUMENT" "Get policy document"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$THING"    "Policy"
     THIS=`aws --profile $ACCOUNT iam list-policies --scope All --output text --query "Policies[*].[join(',',[PolicyName,Arn,DefaultVersionId])]" |egrep $THING | gawk -F, '{print $3}'`
#      aws --profile $ACCOUNT --output json iam get-policy-version --policy-arn $THING --version-id $gVER | jq .[].Document.Statement > $gARNFILE
     aws --profile $ACCOUNT --output json iam get-policy-version --policy-arn $THING --version-id $THIS | jq .[].Document.Statement
fi
COMMANDPROC "POLICYGETLOCAL,GETLOCALPOLICIES,GLP" "Get local policy documents"; if [ $bCmd -gt 0 ] ; then
          assert "$ACCOUNT"  "Profile not specified"
          if [ "$THING" == "" ] ; then
               LIST=`aws --profile $ACCOUNT iam list-policies --scope Local --output text --query "Policies[*].[join(',',[PolicyName,Arn,DefaultVersionId])]" |tee $Tmp`
          else 
               LIST=`aws --profile $ACCOUNT iam list-policies --scope Local --output text --query "Policies[*].[join(',',[PolicyName,Arn,DefaultVersionId])]" |egrep $THING |tee $Tmp`
          fi
          CT=`cat $Tmp | wc -l`
          confirmprompt $CT" Policy Document(s) will be retrieved"
          mkdir -p ./policies
          mkdir -p ./rawpolicies
          for ITEM in $LIST; do
               gNAME=`print "$ITEM" | gawk -F, '{print $1}'`
               gVER=`print "$ITEM" | gawk -F, '{print $3}'`
               gARN=`print "$ITEM" | gawk -F, '{print $2}'`
               gARNFILE=`print "$ITEM" | gawk -F, '{gsub(/[/]/,"::::",$2);print "policies/"$2}'`
               print "\nUpdate with:"
               print "cuu -c updatepolicy -t "$gNAME" -D <filename> -a "$ACCOUNT
               print $gARNFILE
               print $gARN
               print "this.json"
               aws --profile $ACCOUNT --output json iam get-policy-version --policy-arn $gARN --version-id $gVER  > $gARNFILE
               cp $gARNFILE this.json
          done
fi
COMMANDPROC "POLICYLISTALL,LISTALLPOLICIES,POLICYLS" "List all policies" "-a" "v1.0"; if [ $bCmd -gt 0 ] ; then
          assert "$ACCOUNT" "Profile not specified"
          clean
          for ITEM in $ACCOUNT; do
               aws --profile $ITEM --output text iam list-policies --scope All --query "Policies[*].[Arn]" | sort
          done
fi
COMMANDPROC "POLICYLISTLOCAL,LISTLOCALPOLICIES" "List local policies" "-a" "v1.0"; if [ $bCmd -gt 0 ] ; then
          assert "$ACCOUNT" "Profile not specified"
          clean
          for ITEM in $ACCOUNT; do
              aws --profile $ITEM --output text iam list-policies --scope Local --query "Policies[*].[PolicyName,UpdateDate,DefaultVersionId,Arn]" | column -t
          done
fi
COMMANDPROC "POLICYLISTAWS,LISTAWSPOLICIES" "List all AWS policies" "-a" "v1.0"; if [ $bCmd -gt 0 ] ; then
          assert "$ACCOUNT" "Profile not specified"
          clean
          for ITEM in $ACCOUNT; do
               aws --profile $ITEM --output text iam list-policies --scope AWS --query "Policies[*].[PolicyName,UpdateDate,DefaultVersionId,Arn]" | column -t
          done
fi
COMMANDPROC "POLICYSETATTACH,ATTACHPOLICYSET" "Attach all policies specified in policyset.txt to user" "-a -u"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAME
          policysetATTACH
fi
COMMANDPROC "POLICYSETREMOVE,REMOVEPOLICYSET" "Remove all policies specified in policyset.txt from user" "-a -u"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAME
          policysetREMOVE
fi

# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: KEY PAIR Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "KEYPAIRCREATE,CREATEKEYPAIR" "Create a set of keypairs" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$THING"    "Key Name not specified"
     $AWS ec2 create-key-pair --key-name $THING --query 'KeyMaterial' > $THING.pem
     chmod 400 $THING.pem
fi

# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: ACCESS KEY Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "ACCESSKEYREPLACE,REPLACEACCESSKEYS" "Delete and replace access keys"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAME
          confirm
          wipeACCESSKEYS
          aws --profile $ACCOUNT --output text iam create-access-key --user-name $USERNAME > $Tmp
          aws --profile $ACCOUNT --output text iam list-access-keys --user-name $USERNAME
          cat $Tmp | gawk -v A=$ACCOUNT -v U=$USERNAME ' @include "cuu.awk"; {print configrecord($0,A,U,A);}'
fi
COMMANDPROC "ACCESSKEYCREATE,CREATEACCESSKEY" "Create access keys for user"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAME
          aws --profile $ACCOUNT --output text iam create-access-key --user-name $USERNAME > $Tmp
          aws --profile $ACCOUNT --output text iam list-access-keys --user-name $USERNAME
          cat $Tmp | gawk -v A=$ACCOUNT -v U=$USERNAME ' @include "cuu.awk"; {print configrecord($0,A,U);}'
fi
COMMANDPROC "ACCESSKEYSLS,ACCESSKEYLIST,LISTACCESSKEYS" "List a users access keys"; if [ $bCmd -gt 0 ] ; then
          assert "$ACCOUNT" "Profile not specified"
          USERLIST=`aws --profile $ACCOUNT iam list-users --query "Users[*].[UserName]" --output text`

          for USER in $USERLIST; do
              print $USER
               AK=`aws --profile $ACCOUNT --output text iam list-access-keys --query "AccessKeyMetadata[*].AccessKeyId" --user-name $USER`
               if [ "$AK" == "" ] ; then
                   AK=NONE
                   LU=NA
               else
                   LU=`aws --profile $ACCOUNT --output text iam get-access-key-last-used --access-key-id $AK --query="AccessKeyLastUsed.LastUsedDate"`
               fi
               print $USER | gawk -v U=$USER -v K=$AK -v L="$LU"  'END {print U, K, L}'

#           aws iam get-access-key-last-used --access-key-id ABCDEXAMPLE
#           AccessKeyMetadata[*].CreateDate
          done
          USERLIST=""
fi
COMMANDPROC "ACCESSKEYSDELETE,ACCESSKEYCLEAR,DELETEACCESSKEYS" "Delete all access keys attached to user"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAME
          confirm
          wipeACCESSKEYS
fi
# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: USER Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "POLICYATTACHADMIN,ADMINACCESS" "Attach admin policy to user" "-a -u" "v1.0"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAME
          policyATTACH arn:aws:iam::aws:policy/AdministratorAccess
fi
COMMANDPROC "POLICYATTACHREADONLY,READONLYACCESS" "Attach readonly policy to user" "-a -u" "v1.0"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAME
          policyATTACH arn:aws:iam::aws:policy/ReadOnlyAccess
fi
COMMANDPROC "USERCREATEADMIN,CREATEADMINUSER" "Create admin user" "-a [-r] -u -p [-t <g>]" "v1.1"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAMEandPASSWORD
          createUSER
          policyATTACH arn:aws:iam::aws:policy/AdministratorAccess
          optionalGROUPADD
fi
COMMANDPROC "USERCREATEREADONLY,CREATEREADONLYUSER" "Create readonly user" "-a [-r] -u -p [-t <g>]" "v1.1"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAMEandPASSWORD
          createUSER
          policyATTACH arn:aws:iam::aws:policy/ReadOnlyAccess
          optionalGROUPADD
fi
COMMANDPROC "USERCREATENOKEY,CREATEUSERNOKEY" "Create user with no access keys" "-a [-r] -u -p [-t <g>]" "v1.1"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAMEandPASSWORD
          createUSER
          optionalGROUPADD
fi
COMMANDPROC "USERCREATE,CREATEUSER" "Create a user and assign access keys" "-a [-r] -u -p [-t <g>]" "v1.1"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAMEandPASSWORD
          createUSER
          optionalGROUPADD
          createACCESSKEY
fi
COMMANDPROC "USERCREATEDEFAULT,CREATEDEFAULTUSER,CDU" "Create a user with default settings" "-a -u" "v1.5"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAME
          THISACCT=`aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"`
          assertgroupexists  $G1
          assertgroupexists  $G2
          assertgroupexists  $G3
          assertgroupexists  $G4
          assertgroupexists  $G5
          assertpolicyexists  $P1
          assertpolicyexists  $P2
          assertpolicyexists  $P3
          assertpolicyexists  $P4
          assertpolicyexists  $P5
          confirm
          createUSER
          groupassert  $G1
          groupassert  $G2
          groupassert  $G3
          groupassert  $G4
          groupassert  $G5
          policyassert $P1
          policyassert $P2
          policyassert $P3
          policyassert $P4
          policyassert $P5
          cuu -a $ACCOUNT -c du -u $USERNAME
fi

COMMANDPROC "RDSLIMITS" "List RDS Limits" "-a -u -p"; if [ $bCmd -gt 0 ] ; then
       buildPROFILELIST
       clean
       for ACC in $PROFILELIST; do
            aws --profile $ACC rds describe-account-attributes |  gawk -v A=$ACC '{print A,"RDS",$2,$3,$4}' >> $Tmp2
       done
       cat $Tmp2 | column -t | sort -k 3,3 -k 1,1 > $Tmp
       cat $Tmp
       # echo "$Tmp"  | mailx -q $Tmp -r $NOTIFYFROM -s "$0"  $NOTIFYFROM
fi

COMMANDPROC "RDSLIST,RDSLS" "List RDS Instances" "-a -t (grep)"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     datestampCUUOUT
     buildPROFILELIST
     buildREGIONLIST
     clean
     for ACC in $PROFILELIST; do
          for REG in $REGIONLIST; do
               print "RDS-Listing "$ACC" "$REG | tee -a /tmp/cuu.out
               aws --profile $ACC --region $REG rds describe-db-instances --query 'DBInstances[*].[AvailabilityZone,
                                                                                                   DBInstanceClass,
                                                                                                   Engine,
                                                                                                   InstanceCreateTime,
                                                                                                   DBName,
                                                                                                   AllocatedStorage,
                                                                                                   DBInstanceStatus,
                                                                                         DBInstanceIdentifier]' | sort -k 7,7 -k 8,8 | gawk -v A=$ACC -v B=$REG -f noindent.awk > $Tmp
              if [ "$THING" == "" ] ; then
               cat $Tmp | tee -a /tmp/cuu.out
              else
               cat $Tmp | grep -i "$THING" | tee -a /tmp/cuu.out
              fi
          done
     done
fi
COMMANDPROC "LOGINPROFILECREATE" "Create Login Profile" "-a -u -p"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAMEandPASSWORD
          confirm
          createLOGINPROFILE
fi

COMMANDPROC "PASSWORDFIXED,FIXED" "Change a users password (fixed)" "-a -u -p"; if [ $bCmd -gt 0 ] ; then
          confirm
          aws --profile $ACCOUNT iam update-login-profile --user-name $USERNAME --password $FIXEDWORD 
fi
COMMANDPROC "PASSWORDRESET,RESET,PASSWORD" "Reset useir password to a random password" "-a -u" "v1.1"; if [ $bCmd -gt 0 ] ; then
          PASSWORD=`LC_ALL=C tr -dc 'ABCDEFGHJKMNPQRSTUVWXYZabcdefghjkmnpqrstuvwxyz023456789!' </dev/urandom | head -c 9 ; echo`
          cat /dev/urandom |tr -dc "ABCDEFGHKMNPQRSTUVWXYZ" | fold -w 2 | head -1  > $Tmp
          cat /dev/urandom |tr -dc "abcdefghkmnpqrstuvwxyz" | fold -w 2 | head -1 >> $Tmp
          cat /dev/urandom |tr -dc "23456789" | fold -w 2 | head -1 >> $Tmp
          cat /dev/urandom |tr -dc "ABCDEFGHJKLMNPQRSTUVWXYZ" | fold -w 2 | head -1 >> $Tmp
          cat /dev/urandom |tr -dc "23456789" | fold -w 2 | head -1 >> $Tmp
          PASSWORD=`cat $Tmp |gawk '{sz=sz $1} END {print sz "!!"}'`
          cat /dev/urandom |tr -dc "ABCDEFGHKMNPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" | fold -w 2000 | head -1  > $Tmp
          cat /dev/urandom |tr -dc "ABCDEFGHKMNPQRSTUVWXYZ" | fold -w 4096 | head -1  > $Tmp
          cat /dev/urandom |tr -dc "ABCDEFGHKMNPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" | fold -w 2000 | head -1  > $Tmp
          cat /dev/urandom |tr -dc "ABCDEFGHKMNPQRSTUVWXYZ" | fold -w 4096 | head -1  > $Tmp
          rm -rf $Tmp >/dev/null 2>&1
          assertACCOUNTandUSERNAME
          print $USERNAME
          print $PASSWORD
          confirm
          aws --profile $ACCOUNT iam update-login-profile --user-name $USERNAME --password $PASSWORD
fi
COMMANDPROC "RESETX" "Reset a users password" "-a -u -p"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAME
          confirm
          RAN=`cat $Tmp |gawk '{sz=sz $1} END {print sz "!!"}'`
          cat /dev/urandom |tr -dc "ABCDEFGHKMNPQRSTUVWXYZ" | fold -w 2 | head -1  > $Tmp
          cat /dev/urandom |tr -dc "abcdefghkmnpqrstuvwxyz" | fold -w 2 | head -1 >> $Tmp
          cat /dev/urandom |tr -dc "23456789" | fold -w 2 | head -1 >> $Tmp
          cat /dev/urandom |tr -dc "!" | fold -w 2 | head -1 >> $Tmp
          cat /dev/urandom |tr -dc "ABCDEFGHJKLMNPQRSTUVWXYZ" | fold -w 2 | head -1 >> $Tmp
          cat /dev/urandom |tr -dc "23456789" | fold -w 2 | head -1 >> $Tmp
          rm -rf $Tmp
          print $USERNAME
          print $RAN
          aws --profile $ACCOUNT iam create-login-profile --user-name $USERNAME --password $RAN  --password-reset-required
          #aws --profile $ACCOUNT iam update-login-profile --user-name $USERNAME --password $RAN  --password-reset-required
fi
COMMANDPROC "PASSWORDCHANGE,CHANGEPASSWORD" "Change a users password (given pword)" "-a -u -p" "v1.5"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAMEandPASSWORD
          confirm
          print $USERNAME
          print $PASSWORD
          aws --profile $ACCOUNT iam update-login-profile --user-name $USERNAME --password $PASSWORD  --password-reset-required
fi
COMMANDPROC "UNSCRAMPROFILECREATE" "Change a users password, profile create" "-a -u -p"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAMEandPASSWORD
          confirm
          print $USERNAME
          print $PASSWORD
          aws --profile $ACCOUNT iam create-login-profile --user-name $USERNAME --password $PASSWORD  --password-reset-required
fi


COMMANDPROC "PASSWORDCHANGEHARD,CHANGEPASSWORDHARD" "Change a users password" "-a -u -p"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAMEandPASSWORD
          confirm
          aws --profile $ACCOUNT iam update-login-profile --user-name $USERNAME --password $PASSWORD
fi
COMMANDPROC "PASSWORDSCRAM,SCRAMPASSWORD,SCRAM" "Make a users password unknown" "-a -u" "v1.5"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAME
          RAN=`tr -cd \#_[:alnum:] < /dev/urandom |  fold -w 18 | head -1 |gawk '{print $0 "!!"}'`
          confirm
          wipeSERVICESPECIFICCREDENTIALS
          wipeSSHPUBLICKEYS
          wipeACCESSKEYS
          aws --profile $ACCOUNT iam update-login-profile --user-name $USERNAME --password $RAN
fi
COMMANDPROC "SCRAMSET" "Scram a set of users" "-a -u"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNT
          cat userlist 
          confirm
          cat userlist | while read USERNAME; do
               print $USERNAME
               RAN=`tr -cd \#_[:alnum:] < /dev/urandom |  fold -w 18 | head -1 |gawk '{print $0 "AAbb123!!"}'`
               wipeSERVICESPECIFICCREDENTIALS
               wipeSSHPUBLICKEYS
               wipeACCESSKEYS
               print $RAN
               aws --profile $ACCOUNT iam update-login-profile --user-name $USERNAME --password $RAN
               print $USERNAME" SCRAMMED"
               cuu -a $ACCOUNT -c du -u $USERNAME
          done
fi



COMMANDPROC "PASSWORDSCRAMSET,SCRAMPASSWORDSET" "Make fileset of user password unkown (scram)" "-a -u"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAME
          cat fileset | while read ITEM; do
               RAN=`tr -cd \#_[:alnum:] < /dev/urandom |  fold -w 18 | head -1 |gawk '{print $0 "AAbb123!!"}'`
               print $ITEM
               print $RAN
               aws --profile $ACCOUNT iam update-login-profile --user-name $ITEM --password $RAN
          done
fi

COMMANDPROC "USERDELETELIST" "Delete list of users" "-a -u"; if [ $bCmd -gt 0 ] ; then
          cat userlist | while read USERNAME; do
               print $USERNAME
          done
          confirm
          FORCE="yes"
          cat userlist | while read USERNAME; do
               print $USERNAME
               RAN=`tr -cd \#_[:alnum:] < /dev/urandom |  fold -w 18 | head -1 |gawk '{print $0 "!!"}'`
               aws --profile $ACCOUNT iam update-login-profile --user-name $USERNAME --password $RAN
               print "Password Scrammed"
               wipeSERVICESPECIFICCREDENTIALS
               wipeSSHPUBLICKEYS
               wipeUSER
               deleteUSER
           done
          FORCE="no"
fi
COMMANDPROC "USERDELETE,DELETEUSER" "Delete user" "-a -u" "v1.0"; if [ $bCmd -gt 0 ] ; then
          assertACCOUNTandUSERNAME
          RAN=`tr -cd \#_[:alnum:] < /dev/urandom |  fold -w 18 | head -1 |gawk '{print $0 "!!"}'`
          aws --profile $ACCOUNT iam update-login-profile --user-name $USERNAME --password $RAN
          print "Password Scrammed"
          wipeSERVICESPECIFICCREDENTIALS
          wipeSSHPUBLICKEYS
          wipeUSER
          deleteUSER
fi
COMMANDPROC "USERLSJSON,USERLISTJSON,LUJ" "List users (json format)" "-a" "v1.1"; if [ $bCmd -gt 0 ] ; then
          buildPROFILELIST
          clean
          for ITEM in $PROFILELIST; do
               aws --output json --profile $ITEM iam list-users  
          done
fi
COMMANDPROC "USERLS,USERLIST,LISTUSERS,LU" "User listing" "-a" "v2.0"; if [ $bCmd -gt 0 ] ; then
          buildPROFILELIST
          clean
          for ITEM in $PROFILELIST; do
               aws --profile $ITEM iam list-users --query "Users[*].[UserName,CreateDate,PasswordLastUsed,Arn]" | gawk -v A=$ITEM -f noindent.awk >> $Tmp
          done
          cat $Tmp | column -t
fi
COMMANDPROC "USERLSS,LUS" "User listing in simple format" "-a" "v2.0"; if [ $bCmd -gt 0 ] ; then
          buildPROFILELIST
          clean
          for ITEM in $PROFILELIST; do
               aws --profile $ITEM iam list-users --query "Users[*].[UserName]" >> $Tmp
          done
          cat $Tmp
fi
COMMANDPROC "USERLS-JSON,USERLIST-JSON,LISTUSERS-JSON" "User list in json format" "-a"; if [ $bCmd -gt 0 ] ; then
          buildPROFILELIST
          clean
          for ITEM in $PROFILELIST; do
               aws --profile $ITEM iam list-users --query "Users[*].[Arn]" >> $Tmp
          done
          cat $Tmp | gawk '
          BEGIN {print "[";c="";} { printf "%s", c "\"" $0 "\"";c=",\n"; } END {print "\n]"}'
fi
COMMANDPROC "USERMENU" "Menu driven user information" "-a"; if [ $bCmd -gt 0 ] ; then
          assert "$ACCOUNT" "Profile not specified"
          buildUSERLIST  $ACCOUNT
          clean
          print "PS3='Pick user, enter choice:'" > $Tmp
          print -n "select clean_menu in " >> $Tmp
          for USER in $USERLIST; do
               print -n "\""$USER"\" " >> $Tmp
          done
          print "\"Exit\"" >> $Tmp
          print "do" >> $Tmp
          print "case \$clean_menu in" >> $Tmp
          for USER in $USERLIST; do
               print "\""$USER"\")" >> $Tmp
               print "cuu -a "$ACCOUNT" -c du -u "$USER";;" >> $Tmp
          done
          print "\"Exit\") break;;" >> $Tmp
          print "esac" >> $Tmp
          print "done" >> $Tmp
          chmod 777 $Tmp
          $Tmp
fi
COMMANDPROC "USERDESCRIBE,DESCRIBEUSERS,DU" "List groups & policies a/w user or userlist" "-a -u" "v2.5"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     clean
     for ITEM in $ACCOUNT; do
          buildUSERLIST $ITEM
          for USER in $USERLIST; do
           print $ITEM $USER |tee -a cuu.out
           GROUPLIST=`aws --profile $ITEM iam list-groups-for-user  --output text --user-name $USER --query "Groups[*].[GroupName]"`
           aws --profile $ITEM iam list-groups-for-user        --user-name $USER --query "Groups[*].{ARN:Arn}" |
                                   gawk -v A=$USER -v B=$ITEM -v C="GRP" -f indent.awk |tee -a cuu.out
           for G in $GROUPLIST; do
                aws --profile $ITEM iam list-attached-group-policies --group-name $G --query "AttachedPolicies[*].{ARN:PolicyArn}" |
                                        gawk -v A=$USER -v B=$ITEM -v C="GPO" -f indent.awk |tee -a cuu.out 
           done
           aws --profile $ITEM iam list-attached-user-policies --user-name $USER --query "AttachedPolicies[*].{ARN:PolicyArn}" |
                                   gawk -v A=$USER -v B=$ITEM -v C="UPO" -f indent.awk |tee -a cuu.out 
           aws --profile $ITEM iam list-access-keys            --user-name $USER --query "AccessKeyMetadata[*].[AccessKeyId]"  |
                                   gawk -v A=$USER -v B=$ITEM -v C="KEY" -f indent.awk |tee -a cuu.out

           aws --output text  --profile $ITEM iam list-mfa-devices            --user-name $USER --query "MFADevices[*].[SerialNumber]"
           # --query "MFADevices[*].[SerialNumber]"  | gawk -v A=$USER -v B=$ITEM -v C="KEY" -f indent.awk |tee -a cuu.out
           done 
     done 
fi

# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: ROLE Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "ROLELS,ROLESLIST,LISTROLES" "List Roles" "-a" "v1.1"; if [ $bCmd -gt 0 ] ; then
               buildPROFILELIST
               clean
               for ITEM in $PROFILELIST; do
                    aws --profile $ITEM iam list-roles --query "Roles[*].[Arn]" | gawk -v A=$ITEM -f noindent.awk >> $Tmp
               done
               cat $Tmp | column -t
fi
# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: DDB Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "DDBCREATETABLE" "Create a DynamoDB table" "-a -t <table>" "v1.0"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     assert "$THING"   "Table not specified"
     $AWS dynamodb create-table --table-name $THING \
                                --attribute-definitions  AttributeName=Artist,AttributeType=S \
                                                         AttributeName=SongTitle,AttributeType=S \
                                --key-schema             AttributeName=Artist,KeyType=HASH \
                                                         AttributeName=SongTitle,KeyType=RANGE \
                                --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
fi

COMMANDPROC "DDBCREATENAMEVALUETABLE" "Create a Name-Value DynamoDB table" "-a -t"; if [ $bCmd -gt 0 ] ; then
#                                                          AttributeName=Value,KeyType=RANGE \
#                                                          AttributeName=Value,AttributeType=S \
     assert "$ACCOUNT" "Profile not specified"
     assert "$THING"   "Table not specified"
     $AWS dynamodb create-table --table-name $THING \
                                --attribute-definitions  AttributeName=Name,AttributeType=S \
                                --key-schema             AttributeName=Name,KeyType=HASH \
                                --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
fi
COMMANDPROC "DDBLS,DDBLIST" "List DynamoDB tables" "-a -t" "v1.0"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     $AWS dynamodb list-tables
fi
COMMANDPROC "DDBDELETETABLE" "Delete DynamoDB table" "-a -t" "v1.0"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     assert "$THING"   "Table not specified"
     $AWS dynamodb delete-table --table-name $THING 
fi
COMMANDPROC "DDBPUTNAMEVALUE" "Put iteminto Name-Value DynamoDB table" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     assert "$THING"   "Table not specified"
     $AWS dynamodb put-item --table-name $THING --item '{"Name": {"S": "Indie Band"},"Value": {"S": "Obscure"}}'
#     $AWS dynamodb put-item --table-name $THING --item '{"Name": {"S": $LRAN1},"Value": {"S": $LRAN2}}'
fi
COMMANDPROC "DDBGETNAMEVALUE" "Get iteminto Name-Value DynamoDB table" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     assert "$THING"   "Table not specified"
     $AWS dynamodb get-item --table-name $THING --key '{"Name": {"S": "Indie Band"},"Value": {"S": "Obscure"}}'
fi
COMMANDPROC "DDBQUERYNAMEVALUE" "Query Name-Value DynamoDB table" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     assert "$THING"   "Table not specified"
     $AWS dynamodb query --table-name $THING
fi
# --condition-expression "attribute_not_exists(Artist)"


# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: GROUP Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "GROUPLS,GROUPLIST,LISTGROUPS" "List groups in profile" "-a" "v1.0"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               clean
               for ITEM in $ACCOUNT; do
                    aws --profile $ACCOUNT iam list-groups --query "Groups[*].[GroupName,CreateDate,Arn]" >> $Tmp
               done
               cat $Tmp | gawk -v A=$ITEM -f noindent.awk | column -t
fi
COMMANDPROC "GROUPCREATE" "Create group in profile" "-a -t"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               assert "$THING"   "Group not specified"
               clean
               $AWS iam create-group --group-name $THING
               $AWS iam list-groups  --query "Groups[*].[GroupName,CreateDate,Arn]"
fi
COMMANDPROC "GROUPDELETE" "Delete group from profile by group name" "-a -u -t <g>" "v1.0"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               assert "$THING" "Group not specified"
               $AWS iam delete-group --group-name $THING
fi
COMMANDPROC "GROUPLISTUSERS,LISTUSERSINGROUP" "List users in group"; if [ $bCmd -gt 0 ] ; then
              assertACCOUNTandTHING "Group-Name"
              buildUSERLIST $ACCOUNT
              for USER in $USERLIST; do
                  print $USER
              done
              USERLIST=""
fi
COMMANDPROC "GROUPG1-ADD" "Add usert to group G1" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandUSERNAME
     $AWS iam add-user-to-group --group-name $G1  --user-name $USERNAME
fi
COMMANDPROC "GROUPG2-ADD" "Add usert to group G2" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandUSERNAME
     $AWS iam add-user-to-group --group-name $G2  --user-name $USERNAME
fi
COMMANDPROC "GROUPG3-ADD" "Add usert to group G3" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandUSERNAME
     $AWS iam add-user-to-group --group-name $G3  --user-name $USERNAME
fi
COMMANDPROC "GROUPG4-ADD" "Add usert to group G4" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandUSERNAME
     $AWS iam add-user-to-group --group-name $G4  --user-name $USERNAME
fi
COMMANDPROC "GROUPG5-ADD" "Add usert to group G5" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandUSERNAME
     $AWS iam add-user-to-group --group-name $G5  --user-name $USERNAME
fi
COMMANDPROC "GROUPG1-REMOVE" "Remove user from group G1" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandUSERNAME
     $AWS iam remove-user-from-group --user-name $USERNAME --group-name $G1
fi
COMMANDPROC "GROUPP2-REMOVE" "Remove user from group G2" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandUSERNAME
     $AWS iam remove-user-from-group --user-name $USERNAME --group-name $G2
fi
COMMANDPROC "GROUPP3-REMOVE" "Remove user from group G3" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandUSERNAME
     $AWS iam remove-user-from-group --user-name $USERNAME --group-name $G3
fi
COMMANDPROC "GROUPP4-REMOVE" "Remove user from group G4" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandUSERNAME
     $AWS iam remove-user-from-group --user-name $USERNAME --group-name $G4
fi
COMMANDPROC "GROUPP5-REMOVE" "Remove user from group G5" "-a -t"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandUSERNAME
     $AWS iam remove-user-from-group --user-name $USERNAME --group-name $G5
fi
COMMANDPROC "GROUPADDUSER,GROUPADD" "Add user/userlist to group" "-a -t"; if [ $bCmd -gt 0 ] ; then
              assertACCOUNTandTHING "Group-Name"
              buildUSERLIST $ACCOUNT
              print $USERLIST
              for USER in $USERLIST; do
                   $AWS iam add-user-to-group --group-name $THING  --user-name $USER
                   $AWS iam list-groups-for-user --user-name $USER --query "Groups[*].{ARN:Arn}" | gawk -v A=$USER -v B=$ACCOUNT -v C="GRP" -f noindent.awk
              done
fi
COMMANDPROC "GROUPSFORUSER,LISTUSERGROUPS" "List groups attached to user"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               aws --profile $ACCOUNT iam list-groups-for-user --user-name $USERNAME --query "Groups[*].[GroupName]" --output text
fi
COMMANDPROC "GROUPREMOVEALLUSERS" "Remove all groups atttach to user"; if [ $bCmd -gt 0 ] ; then
    wipeGROUPS
fi
COMMANDPROC "GROUPREMOVEUSER" "Remove user from group by group name"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               assert "$THING" "Group name not specified"
               confirm
               aws --profile $ACCOUNT iam remove-user-from-group --user-name $USERNAME --group-name $THING 
fi
# ----------------------------------------------------
# These commands operate on users
# ----------------------------------------------------

THIS="arn:aws:iam::aws:policy/AWSCodeCommitPowerUser"
COMMANDPROC "POLICYCODECOMMITPOWERUSER-ADD,IAMUSERCODECOMMITPOWERUSER-ADD" "Add "$THIS" to user"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               policyATTACH $THIS
fi
THIS="arn:aws:iam::aws:policy/AWSCodeCommitPowerUser"
COMMANDPROC "POLICYCODECOMMITPOWERUSER-REMOVE,IAMUSERCODECOMMITPOWERUSER-REMOVE" "Remove "$THIS" from user"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               policyREMOVE $THIS
fi
THIS="arn:aws:iam::aws:policy/IAMUserChangePassword"
COMMANDPROC "POLICYUSERCHANGEPASSWORD-ADD,IAMUSERCHANGEPASSWORD-ADD" "Add "$THIS" to user"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               policyATTACH $THIS
fi
THIS="arn:aws:iam::aws:policy/IAMUserChangePassword"
COMMANDPROC "POLICYUSERCHANGEPASSWORD-REMOVE,IAMUSERCHANGEPASSWORD-REMOVE" "Remove "$THIS" from user"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               policyREMOVE $THIS
fi

THIS="arn:aws:iam::aws:policy/AdministratorAccess"
COMMANDPROC "POLICYUSERADMIN-REMOVE,IAMUSERADMIN-REMOVE,NOADMIN" "Remove "$THIS" from user"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               policyREMOVE $THIS
fi

COMMANDPROC "UTILPUBLISHCUUREPORT,PUBLISHCUUREPORT" "Publish cuureport.txt" "-a"; if [ $bCmd -gt 0 ] ; then
     assertfile cuureport.txt
     EPOCHTIME=`date --rfc-3339=seconds |gawk '{print $1 "." $2}'`
     DSTAMP=`date '+%F%H%M%S' | sed 's/-//g'`
     FNAME="cuureport"-$EPOCHTIME".txt"
     print $FNAME
     cat cuureport.txt > $FNAME
     aws --profile $ACCOUNT s3api put-object --bucket $PUBLISHBUCKET --key $FNAME --body $FNAME --content-encoding ISO-8559-6 --content-type text/plain > $Tmp
     aws --profile $ACCOUNT s3 ls s3://$PUBLISHBUCKET --recursive
     java Gpurl $REGION $PUBLISHBUCKET $FNAME 15
fi
COMMANDPROC "UTILPUBLISH,PUBLISH,S3PUBLISH" "Publish Files" "-a"; if [ $bCmd -gt 0 ] ; then
     assert   "$ACCOUNT"  "Profile not specified"
     assert   "$S3BUCKET" "S3 Bucket not specified"
     assert   "$CTYPE"    "Content Type not specified"
     assert   "$DOCUMENT" "Document not specified"
     wildcard "$DOCUMENT"
     print    "Bucket is s3://"$S3BUCKET
     confirm
     if [ "$EXTRA" == "CLEAR" ] ; then
          print "Clearing existing bucket contents"
          confirm
          $AWS  s3 rm s3://$S3BUCKET/ --recursive --exclude "*" --include "*"      >/dev/null 2>&1
     fi
     print "Bucket Cleared"
     print "Copying"
     cuu -a $ACCOUNT -c S3COPY -b $S3BUCKET -D $DOCUMENT -C $CTYPE
     print "Bucket Copied"
     cuu -a $ACCOUNT -c S3HTML -b $S3BUCKET

fi
COMMANDPROC "UTILPUBLISHMORE,PUBLISHMORE,S3PUBLISHMORE" "Publish Files (without clearing bucket)" "-a"; if [ $bCmd -gt 0 ] ; then
     assert   "$ACCOUNT"  "Profile not specified"
     assert   "$S3BUCKET" "S3 Bucket not specified"
     assert   "$CTYPE"    "Content Type not specified"
     assert   "$DOCUMENT" "Document not specified"
     wildcard "$DOCUMENT"
     print    "Bucket is s3://"$S3BUCKET
     confirm
     print "Copying"
     cuu -a $ACCOUNT -c S3COPY -b $S3BUCKET -D $DOCUMENT -C $CTYPE
     print "Bucket Copied"
     cuu -a $ACCOUNT -c S3HTML -b $S3BUCKET

fi
COMMANDPROC "S3PUBLISHCLEAR,PUBLISHCLEAR" "Clear Publish Bucket" "-a -b -k"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$S3BUCKET" "S3 Bucket not specified"
     assert "$CTYPE"    "Content Type not specified"
     print "Bucket is s3://"$S3BUCKET
     aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
     confirm
     $AWS  s3 rm s3://$S3BUCKET/ --recursive --exclude "*" --include "*"
fi

COMMANDPROC "UTILREPO,REPO" "List the cuu repo url"; if [ $bCmd -gt 0 ] ; then
     print "https://github.com/archernar/cuu.git"
fi

COMMANDPROC "UTILSWAP" "Swap a Policy for a Group"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               policyATTACH $POLICYADD
               groupREMOVE $GROUPREMOVE
fi
COMMANDPROC "UTILCONFIG,CONFIG" "Edit Configuration File ~/.cuu.txt"; if [ $bCmd -gt 0 ] ; then
               vi ~/.cuu.txt
fi
COMMANDPROC "UTILDUMPCONFIG,DUMPCONFIG,DUMP" "Dump Configuration File ~/.cuu.txt"; if [ $bCmd -gt 0 ] ; then
               cat ~/.cuu.txt
fi

# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: EC2 Operations
# -----------------------------------------------------------------------------------------------------------------------
# --query 'Reservations[*].Instances[*].[InstanceId,ImageId,Placement.AvailabilityZone,State.Name,InstanceType,PrivateIpAddress,PublicIpAddress,LaunchTime,Tags[?Key==`Name`].Value[]]' \
#      https://serverfault.com/questions/578921/how-would-you-go-about-listing-instances-using-aws-cli-in-certain-vpc-with-the-t
#      tr -d '\n[] "'     Deletes all characters in the set
# 

TAGS="InstanceId,Tags[?Key==\`Name\`].Value[],Tags[?Key==\`CuuTag\`].Value[]"
TAGS="InstanceId,Tags[].Value"
COMMANDPROC "TAGSLS,TAGSLIST" "EC2 List"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     $AWS ec2 describe-instances \
     --query 'Reservations[*].Instances[*].['$TAGS']' \
     --output json | tr -d '\n[] "' | perl -pe 's/[^m]i-/\ni-/g' | tr ',' '\t' |tee ffed | sed -e 's/null/None/g' | grep '^i-' \
                                                                               | gawk -v A=$ACCOUNT -f noindent.awk | column -t
fi

COMMANDPROC "TAGG" "TAGG"; if [ $bCmd -gt 0 ] ; then
    aws --output json  --profile $ACCOUNT ec2 describe-tags --filters "Name=Key"
     # | grep instance | grep "Name" > zedd
     # gawk '{print $2}' zed | while read ITEM; do
#     done
fi



COMMANDPROC "VOLUMESTORAGE,EBS" "Aggregate Volume Size"; if [ $bCmd -gt 0 ] ; then
   assert "$ACCOUNT" "Profile not specified"
   buildPROFILELIST
   buildREGIONLIST
   rm -rf $Tmp
   for ACC in $PROFILELIST; do
   for REG in $REGIONLIST; do
     aws --profile $ACC --region $REG ec2 describe-volumes --query "Volumes[*].{SZ:Size}" >> $Tmp
 done
 done
    gawk '{ct=ct+$1} END {print ct}' $Tmp
fi

COMMANDPROC "SNAPSHOTLS" "List Snapshots"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     buildVOLUMELIST
     for VOL in $VOLUMELIST; do
          SNAP=`echo $VOL | awk '{sub(/vol/,"snap",$0); print $0}'`
          aws --profile $ACCOUNT --output text ec2 describe-snapshots --filters Name=volume-id,Values=$VOL  --query "Snapshots[*].{V:VolumeId,S:SnapshotId,P:Progress,D:Description}" | gawk '{print $4,$3,$2,$1}'
      done
fi
 
COMMANDPROC "VOLUMESNAP,SNAPSHOT" "Snapshot Volumes "; if [ $bCmd -gt 0 ] ; then
   assert "$ACCOUNT" "Profile not specified"
   buildVOLUMELIST
   for VOL in $VOLUMELIST; do
            # print "Snapshot "$VOL
            # ID=`aws --output text --profile ADM ec2 describe-volumes --volume-ids $VOL --query "Volumes[*].VolumeId"`
            # NAME=`aws --output text --profile ADM ec2 describe-volumes --volume-ids $VOL --query "Volumes[*].Tags[?Key=='Name'].Value"`
            IID=`aws --output text --profile $ACCOUNT ec2 describe-volumes --volume-ids $VOL --query "Volumes[*].Attachments[*].InstanceId"`
            IDETAIL=`aws --output text --profile $ACCOUNT ec2 describe-instances --instance-ids $IID --query "Reservations[*].Instances[*].Tags[?Key=='Name'].Value"`
            IDETAIL="\""$IDETAIL"\""
            VOLDETAIL=`aws --output text --profile $ACCOUNT ec2 describe-volumes --volume-ids $VOL --query "Volumes[*].[VolumeId,AvailabilityZone,VolumeType,CreateTime,Attachments[*].InstanceId,Attachments[*].Device,Size,Tags[?Key=='application_id'].Value,Tags[?Key=='Name'].Value]"`
            print $VOLDETAIL
            print $IDETAIL
#             aws --profile $ACCOUNT ec2 create-snapshot --volume-id $VOL --description "$VOLDETAIL" --tag-specifications 'ResourceType=snapshot,Tags=[{Key=snapshotpurpose,Value=AKB}']
   done
#    for VOL in $VOLUMELIST; do
#           SNAP=`echo $VOL | awk '{sub(/vol/,"snap",$0); print $0}'`
#           aws --profile $ACCOUNT --output text ec2 describe-snapshots --filters Name=volume-id,Values=$VOL  --query "Snapshots[*].{V:VolumeId,S:SnapshotId,P:Progress,D:Description}" | gawk '{print $4,$3,$2,$1}'
#    done
fi


COMMANDPROC "VOLUMELS,VOLLS" "Volume List" "-a" "v1.0"; if [ $bCmd -gt 0 ] ; then
   assert "$ACCOUNT" "Profile not specified"
   buildPROFILELIST
   buildREGIONLIST
   for ACC in $PROFILELIST; do
   for REG in $REGIONLIST; do
     # aws --profile $ACC --output json --region $REG ec2 describe-volumes > zzed
     # aws --profile $ACC --region $REG ec2 describe-volumes --query "Volumes[*].[VolumeId,VolumeType,Iops,Size,SnapshotId,Tags[?Key==\`Nami\`]]"
     aws --profile $ACC --region $REG ec2 describe-volumes --query "Volumes[*].[VolumeId,VolumeType,Iops,Size,SnapshotId]"
#             "Encrypted": false, 
#             "VolumeType": "gp2", 
#             "VolumeId": "vol-0b454f04a3247bdf4", 
#             "State": "in-use", 
#             "Iops": 100, 
#             "SnapshotId": "snap-08fa959d3e8a15334", 
#             "CreateTime": "2018-05-21T03:37:04.123Z", 
#             "Size": 8
 done
 done
fi


COMMANDPROC "EC2RUNNING,RUNNING" "Running EC2 Instances" "-r" "v1.1"; if [ $bCmd -gt 0 ] ; then
     cuu -r US -a $ACCOUNT EC2LS    | grep run
fi
COMMANDPROC "REPORT" "Overall Status Report"; if [ $bCmd -gt 0 ] ; then
     cuu -r GLOBAL -a $ACCOUNT EC2LS    | grep run
     cuu -r GLOBAL -a $ACCOUNT VOLUMELS | grep running
fi
FLDS="InstanceId,ImageId,Placement.AvailabilityZone,State.Name,InstanceType,PrivateIpAddress,PublicIpAddress,LaunchTime,Tags[?Key==\`Name\`].Value[]"
FLDS="InstanceId,Placement.AvailabilityZone,State.Name,InstanceType,PrivateIpAddress,PublicIpAddress,LaunchTime,Tags[?Key==\`Name\`].Value[]"
COMMANDPROC "EC2LS,EC2LIST" "EC2 List"; if [ $bCmd -gt 0 ] ; then
   assert "$ACCOUNT" "Profile not specified"
   datestampCUUOUT
   buildPROFILELIST
   buildREGIONLIST
   verbose $REGION
   for ACC in $PROFILELIST; do
   for REG in $REGIONLIST; do
     verbose $ACC 
     verbose $REG
     # print "EC2-Listing "$ACC" "$REG | tee -a /tmp/cuu.out
     aws --profile $ACC --region $REG ec2 describe-instances \
     --query 'Reservations[*].Instances[*].['$FLDS']' \
     --output json | tr -d '\n[] "' | perl -pe 's/[^m]i-/\ni-/g' | tr ',' '\t' \
                                                                               | sed -e 's/null/None/g' \
                                                                               | grep '^i-' \
                                                                               | sort -k 5,5 -k 9,9 \
                                                                               | gawk -f isotolocal.awk \
                                                                               | gawk -f paddedip.awk \
                                                                               | sed 's/us-east/usE/g' \
                                                                               | sed 's/us-west/usW/g' \
                                                                               | sed 's/running/run/g' \
                                                                               | sed 's/\t//g' \
                                                                               | sed 's/  / /g' \
                                                                               | tee -a /tmp/cuu.out
 done
 done
fi


FLDS="InstanceId,Placement.AvailabilityZone,State.Name,InstanceType,LaunchTime,Tags[?Key==\`Name\`].Value[],Tags[?Key==\`Created_By\`].Value[]"
FLDS="InstanceId,Placement.AvailabilityZone,State.Name,InstanceType,LaunchTime,Tags[?Key==\`Name\`].Value[]"
COMMANDPROC "ELS,ECPU,ECPULS" "EC2 List with CPU Utilization" "-a" "v1.0"; if [ $bCmd -gt 0 ] ; then
   rm -rf /tmp/cuu.txt >/dev/null 2>&1
   rm -rf /tmp/cuuraw  >/dev/null 2>&1
   rm -rf qqed  >/dev/null 2>&1
   assert "$ACCOUNT" "Profile not specified"
   # datestampCUUOUT
   buildPROFILELIST
   REGIONLIST="us-east-1 us-east-2 us-west-1 us-west-2 eu-west-1 eu-west-2 eu-west-3 eu-central-1 ap-south-1 ap-northeast-2 ap-northeast-1 ap-southeast-1 ap-southeast-2 ca-central-1 sa-east-1"
   REGIONLIST="us-east-1 us-east-2 us-west-1 us-west-2"
   verbose $REGION
   for ACC in $PROFILELIST; do
   for REG in $REGIONLIST; do
     verbose $ACC 
     verbose $REG
     # print "EC2-Listing "$ACC" "$REG | tee -a /tmp/cuu.out
     aws --profile $ACC --region $REG ec2 describe-instances \
     --query 'Reservations[*].Instances[*].['$FLDS']' \
     --output json | tr -d '\n[] "' | perl -pe 's/[^m]i-/\ni-/g' | tr ',' '\t' \
                                                                               | tee -a /tmp/cuuraw     \
                                                                               | sed -e 's/null/None/g' \
                                                                               | grep '^i-' \
                                                                               | sort -k 3,3 \
                                                                               | gawk -f isotolocal.awk \
                                                                               | gawk -f paddedip.awk \
                                                                               | sed 's/ap-southeast/aSE/g' \
                                                                               | sed 's/us-east/usE/g' \
                                                                               | sed 's/us-west/usW/g' \
                                                                               | gawk '{if ($0 ~ "running") print $0}' \
                                                                               | sed 's/running/r/' \
                                                                               | sed 's/stopped/s/' \
                                                                               | sed 's/[.]small/-sml /g' \
                                                                               | sed 's/[.]micro/-mic /g' \
                                                                               | sed 's/[.]medium/-med /g' \
                                                                               | sed 's/[.]large/-lrg /g' \
                                                                               | sed 's/[.]xlarge/-xlg /g' \
                                                                               | sed 's/[.]2xlarge/-2xl /g' \
                                                                               | sed 's/[.]4xlarge/-4xl /g' \
                                                                               | sed 's/[.]8xlarge/-8xl /g' \
                                                                               | sed 's/\t//g' \
                                                                               | sed 's/  / /g' \
                                                                               | sed 's/^ //' \
                                                                               | gawk '{if (NF>0) print $0}' \
                                                                               | gawk -v A=$REG '{print A,$0}' \
                                                                               | gawk -v A=$ACC '{print A,$0}' \
                                                                               | gawk '{ 
                                                                                         system( "./yyy -d 5 -q 8 " $1 " " $2 " " $3);
                                                                                         printf("%s %s %s %s %s\n",$1,$4,$5,$6,$3);
                                                                                       }' \
                                                                               | tee -a /tmp/cuu.txt
 done
 done
 rm -rf /tmp/cuudos.txt
 cat /tmp/cuu.txt | gawk 'sub("$", "\r")'  > /tmp/cuudos.txt
 cat /tmp/cuu.txt | gawk 'sub("$", "\r")'  > /tmp/$ACC.txt
# if [ "$MAILME" == "1" ] ; then
#      echo "$file"  | mailx -a $file -r $NOTIFYFROM -s "$file"  $NOTIFYTO
# fi
fi
# awk 'sub("$", "\r")' /tmp/ITA.txt > /tmp/ITADOS.txtV
#                                                                                | sed 's/[.]small/-sml /g' \
#                                                                                | sed 's/[.]micro/-mic /g' \
#                                                                                | sed 's/[.]medium/-med /g' \
#                                                                                | sed 's/[.]large/-lrg /g' \
#                                                                                | sed 's/[.]xlarge/-xlg /g' \
#                                                                                | sed 's/[.]2xlarge/-2xl /g' \
                                                                                                                                         # | gawk -v A=$ACC -v B=$REG -f noindent.awk \
# aws --profile ADM ec2 describe-tags --filters "Name=resource-id,Values=i-00be83e2267acb66d"

COMMANDPROC "EC2TAGS,ECT" "List EC2 Tags" "-a [-r]" "v1.0"; if [ $bCmd -gt 0 ] ; then
     buildPROFILELIST
     buildREGIONLIST
     clean
     rm -rf $Tmp2
     rm -rf $Tmp3
     assert "$ACCOUNT" "Profile not specified"
     for ACC in $PROFILELIST; do
          for REG in $REGIONLIST; do
          aws --profile $ACC --region $REG  ec2 describe-tags | grep instance | gawk -v A=$ACC -v R=$REG '
          @include "trim.awk";
          ($4=="instance"){
                       sz=$0
                       key=trim($2)
                       INSTANCETAGS[key]=1
                       instance=trim($3)
                       $1="";$2="";$3="";$4="";
                       value=trim($0)
                       if (length(value) > 64) value=substr(value,1,64) "(TRUNCATED)";
                       OFS=" "
                       if (trim(key) == "Name" )
                            key="A " key;
                       else
                            key="B " key;

                       printf("%s %s %-20s %-30s %s\n", A,R,instance,key,value)
          }
          ' | sort -k 3,3 -k 4,4


          aws --profile $ACC --region $REG  ec2 describe-tags | grep instance | gawk -v A=$ACC -v R=$REG '($4=="instance"){print A,R,$3}' >> $Tmp2
          aws --profile $ACC --region $REG  ec2 describe-instances --query 'Reservations[*].Instances[*].['InstanceId']' | gawk -v A=$ACC -v R=$REG '{print A,R,$0}' >> $Tmp3
     done
     done
     rm -rf $Tmp
     cat $Tmp2 | sort > $Tmp; cp $Tmp $Tmp2
     rm -rf $Tmp
     cat $Tmp3 | sort > $Tmp; cp $Tmp $Tmp3
     print "==========================================="
     print "These Instances Have No Tags"
     print "==========================================="
     diff --changed-group-format='%>' --unchanged-group-format='' $Tmp2  $Tmp3
 fi
COMMANDPROC "EC2TAGS2222" "EC2 Tags"; if [ $bCmd -gt 0 ] ; then
     buildPROFILELIST
     buildREGIONLIST
     clean
     assert "$ACCOUNT" "Profile not specified"
     for ACC in $PROFILELIST; do
          for REG in $REGIONLIST; do
          aws --profile $ACC --region $REG  ec2 describe-instances --query 'Reservations[*].Instances[*].['InstanceId']' > $Tmp
               cat $Tmp | while read ITEM; do
                    aws --profile $ACC --region $REG ec2 describe-tags --filters "Name=resource-id,Values=$ITEM" | gawk '
                    {
                       key=$2
                       instance=$3
                       $1="";$2="";$3="";$4="";
                       value=$0
                       OFS=" "
                       print instance,key,value
                    }
                    '
              done
          done
     done
fi



COMMANDPROC "EC2LS2,EC2LIST2," "List Instances 2" "-a"; if [ $bCmd -gt 0 ] ; then
     buildPROFILELIST
     buildREGIONLIST
     clean
        print "-----------------------------------------" >&2
     for ACC in $PROFILELIST; do
      for REG in $REGIONLIST; do
        aws --profile $ACC --region $REG  ec2 describe-instances \
        --query 'Reservations[*].Instances[*].['$FLDS']' \
        --output json | tr -d '\n[] "' | perl -pe 's/[^m]i-/\ni-/g' | tr ',' '\t' | sed -e 's/null/None/g' | grep '^i-' | gawk -v A=$ACC -f noindent.awk >> $Tmp
      done
     done
     cat $Tmp | sort -k 1,1 -k 5,5 -k 9,9 | gawk -f isotolocal.awk | column -t | tee $Tmp2
     # cat $Tmp2 | mailx -r $NOTIFYFROM -s 'EC2 Listing' $NOTIFYTO


fi
COMMANDPROC "EC2MYLS,EC2LSMY" "My EC2 List"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     $AWS ec2 describe-instances \
     --query 'Reservations[*].Instances[*].['$FLDS']' \
     --filter Name=tag:CuuTag,Values=$MYCUUTAG \
     --output json | tr -d '\n[] "' | perl -pe 's/[^m]i-/\ni-/g' | tr ',' '\t' | sed -e 's/null/None/g' | grep '^i-' | sort -k 5,5 -k 9,9 | gawk -f isotolocal.awk | column -t \
                                                                                                                                          | gawk -v A=$ACCOUNT -f noindent.awk
fi



COMMANDPROC "EC2SGSUM2" "Security Group Summary Report"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --output json --profile $ACCOUNT ec2 describe-security-groups --query '
                               SecurityGroups[*].[GroupId,
                               IpPermissions[].[IpProtocol,FromPort,ToPort,IpRanges[].[CidrIp],UserIdGroupPairs[].[GroupId]]]'                            | tee ffed \
                               | tr -d '\n[] "' \
                               | perl -pe 's/sg-/\nsg-/g' \
                               | perl -pe 's/tcp/\n\t\ttcp/g' \
                               | perl -pe 's/udp/\n\t\tudp/g' \
                               | perl -pe 's/icmp/\n\t\ticmp/g' \
                               | tr ',' '\t' \
                               | sed -e 's/null/N/g' 
#                              |  gawk -F " " -v A=$ACCOUNT '
#                BEGIN    {szOut="";}
#                /^sg[-]/ {print szOut;szOut=$1;}
#                /^PERM/ { szOut=szOut " " $3; }
#            ' 
fi
#          XLIST=`aws --profile $ACCOUNT ec2 describe-regions --query "Regions[*].RegionName" --output text`

COMMANDPROC "EC2SGSUM" "Security Group Summary Report"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --output text --profile $ACCOUNT ec2 describe-security-groups --query '
                               SecurityGroups[*].{
                                    SG:GroupId,
                                    PERM:IpPermissions[*].
                                         {PR:IpProtocol,
                                          FP:FromPort,
                                          TP:ToPort,
                                          IP:IpRanges[*].CidrIp,
                                          UG:UserIdGroupPairs[*].{GI:GroupId}
                                         }
                               }' |  gawk -F " " -v A=$ACCOUNT '
               BEGIN    {szOut="";}
               /^sg[-]/ {print szOut;szOut=$1;}
               /^PERM/ { szOut=szOut " " $3; }
           ' 
fi
COMMANDPROC "EC2SG" "Security Group Detail Report" "-a" "v1.0"; if [ $bCmd -gt 0 ] ; then
buildPROFILELIST
buildREGIONLIST
clean
for ACC in $PROFILELIST; do
      for REG in $REGIONLIST; do
               assert "$ACC" "Profile not specified"
               aws --output text --profile $ACC --region $REG ec2 describe-security-groups --query '
                               SecurityGroups[*].{
                                    SG:GroupId,
                                    PERM:IpPermissions[*].
                                         {PR:IpProtocol,
                                          FP:FromPort,
                                          TP:ToPort,
                                          IP:IpRanges[*].CidrIp,
                                          UG:UserIdGroupPairs[*].{GI:GroupId}
                                         }
                               }' | gawk -F " " -v A=$ACC -v R=$REG '
               BEGIN    {FLAG=0;ct=6;}
               /^sg[-]/ {SG=$1;
                         if (length(SG)>12) sub(/sg-......../,"sg--",SG);
                         ct=6;
                        }
               /^PERM/ {
#                     proto=$3; sub(/[-]1/,"all",proto);if (match(proto,/all/)>0) FLAG=1; 
#                     fport=$2; sub(/None/,"all",fport);if (match(fport,/all/)>0) FLAG=1; 
#                     fport=$2; sub(/[-]1/,"all",fport);if (match(fport,/all/)>0) FLAG=1; 
#                     tport=$4; sub(/None/,"all",tport);if (match(tport,/all/)>0) FLAG=1; 
#                     tport=$4; sub(/[-]1/,"all",tport);if (match(tport,/all/)>0) FLAG=1; 

                    proto=$3; 
                    fport=$2; 
                    fport=$2; 
                    tport=$4; 
                    tport=$4; 
                    sub(/us-east-1/,"USE1",R); sub(/us-east-2/,"USE2",R); sub(/us-west-1/,"USW1",R); sub(/us-west-2/,"USW2",R);
                    sub(/eu-west-1/,"EUW1",R); sub(/eu-west-2/,"EUW2",R); sub(/eu-west-3/,"EUW3",R); sub(/eu-central-1/,"EUC1",R);
                    sub(/ap-south-1/,"ASO1",R); sub(/ap-northeast-1/,"ANE1",R); sub(/ap-northeast-2/,"ANE2",R); sub(/ap-southeast-1/,"ASE1",R);
                    sub(/ap-southeast-2/,"ASE2",R); sub(/ca-central-1/,"CAC1",R); sub(/sa-east-1/,"SAE1",R);
                    printf("\n%4s %4s %-14s %-5s %6s %6s",A,R,SG,proto,fport,tport)
                    block="                                                 ";
                    ctl="\n";
               }
               /^UG/ { 
                          UG=$2;
                          if (length(UG)>12) sub(/sg-......../,"sg--",UG);
                          printf(" %22s",UG)
                     }
               /^IP/ {     
                          if (match($2,/0[.]0[.]0[.]0/) > 0 ) { szsz = szsz " " SG " " $2; FLAG=1;} 
                          if (( ct % 5) == 0) printf("\n                                  ==========");
                          printf(" %22s",$2); ct++;
                     }
               END   { printf("\n"); if (FLAG==1) printf("\n*** FLAGGED SUSPECT IPs/SGs/Protos ***\n" szsz);}
           ' 
done
done
fi

COMMANDPROC "EC2SPARKMENU" "Instance Menu"; if [ $bCmd -gt 0 ] ; then
               typeset -A QUAG 
               assert "$ACCOUNT" "Profile not specified"
               LIST=`$AWS ec2 describe-instances --filters Name=instance-state-name,Values=running --query "Reservations[].Instances[].[InstanceId]"`
               clean
               print "PS3='Pick instance, enter choice:'" > $Tmp
               print -n "select clean_menu in " >> $Tmp
               TLIST=""
               for ITEM in $LIST; do
                    QUAG["$ITEM"]=`$AWS ec2 describe-tags --filters Name=resource-id,Values=$ITEM Name=key,Values=Name --query Tags[].Value --output text`
                    NOM=$ITEM"    ""${QUAG[$ITEM]}"
                    print -n "\""$NOM"\" " >> $Tmp
                    #print -n "\""$ITEM"-"$TNAME"\" " >> $Tmp
               done
               print "\"Exit\"" >> $Tmp
               print "do" >> $Tmp
               print "case \$clean_menu in" >> $Tmp
               for ITEM in $LIST; do
                    NOM=$ITEM"    ""${QUAG[$ITEM]}"
                    print "\""$NOM"\")" >> $Tmp


                    print "cuu -a "$ACCOUNT" -t "$ITEM" -T 12 -Q 900 -c EC2SPARK;;" >> $Tmp
               done
               print "\"Exit\") break;;" >> $Tmp
               print "esac" >> $Tmp
               print "done" >> $Tmp
               chmod 777 $Tmp
               $Tmp
fi
COMMANDPROC "EC2SPARK" "CloudWatch CPU Utilization with Spark Graphing" "-a -t"; if [ $bCmd -gt 0 ] ; then
#              aws --profile $ACCOUNT --output text ec2 describe-instances | gawk 'BEGIN {}/INSTANCES/{if(NF==19)
#              print $8;if(NF==22) print $9}' | gawk -v S=$ISOAGO -v A=$ACCOUNT -v T=$TIMEFACTOR -v Q=$QUANTAFACTOR '
               assert "$ACCOUNT" "Profile not specified"
               assert "QUANTAFACTOR" "Capture Period (3600,900,300) not specified"
               rm -rf $Tmp  >/dev/null 2>&1

#              instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped ).


               if [ "$THING" == "" ] ; then
                    LIST=`$AWS ec2 describe-instances --filters Name=instance-state-name,Values=running --query "Reservations[].Instances[].[InstanceId]"`
               else
                   LIST=$THING
               fi
               typeset -i CT
               typeset -i CTT
               let CT=0
               for ITEM in $LIST; do
                   let CT=$CT+1
               done
               print $CT" running instances"
               let CTT=$CT
               let CT=0
               for ITEM in $LIST; do
                    let CT=$CT+1
                    print "Getting CloudWatch Data for "$ITEM" "$CT" of "$CTT
                    TYE=`$AWS ec2 describe-instances --filters Name=instance-id,Values=$ITEM --query "Reservations[].Instances[].InstanceType" |gawk '@include "trim.awk";{
                                  sz=$0;
                                  gsub(/[ ]/,"-",sz);
                                  sz=cutpad(sz,8,"_");
                                  printf("%s",sz);
                    }'`
                    TNAME=`$AWS ec2 describe-tags --filters Name=resource-id,Values=$ITEM Name=key,Values=Name --query Tags[].Value --output text | gawk '@include "trim.awk";{
                                    sz=$0;
                                    gsub(/[ ]/,"-",sz);
                                    sz=cutpad(sz,16,"_");
                                    printf("%s",sz);
                    }'`
                     print "TYE " $TYE >> $Tmp
                     print "TNAME " $TNAME >> $Tmp
                     print "INSTANCE " $ITEM >> $Tmp
                     $AWS cloudwatch get-metric-statistics --metric-name CPUUtilization --period $QUANTAFACTOR --namespace AWS/EC2 --statistics Maximum \
                                                           --dimensions Name=InstanceId,Value=$ITEM --start-time $ISOAGO --end-time $ISOANON >> $Tmp
               done
               print "Done Getting CloudWatch Data"
               cat $Tmp | gawk -v T=$TIMEFACTOR -v Q=$QUANTAFACTOR -v A=$ACCOUNT '
                   @include "trim.awk" 
                   BEGIN {dname=cutpad("NA",16,"-");}
                   END {print ""}
                   /TYE/ {tyname=$2;if (tyname=="") tyname="NA";}
                   /TNAME/ {szname=$2;if (szname=="") szname=dname;}
                   /INSTANCE.*i-/ {sz=sprintf("\nspark -m %s -n %s -a %s -q %s -t %s -y CPU-Max -l %s ", tyname, szname, A, Q, T, $2)}
                   /DATAPOINTS/ {printf("%s ",sz);sz="";szname=dname;}
                   /DATAPOINTS/ {ct++;printf("%5.2f ", $2) }
               ' > $Tmp2
               cp $Tmp2 fed
               chmod 777 $Tmp2
               $Tmp2

fi

COMMANDPROC "EC2-UTIL" "CloudWatch CPU Utilization"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --profile $ACCOUNT --output text ec2 describe-instances | gawk 'BEGIN {}/INSTANCES/{if(NF==19) print $8;if(NF==22) print $9}' | gawk -v S=$ISOAGO -v A=$ACCOUNT '
               @include "cuu.awk"
               {
               sz ="aws --profile " A " cloudwatch get-metric-statistics --metric-name CPUUtilization --period 3600 --namespace AWS/EC2 --statistics Maximum \
                   --dimensions Name=InstanceId,Value=" $0 " --start-time " isoyesterfiveday() " --end-time " isonowhour()
               print "INSTANCE " $0
               system(sz)
           } ' | gawk '
           @include "cuu.awk" 

           {printf("%s\n",$0)}
           /INSTANCEXX/ {printf("%s\n",$0)}
           /INSTANCE/ {II=$0}
           /DATAPOINTSXX/ {printf("METRIC %5.2f %s\n", $2, isotolocal($3))}
           /DATAPOINTSXX/ {printf("%s %s %5.2f\n",II, isotolocal($3), $2)}
           ' 
           fi


# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: S3 Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "S3LS,S3LIST,LB" "S3 List" "-a [-r] [-b]" "v1.0"; if [ $bCmd -gt 0 ] ; then
               buildPROFILELIST
               clean
               for ITEM in $PROFILELIST; do
                    if [ "$S3BUCKET" == "" ] ; then
                         aws --profile $ITEM s3 ls| gawk -v A=$ITEM -f noindent.awk
                    else
                         aws --profile $ITEM s3 ls s3://$S3BUCKET| gawk -v A=$ITEM -f noindent.awk
                    fi
               done
fi
COMMANDPROC "S3LSR,S3LISTR,LBR" "S3 List (recursive)" "-a [-r] [-b]" "v1.0"; if [ $bCmd -gt 0 ] ; then
               buildPROFILELIST
               clean
               for ITEM in $PROFILELIST; do
                    if [ "$S3BUCKET" == "" ] ; then
                         aws --profile $ITEM s3 ls --recursive| gawk -v A=$ITEM -f noindent.awk
                    else
                         aws --profile $ITEM s3 ls --recursive s3://$S3BUCKET| gawk -v A=$ITEM -f noindent.awk
                    fi
               done
fi
COMMANDPROC "S3CREATEBUCKET,S3CB" "Create S3 Bucket" "-a [-r] -b" "v1.2"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT"  "Profile not specified"
               assert "$REGION"   "Region not specified"
               print  "Region is: "$REGION
               print  "Bucket is: "$S3BUCKET
               confirm
               aws --profile $ACCOUNT s3api create-bucket --bucket $S3BUCKET --region $REGION
               aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
fi
COMMANDPROC "S3DELETEBUCKET,S3RB" "Deletes a S3 Bucket" "-a [-r] -b" "v1.0"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandS3BUCKET
               assert "$REGION"   "Region not specified"
               print  "Region is: "$REGION
               print  "Bucket is: "$S3BUCKET
               confirm
               aws --profile $ACCOUNT s3api delete-bucket --bucket $S3BUCKET 
fi
COMMANDPROC "S3PUT" "S3 Put Object" "-a [-r] -b -k -d" "v1.5"; if [ $bCmd -gt 0 ] ; then
               aws --profile $ACCOUNT s3api put-object --bucket $S3BUCKET --key $S3KEY --body $DOCUMENT
               aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
               # java Gpurl us-east-1 $S3BUCKET $S3KEY 5
fi
COMMANDPROC "S3PUTPDF" "S3 Put PDF Object" "-a [-r] -b -k -d" "v1.5"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT"  "Profile not specified"
               assert "$REGION"   "Region not specified"
               assert "$S3BUCKET" "Bucket not specified"
               assert "$S3KEY"    "Key not specified"
               assert "$DOCUMENT" "Document not specified"
               aws --profile $ACCOUNT s3api put-object --bucket $S3BUCKET --key $S3KEY --body $DOCUMENT --content-type application/pdf
               aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
fi
COMMANDPROC "S3HTML" "S3 List as HTML Page" "-a [-r] -b -C"; if [ $bCmd -gt 0 ] ; then
               clean
               aws --profile $ACCOUNT s3 ls --recursive s3://$S3BUCKET 
               $AWS  s3 rm s3://$S3BUCKET/ --recursive --exclude "*" --include "index.html"
               $AWS  s3 rm s3://$S3BUCKET/ --recursive --exclude "*" --include "index.m3u"
               aws --profile $ACCOUNT s3 ls --recursive s3://$S3BUCKET | gawk '@include "trim.awk"; {$1="";$2="";$3="";print trim($0)}' > $Tmp
               cat $Tmp | while read ITEM; do
                   aws --output text --profile $ACCOUNT s3 presign "s3://$S3BUCKET/$ITEM" --expires-in $EXPIRES | gawk -v A="$ITEM" '{print A "," $0}' >> $Tmp2
               done
               cat $Tmp2 | gawk -F, -f html.awk > index.html
               aws --profile $ACCOUNT s3api put-object --bucket $S3BUCKET --key index.html --body ./index.html --content-type text/html
               aws --output text --profile $ACCOUNT s3 presign s3://$S3BUCKET/index.html --expires-in $EXPIRES  | tee $Tmp
               cat $Tmp | gawk '{ print "xdg-open \"" $0 "\" >/dev/null 2>&1";}' > $Tmp2
               chmod 777 $Tmp2
               $Tmp2


               if [ "$CTYPE" == "MP3" ] ; then
                    cat $Tmp2 | gawk -F, '{print $2}' > index.m3u
                    aws --profile $ACCOUNT s3api put-object --bucket $S3BUCKET --key index.m3u --body ./index.m3u --content-type audio/x-mpegurl
                    aws --output text --profile $ACCOUNT s3 presign s3://$S3BUCKET/index.m3u --expires-in $EXPIRES  | tee $Tmp
               fi
fi
COMMANDPROC "S3URL" "Create a Signed URL" "-a [-r] -b -k" ; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandS3BUCKETandS3KEY
     java Gpurl $REGION  $S3BUCKET $S3KEY 5
fi


COMMANDPROC "VIMS3PUT,S3VIMPUT" "S3 Vim Put" "-a [-r] -b -d"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     assert "$S3BUCKET" "S3 Bucket not specified"
     assert "$DOCUMENT" "Document(s) not specified"
     $AWS s3 cp ./$DOCUMENT s3://$S3BUCKET/$DOCUMENT --sse
fi



COMMANDPROC "S3COPY" "S3 Copy, with wildcard (%) documents" "-a [-r] -b -d"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     assert "$S3BUCKET" "S3 Bucket not specified"
     assert "$DOCUMENT" "Document(s) not specified"
     DOCUMENT=`echo $DOCUMENT | sed -e "s/[%]/*/g"`
     ls $DOCUMENT > $Tmp
     case $CTYPE in
          html)    CTYPE=" --content-type text/html " ;;
          text)    CTYPE=" --content-type text/plain " ;;
          pdf)     CTYPE=" --content-type application/pdf " ;;
          json)    CTYPE=" --content-type application/json " ;;
          mp3)     CTYPE=" --content-type audio/mpeg " ;;
          mpeg)    CTYPE=" --content-type audio/mpeg " ;;
          jpg)     CTYPE="  --content-type image/jpeg " ;;
          jpeg)    CTYPE="  --content-type image/jpeg " ;;
          cbr)     CTYPE="  --content-type application/x-cbr " ;;
          m3u)     CTYPE="  --content-type audio/x-mpegurl " ;;
          guess)   CTYPE="" ;;
          *)       CTYPE="" ;;
     esac
     print "Content Type "$CTYPE
     print "Document     "$DOCUMENT
     $AWS s3 cp ./ s3://$S3BUCKET/ --sse --recursive --exclude "*" --include "$DOCUMENT" $CTYPE
fi
COMMANDPROC "S3COPYWITHRENAMING" "S3 Copy and Rename, with wildcard (%) documents" "-a -[r] -b -d"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     assert "$S3BUCKET" "S3 Bucket not specified"
     assert "$DOCUMENT" "Document(s) not specified"
     DOCUMENT=`echo $DOCUMENT | sed -e "s/[%]/*/g"`
     ls $DOCUMENT > $Tmp
     case $CTYPE in
          HTML)    CTYPE=" --content-type text/html " ;;
          html)    CTYPE=" --content-type text/html " ;;
          TEXT)    CTYPE=" --content-type text/plain " ;;
          text)    CTYPE=" --content-type text/plain " ;;
          PDF)     CTYPE=" --content-type application/pdf " ;;
          pdf)     CTYPE=" --content-type application/pdf " ;;
          JSON)    CTYPE=" --content-type application/json " ;;
          json)    CTYPE=" --content-type application/json " ;;
          MP3)     CTYPE=" --content-type audio/mpeg " ;;
          mp3)     CTYPE=" --content-type audio/mpeg " ;;
          MPEG)    CTYPE=" --content-type audio/mpeg " ;;
          mpeg)    CTYPE=" --content-type audio/mpeg " ;;
          JPG)     CTYPE="  --content-type image/jpeg " ;;
          jpg)     CTYPE="  --content-type image/jpeg " ;;
          JPEG)    CTYPE="  --content-type image/jpeg " ;;
          jpeg)    CTYPE="  --content-type image/jpeg " ;;
          CBR)     CTYPE="  --content-type application/x-cbr " ;;
          cbr)     CTYPE="  --content-type application/x-cbr " ;;
          M3U)     CTYPE="  --content-type audio/x-mpegurl " ;;
          m3u)     CTYPE="  --content-type audio/x-mpegurl " ;;
          GUESS)   CTYPE="" ;;
          *)       CTYPE="" ;;
     esac
     print "Content Type "$CTYPE
     print "Document     "$DOCUMENT
     ls $DOCUMENT > $Tmp
     mkdir $TmpDir
     ls $TmpDir
     cat $Tmp | while read ITEM; do
          S3KEY=`echo $ITEM | sed -e "s/[ ]/-/g"`
          cp "$ITEM"  "$TmpDir/$S3KEY"
          print  "$TmpDir/$S3KEY"
          #$AWS s3 cp "./$ITEM"  s3://$S3BUCKET/$S3KEY  --sse  $CTYPE
     done
     $AWS s3 cp $TmpDir s3://$S3BUCKET/ --sse --recursive --exclude "*" --include "$DOCUMENT" $CTYPE
     aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
     rm -rf $TmpDir
fi

COMMANDPROC "S3CLEARBUCKET,S3CLEAR" "S3 Remove Object, with wildcard (%) keys" "-a -b -k"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandS3BUCKET
     aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
     confirm
     $AWS  s3 rm s3://$S3BUCKET/ --recursive --exclude "*" --include "*"
     aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
fi
COMMANDPROC "S3REMOVE,S3RM" "S3 Remove Object, with wildcard (%) keys" "-a -b -k"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandS3BUCKETandS3KEY
     confirm
     S3KEY=`echo $S3KEY | sed -e "s/[%]/*/g"`
     $AWS  s3 rm s3://$S3BUCKET/ --recursive --exclude "*" --include "$S3KEY"
     aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
fi

COMMANDPROC "S3COPY-1MINUTE" "S3 Copy, Expires in 1 Minute" "-a -b -d"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandS3BUCKET
     aws --profile $ACCOUNT s3 cp $DOCUMENT s3://$S3BUCKET/$DOCUMENT --expires $ISOFUTUREMINUTE
fi

COMMANDPROC "S3PUTTEXT" "S3 Put Text Object" "-a -b -k -d"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandS3BUCKETandS3KEYandDOCUMENT
     aws --profile $ACCOUNT s3api put-object --bucket $S3BUCKET --key $S3KEY --body $DOCUMENT --content-type text/plain
     aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
fi
COMMANDPROC "S3PUTHTML" "S3 Put HTML Object" "-a -b -k -d"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandS3BUCKETandS3KEYandDOCUMENT
     aws --profile $ACCOUNT s3api put-object --bucket $S3BUCKET --key $S3KEY --body $DOCUMENT --content-type text/html
     aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
fi
COMMANDPROC "S3PUTPDFFILESET" "S3 Put PDF Fileset" "-a -b"; if [ $bCmd -gt 0 ] ; then
    cat fileset | while read ITEM; do
          print $ITEM
          aws --profile $ACCOUNT s3api put-object --bucket $S3BUCKET --key "$ITEM" --body "./$ITEM" --content-type application/pdf
    done
    aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
fi
COMMANDPROC "S3RMFILESET" "S3 Remove Fileset" "-a -b"; if [ $bCmd -gt 0 ] ; then
    cat fileset | while read ITEM; do
          print $ITEM
          aws --profile $ACCOUNT s3 rm "s3://$S3BUCKET/$ITEM"
     done
     aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
fi

COMMANDPROC "S3PRESIGN" "Presign S3 URL" "-a -b -k"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandS3BUCKETandS3KEY
     confirm
     aws --output json --profile $ACCOUNT s3 presign s3://$S3BUCKET/$S3KEY --expires-in 300
     aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
fi
COMMANDPROC "S3CREATEBUCKET-EUWEST1" "Create S3 Bucket in eu-west-1" "-a -b"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandS3BUCKET
     confirm
     aws --profile $ACCOUNT s3api create-bucket --bucket $S3BUCKET --region eu-west-1 --create-bucket-configuration LocationConstraint=eu-west-1
     aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
fi
COMMANDPROC "S3CREATEBUCKET-EUCENTRAL1" "Create S3 Bucket in eu-central-1" "-a -b"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandS3BUCKET
     confirm
     aws --profile $ACCOUNT s3api create-bucket --bucket $S3BUCKET --region eu-central-1 --create-bucket-configuration LocationConstraint=eu-central-1
     aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
fi
COMMANDPROC "S3CREATEBUCKET-USEAST1" "Create S3 Bucket in us-east-1" "-a -b"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandS3BUCKET
     confirm
     aws --profile $ACCOUNT s3api create-bucket --bucket $S3BUCKET --region us-east-1
     aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
fi
COMMANDPROC "S3CREATEBUCKET-USEAST2" "Create S3 Bucket in us-east-2" "-a -b"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandS3BUCKET
     confirm
     aws --profile $ACCOUNT s3api create-bucket --bucket $S3BUCKET --region us-east-2 --create-bucket-configuration LocationConstraint=us-east-2
     aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
fi
COMMANDPROC "S3CREATEBUCKET-USWEST1" "Create S3 Bucket in us-west-1" "-a -b"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandS3BUCKET
     confirm
     aws --profile $ACCOUNT s3api create-bucket --bucket $S3BUCKET --region us-west-1 --create-bucket-configuration LocationConstraint=us-west-1
     aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
fi
COMMANDPROC "S3CREATEBUCKET-USWEST2" "Create S3 Bucket in us-west-2" "-a -b"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandS3BUCKET
     confirm
     aws --profile $ACCOUNT s3api create-bucket --bucket $S3BUCKET --region us-west-2 --create-bucket-configuration LocationConstraint=us-west-2
     aws --profile $ACCOUNT s3 ls s3://$S3BUCKET --recursive
fi


COMMANDPROC "COST" "Cost report" "-a -b" "v1.5"; if [ $bCmd -gt 0 ] ; then
     CESTART=`date --rfc-3339=seconds |gawk '{sz=$1; gsub(/..[-]..$/, "", sz); print sz "01-01";}'`
     CEEND=`date --rfc-3339=seconds |gawk '{sz=$1; print sz "";}'`
     print $CESTART
     print $CEEND
     buildPROFILELISTnp
     clean
     for ACC in $PROFILELIST; do
          aws --profile $ACC  ce get-cost-and-usage --granularity MONTHLY --metrics UnblendedCost --time-period Start=$CESTART,End=$CEEND | \
                                                                                   gawk -v S=$CESTART -v E=$CEEND -v A=$ACC '
                                                                                   /TIMEPERIOD/ {printf("%4s %s %s ", A,$3,$2)}
                                                                                   /BLENDEDCOST/ {printf("%8.0f %s\n", $2,$3)}
                                                                                   ' | tee -a $Tmp
     done
     cp $Tmp $Tmp2
     echo "" | tee -a $Tmp
     gawk '{ct=ct+$4;}END{print "TOTAL " ct " USD"}' $Tmp2 | tee -a $Tmp
fi
#           aws --profile $ACC  ce get-dimension-values --dimension SERVICE --time-period Start=$CESTART,End=$CEEND  
#           aws --profile $ACC  ce get-dimension-values --dimension SERVICE --time-period Start=$CESTART,End=$CEEND  | gawk '
#                function ltrim(s) { sub(/^ */, "", s); return s }
#                function rtrim(s) { sub(/ *$/, "", s); return s }
#                function trim(s) { return rtrim(ltrim(s)); }
#                function dq(sz) { return("\"" sz "\"") }
#                /^DIM/{$1="";print dq(trim($0)) ","}'
# 
COMMANDPROC "COSTDETAIL" "Cost detail report" "-a -b" "v1.5"; if [ $bCmd -gt 0 ] ; then
     CESTART=`date --rfc-3339=seconds |gawk '{sz=$1; gsub(/..[-]..$/, "", sz); print sz "01-01";}'`
     CEEND=`date --rfc-3339=seconds |gawk '{sz=$1; print sz "";}'`
     buildPROFILELISTnp
     clean
     rm -rf $Tmp
     for ACC in $PROFILELIST; do
          aws --profile $ACC  ce get-cost-and-usage --group-by Type=DIMENSION,Key=SERVICE  --filter file://f.json --granularity MONTHLY --metrics "BlendedCost" "UnblendedCost" "UsageQuantity" --time-period Start=$CESTART,End=$CEEND > $Tmp

          cat $Tmp | gawk -v S=$CESTART -v E=$CEEND -v A=$ACC '
                function ltrim(s) { sub(/^ */, "", s); return s }
                function rtrim(s) { sub(/ *$/, "", s); return s }
                function trim(s) { return rtrim(ltrim(s)); }
                function dq(sz) { return("\"" sz "\"") }
                function put(sz) { printf("%s",sz) }
                function put40(sz) { printf("%-40s",sz) }
                function putf(sz) { printf("%8.2f",sz) }
                function putln(sz) { printf("%s\n",sz) }
                BEGIN {t=0.0;timeperiod=sprintf(" %s %s",S,E )}
                /^KEY/ {$1="";service=trim($0)}
                /^BLENDED/ {
                     $1="";
                     putf($0)
                     t=t+$0
                     put40(" " service) 
                     put(" " A)
                     put40(timeperiod)
                     putln("")
                }
                END {
                     putf(t)
                     putln("")
                } 


          '
     done
fi

#               --filter '{      "Dimensions": { "Key": "SERVICE", "Values": [ "Amazon Simple Storage Service" ] } }' |
COMMANDPROC "COST2" "Cost report this year" "-a -b"; if [ $bCmd -gt 0 ] ; then
     CESTART=`date --rfc-3339=seconds |gawk '{sz=$1; gsub(/..[-]..$/, "", sz); print sz "01-01";}'`
     CEEND=`date --rfc-3339=seconds |gawk '{sz=$1; print sz "";}'`
     buildPROFILELISTnp
     clean
     ZERG="{\"Dimensions\": { \"Key\": \"SERVICE\", \"Values\": [ \"Amazon Simple Storage Service\" ] } }"
     ZERG="{\"Dimensions\": { \"Key\": \"SERVICE\", \"Values\": [ \"AWS Lambda\" ] } }"
     ZERG="{\"Dimensions\": { \"Key\": \"SERVICE\", \"Values\": [ \"Amazon Elastic Compute Cloud - Compute\" ] } }"
     ZERG="{\"Dimensions\": { \"Key\": \"SERVICE\", \"Values\": [ \"EC2 - Other\" ] } }"
     print "$ZERG"
     for ACC in $PROFILELIST; do
          aws --profile $ACC  ce get-cost-and-usage --granularity MONTHLY --metrics UnblendedCost --time-period Start=$CESTART,End=$CEEND --filter "$ZERG" |
                                                                                   gawk -v S=$CESTART -v E=$CEEND -v A=$ACC '
                                                                                   /TIMEPERIOD/ {printf("%4s %s %s ", A,$3,$2)}
                                                                                   /BLENDEDCOST/ {printf("%8.0f %s\n", $2,$3)}
                                                                                   ' | tee -a $Tmp
     done
     cp $Tmp $Tmp2
     echo "" | tee -a $Tmp
     gawk '{ct=ct+$4;}END{print "TOTAL " ct " USD"}' $Tmp2 | tee -a $Tmp
fi
COMMANDPROC "COSTDAY" "Cost report last month to today (gnuplot)" "-a -b" "v2.0"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     CESTART=$LASTMONTHSTART
     CEEND=$THISDAY
     clean
     aws --profile $ACCOUNT  ce get-cost-and-usage --granularity DAILY --metrics UnblendedCost --time-period Start=$CESTART,End=$CEEND | \
                                                                                 gawk -v S=$CESTART -v E=$CEEND -v A=$ACCOUNT '
                                                                                 /TIMEPERIOD/  { gsub(/[-]/, "/", $3); dt=$3;dd=$3;sub(/^......../, "", dd);}
                                                                                 /BLENDEDCOST/ {if ($2 <0) $2=0;ct++;printf("%d %s %1.0f %s\n",ct,dt,$2,dd)}
                                                                                 ' > $Tmp
     cp $Tmp zed
     PLOTTITLE=$ACCOUNT" Charges by day, "$LASTMONTHSTART" - "$THISDAY
     gnuplot46 -p <<-EOFMarker
          plottitle="`echo $PLOTTITLE` "
          set terminal wxt enhanced 
          set title plottitle font ",12" textcolor rgbcolor "black"
          set decimal locale
          set format y "%'g"
          set xlabel 'Day'
          set ylabel 'Dollars'
          set boxwidth 0.5
          set style fill solid
          set xtic 1
          plot [1:] 'qqed' using 1:2 with boxes notitle
EOFMarker
fi
          # plot [1:] '$Tmp' using 1:3 with boxes notitle

COMMANDPROC "PLOT" "Gnuplot the file qqed" ""; if [ $bCmd -gt 0 ] ; then
     PLOTTITLE="Plot"
     gnuplot46 -p <<-EOFMarker
          plottitle="`echo $PLOTTITLE` "
          set terminal wxt enhanced 
          set title plottitle font ",12" textcolor rgbcolor "black"
          set decimal locale
          set format y "%'g"
          set xlabel 'Day'
          set ylabel 'Dollars'
          set boxwidth 0.5
          set style fill solid
          set xtic 1
          plot [1:6] 'qqed' with boxes notitle 
EOFMarker
fi

#           plot [1:6] 'qqed' using 1:2 with boxes notitle
COMMANDPROC "HISTO" "Gnuplot the file qqed" ""; if [ $bCmd -gt 0 ] ; then
     PLOTTITLE="Plot"
     gnuplot46 -p <<-EOFMarker
              set boxwidth 0.9 relative
              set style data histograms
              set style fill solid 1.0 border -1
              set yrange [-10:100]
              plot 'qqed' using 1, '' using 2, '' using 3, '' using 4  \
                         , '' using 5, '' using 6, '' using 6, '' using 8 \
                         , '' using 9, '' using 10, '' using 11, '' using 12 \
                         , '' using 13, '' using 14, '' using 15, '' using 16 
EOFMarker
fi
#               plot 'qqed' using [1:6]
# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: CLOUD TRAIL Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "CLOUDTRAILWORLD,WORLD" "CloudTrail report for 100 hour window for user across all regions" "-a"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     LIST=`$AWS ec2 describe-regions --query "Regions[*].RegionName"`
     for ITEM in $LIST; do
         print "cuu -T 100 -c cu -u "$USERNAME" -r "$ITEM" -a "$ACCOUNT
     done

fi
COMMANDPROC "CLOUDTRAIL-ACTIVE" "Cloudtrail watch all activity in the time window"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --profile $ACCOUNT --output text cloudtrail lookup-events --start-time $ISOAGO | gawk '
               /^EVENTS/ {
                    print $NF 
               }' | sort | uniq
fi
COMMANDPROC "CLOUDTRAILMENU" "Menu interface to pick and watch users via cloudtrail"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               buildUSERLIST  $ACCOUNT
               clean
               print "PS3='Pick user, enter choice:'" > $Tmp
               print -n "select clean_menu in " >> $Tmp
               for USER in $USERLIST; do
                    print -n "\""$USER"\" " >> $Tmp
               done
               print "\"Exit\"" >> $Tmp
               print "do" >> $Tmp
               print "case \$clean_menu in" >> $Tmp
               for USER in $USERLIST; do
                    print "\""$USER"\")" >> $Tmp
                    print "cuu -B -E -T 24 -a "$ACCOUNT" -c cu -u "$USER";;" >> $Tmp
               done
               print "\"Exit\") break;;" >> $Tmp
               print "esac" >> $Tmp
               print "done" >> $Tmp
               chmod 777 $Tmp
               $Tmp
fi

COMMANDPROC "CLOUDTRAIL-WATCH" "Cloudtrail watch a user across multiple profiles"; if [ $bCmd -gt 0 ] ; then
               assert "PROFILELIST"  "Profile  not specified"
               if [ "$USERNAME" == "" ] ; then
                    assert "$WATCHUSER"    "User not specified"
                    for sz in $PROFILELIST; do
                         cuu -a $sz -c CU -u $WATCHUSER $DETAILFLAG
                    done
               else
                    assert "$USERNAME"    "User not specified"
                    for sz in $PROFILELIST; do
                         cuu -a $sz -c CU -u $USERNAME $DETAILFLAG
                    done
               fi
fi


COMMANDPROC "CL" "Console Logins"; if [ $bCmd -gt 0 ] ; then
$AWS cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=$USERNAME --max-results 500 > $Tmp


               cat $Tmp | gawk  -v TL=$TRUNCATELENGTH -v REG=$REGION -v SMY=$SUMMARY -v USR=$USERNAME -v ACCT=$ACCOUNT -v DETAIL=$DETAIL -v BN=$BIGNAMES -v BE=$BIGEVENTS -v RAW=$SHOWRAW -v ISOTIME=$ISOTIME '
               @include "cuu.awk"
               BEGIN { CT=0 }
               /^EVENTS/ {
                    if (match(SMY,/^yes/) != 0) {
                         BE="yes"
                         BN="yes"
                    }
                    sz=$0;
                    timepre=jget($0, "^.*[\"]eventTime[\"]:","NA");
                    ip=  jget($0, "^.*[\"]sourceIPAddress[\"]:","NA");
                    ty=  jget($0, "^.*[\"]eventType[\"]:","NA");
                    en=  jget($0, "^.*[\"]eventName[\"]:","NA");
                    req= jget($0, "^.*[\"]requestParameters[\"]:","NA");
                    resp= jget($0, "^.*[\"]responseElements[\"]:","NA");
                    time=isotolocal(timepre, "%m/%d/%Y %I:%M:%S%p");
                    shorttime=isotolocal(timepre, "%m/%d/%Y");
                    if (match(ISOTIME,/^yes/) > 0 ) {
                         time=timepre;
                         shorttime=timepre;
                    }
                    name=$NF;
                    CT++
                    print CT,name,time,ty,en, req,respi
              }'

#$AWS cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=ConsoleLogin
fi


COMMANDPROC "CLOUDTRAIL-USER,CU" "Tracks a user's activity via cloud trail"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT"  "Profile not specified"
               assert "$USERNAME" "Username not specified"
               clean
               window | tee -a cuureport.txt
               print $ISOAGO
               if [ "$USERNAME" == "USERLIST" ] ; then
                    rm -rf $Tmp  >/dev/null 2>&1
                    LIST=`cat userlist`
                    for USER in $LIST; do
                      $AWS cloudtrail lookup-events --no-paginate --start-time $ISOAGO --lookup-attributes AttributeKey=Username,AttributeValue=$USER >> $Tmp
                    done
               else
                    if [ "$USERNAME" == "ALL" ] ; then
                      $AWS cloudtrail lookup-events --no-paginate --start-time $ISOAGO  > $Tmp
                    else
                      # $AWS cloudtrail lookup-events --no-paginate --start-time $ISOAGO --lookup-attributes AttributeKey=Username,AttributeValue=$USERNAME > $Tmp
                      # $AWS cloudtrail lookup-events --no-paginate  --lookup-attributes AttributeKey=Username,AttributeValue=$USERNAME > $Tmp
                      $AWS cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=ConsoleLogin > $Tmp
                      #$AWS cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=$USERNAME > $Tmp
                    fi
               fi
               cat $Tmp > fed 
               cat $Tmp | gawk  -v TL=$TRUNCATELENGTH -v REG=$REGION -v SMY=$SUMMARY -v USR=$USERNAME -v ACCT=$ACCOUNT -v DETAIL=$DETAIL -v BN=$BIGNAMES -v BE=$BIGEVENTS -v RAW=$SHOWRAW -v ISOTIME=$ISOTIME '
               @include "cuu.awk"
               /^EVENTS/ {
                    if (match(SMY,/^yes/) != 0) {
                         BE="yes"
                         BN="yes"
                    }
                    sz=$0;
                    timepre=jget($0, "^.*[\"]eventTime[\"]:","NA");
                    ip=  jget($0, "^.*[\"]sourceIPAddress[\"]:","NA");
                    ty=  jget($0, "^.*[\"]eventType[\"]:","NA");
                    en=  jget($0, "^.*[\"]eventName[\"]:","NA");
                    req= jget($0, "^.*[\"]requestParameters[\"]:","NA");
                    resp= jget($0, "^.*[\"]responseElements[\"]:","NA");
                    time=isotolocal(timepre, "%m/%d/%Y %I:%M:%S%p");
                    shorttime=isotolocal(timepre, "%m/%d/%Y");
                    if (match(ISOTIME,/^yes/) > 0 ) {
                         time=timepre;
                         shorttime=timepre;
                    }
                    name=$NF;
                    sub(/HIDDEN_DUE_TO_SECURITY_REASONS/,"HIDDEN",name);
                    if (match(DETAIL,/^yes/) == 0) {
                         sub(/^Aws/, "", ty);
                         gsub(/["]/, "", resp);
                         gsub(/Validation/, "Valid", resp);
                         gsub(/Region/, "Reg", resp);
                         gsub(/Required/, "Req", resp);
                         gsub(/Bucket/, "Bk", resp);
                         gsub(/Service/, "Sv", resp);
                         gsub(/[ ]/, "", resp);
                         gsub(/createDate/, "cD", resp);
                         gsub(/userName/, "uN", resp);
                         gsub(/userName/, "uN", req);
                         gsub(/userId/, "uID", resp);
                         gsub(/AIDA................/, "AIDA..", resp);
                         gsub(/Jan/,"01",resp); gsub(/Feb/,"02",resp); gsub(/Mar/,"03",resp); gsub(/Apr/,"04",resp); gsub(/May/,"05",resp); gsub(/Jun/,"06",resp);
                         gsub(/Jul/,"07",resp); gsub(/Aug/,"08",resp); gsub(/Sep/,"09",resp); gsub(/Oct/,"10",resp); gsub(/Nov/,"11",resp); gsub(/Dec/,"12",resp);
                         gsub(/,2018/,"2018",resp);
                         gsub(/GroupName/,"GName",req);
                         gsub(/StreamName/,"SName",req);
                         gsub(/GroupName/,"GName",resp);
                         gsub(/StreamName/,"SName",resp);
                         gsub(/Permission/,"Perm",resp);
                         gsub(/Protocol/,"Prtcl",resp);
                         gsub(/Permission/,"Perm",req);
                         gsub(/Protocol/,"Prtcl",req);
                         gsub(/Port/,"P",req);
                         gsub(/request/,"req",req);
                         gsub(/request/,"req",resp);
                         gsub(/vpcConfig/,"vpcCfg",req);
                         gsub(/vpcConfig/,"vpcCfg",resp);
                         gsub(/memorySize/,"memSz",req);
                         gsub(/memorySize/,"memSz",resp);
                         gsub(/revisionId/,"revId",req);
                         gsub(/revisionId/,"revId",resp);
                         gsub(/destinationCidrBlock/,"DestCidr",req);
                         gsub(/destinationCidrBlock/,"DestCidr",resp);

                         gsub(/[Bb]lock/,"Bblk",req);
                         gsub(/[Bb]lock/,"Bblk",resp);

                         gsub(/[Pp]rivate/,"Prv",req);
                         gsub(/[Pp]rivate/,"Prv",resp);
                         gsub(/[Pp]ublic/,"Pub",req);
                         gsub(/[Pp]ublic/,"Pub",resp);
                         gsub(/[Aa]llocation/,"Alloc",req);
                         gsub(/[Aa]llocation/,"Alloc",resp);
                         gsub(/[Aa]llocate/,"Alloc",req);
                         gsub(/[Aa]llocate/,"Alloc",resp);
                         gsub(/[Aa]llocate/,"Alloc",ty);
                         gsub(/[Aa]ssociation/,"Assoc",req);
                         gsub(/[Aa]ssociation/,"Assoc",resp);
                         gsub(/[Aa]ssociation/,"Assoc",ty);
                         gsub(/[Aa]ssociate/,"Assoc",req);
                         gsub(/[Aa]ssociate/,"Assoc",resp);
                         gsub(/[Aa]ssociate/,"Assoc",ty);

                         gsub(/[Mm]odify/,"Mod",ty);
                         gsub(/[Ii]nstance/,"Inst",ty);
                         gsub(/[Ss]ecurity/,"Sec",ty);
                         gsub(/[Aa]uthorize/,"Auth",ty);
                         gsub(/[Aa]ttach/,"Atch",ty);
                         gsub(/[Gg]roup/,"Grp",ty);

                         gsub(/[Rr]oute/,"Rte",req);
                         gsub(/[Rr]oute/,"Rte",resp);
                         gsub(/[Rr]oute/,"Rte",ty);
                         gsub(/[Gg]ateway/,"Gtwy",req);
                         gsub(/[Gg]ateway/,"Gtwy",resp);
                         gsub(/[Gg]ateway/,"Gtwy",ty);

                         gsub(/keyFingerprint:..:..:..:..:..:..:..:..:..:..:..:..:..:../,"keyFngPrnt..",req);
                         gsub(/keyFingerprint:..:..:..:..:..:..:..:..:..:..:..:..:..:../,"keyFngPrnt..",resp);
                         gsub(/AKIA........./,"AKIA..",req);
                         gsub(/AKIA........./,"AKIA..",resp);
                         gsub(/........-....-....-....-............/,"...",req);
                         gsub(/........-....-....-....-............/,"...",resp);
                         gsub(/[Cc]onsole/,"Con",ty);
                         gsub(/[Cc]onsole/,"Con",resp);
                         gsub(/[Cc]onsole/,"Con",req);
                         gsub(/[Ss]ecurity/,"Sec",resp);

                         gsub(/[Ss]ecurity/,"Sec",req);
                         gsub(/functionName/,"fName",resp);
                         gsub(/functionName/,"fName",req);

                         gsub(/instance/,"inst",req);
                         gsub(/instance/,"inst",resp);
                         gsub(/group/,"grp",req);
                         gsub(/group/,"grp",resp);
                         gsub(/Profile/,"Prf",req);
                         gsub(/Profile/,"Prf",resp);
                         gsub(/[Nn]etwork/,"net",req);
                         gsub(/[Nn]etwork/,"net",resp);
                         gsub(/[Ii]nterface/,"inter",req);
                         gsub(/[Ii]nterface/,"inter",resp);
                         if (match(BE,/no/) > 0) {
                             gsub(/Configuration/,"Config",en);
                             gsub(/Config/,"Cfg",en);
                             gsub(/[Dd]elete/,"Del",en);
                             gsub(/[Ll]aunch/,"Lnch",en);
                             gsub(/[Cc]hange/,"Chg",en);
                             gsub(/[Ss]caling/,"Scl",en);
                             gsub(/Permission/,"Perm",en);
                             gsub(/Function/,"Func",en);
                             gsub(/Resource/,"Res",en);
                             gsub(/Update/,"Upd",en);
                             gsub(/Create/,"Cr",en);
                             gsub(/[Cc]onsole/,"Con",en);
                             gsub(/[Ii]nstance/,"Inst",en);
                             gsub(/[Aa]ssociation/,"Assoc",en);
                             gsub(/[Mm]odify/,"Mod",en);
                             gsub(/[Aa]ssociate/,"Assoc",en);
                             gsub(/[Gg]roup/,"Grp",en);
                             gsub(/[Aa]uthorize/,"Auth",en);
                             gsub(/[Gg]ateway/,"Gtwy",en);
                             gsub(/[Aa]ttach/,"Atch",en);
                             gsub(/[Aa]llocate/,"Alloc",en);
                             gsub(/[Ss]ecurity/,"Sec",en);
                             gsub(/[Rr]oute/,"Rte",en);
                             gsub(/[aeiou]/,"",en);
                             en=cutpad(en,12);
                         }
                         else {
                             NOTHING=0
                             if (match(SMY,/^no/) > 0) {
                                  en=cutpad(en,18);
                             }
                         }

                         if (match(BN,/no/) > 0) {
                             name=cutpad(name,10);
                         }

                         ty=cutpad(ty,8);

                         sub(/arn:aws:iam::......../,"arn:aws:iam::",req);
                         sub(/arn:aws:iam::......../,"arn:aws:iam::",resp);

                    }
                    else {

                         ty=cutpad(ty,18);
                    }
                    if (length(req) > TL) req=substr(req,1,TL) "(TRUNCATED)";
                    if (length(resp) > TL) resp=substr(resp,1,TL) "(TRUNCATED)";
                    # print "-"
                    # print "acct","time","name","eventtype","eventname","req","resp"
                    if (match(SMY,/^yes/) != 0) {
                         print trim(ACCT), time, name, en
                    }
                    else {
                         print trim(ACCT), REG, time, name, ty, en, "IN-" req
                         print trim(ACCT), REG, time, name, ty, en, "OU-" resp
                    }
                    if (match(RAW,/^yes/) != 0) print $0 "\n\n"
               }' > ffed
               cat ffed
#        echo "ffed"  | mailx -q ffed -r $NOTIFYFROM -s "Data"  $NOTIFYFROM
#                > $Tmp
# 
#                if [ "$SUMMARY" == "yes" ] ; then
#                     cat $Tmp | tee -a cuureport.txt
#                else
#                     cat $Tmp | sort -k 5,5 -k 4,4 | tee -a cuureport.txt
#                fi
fi

# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: UTILITY Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "UTILNEWPOLICYDOC,NEWPOLICYDOC" "Create new this.json from policydoc.json template"; if [ $bCmd -gt 0 ] ; then
     cp policydoc.json this.json
fi
COMMANDPROC "UTILCATPOLICYDOC,CATPOLICYDOC,SHOWPOLICYDOC" "Display policydoc.json template"; if [ $bCmd -gt 0 ] ; then
     cat policydoc.json
fi
COMMANDPROC "UTILTIME,TIME" "Print time window"; if [ $bCmd -gt 0 ] ; then
     print "WINDOW START TIME  "$ISOAGO"  "$AGO
     print "WINDOW END TIME    "$ISOANON"  "$ANON
fi
COMMANDPROC "UTILCONSOLE,CONSOLE" "Open AWS Console" "-a" "v1.0"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     THISACCT=`aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"`
     xdg-open  "https://$THISACCT.signin.aws.amazon.com/console/" >/dev/null 2>&1
fi
COMMANDPROC "UTILACCOUNTNUMBER,ACCOUNTNUMBER" "Print account number" "" "v1.1"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     THISACCT=`aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"`
     print $THISACCT
     print "https://$THISACCT.signin.aws.amazon.com/console/"
     $AWS iam list-account-aliases

fi
COMMANDPROC "UTILOGINURL,LOGINURL,LOGIN" "Print console login URL" "-a" "v1.0"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     THISACCT=`aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"`
     print "https://$THISACCT.signin.aws.amazon.com/console/"
fi
COMMANDPROC "UTILALIAS,ALIAS" "Command Alias" "-a"; if [ $bCmd -gt 0 ] ; then
     print "Aliases for "$THING": "${COMMANDALIASES[$THING]}
fi
COMMANDPROC "UTILALIASLS,ALIASLIST" "Command Aliases" "-a"; if [ $bCmd -gt 0 ] ; then
     for ITEM in ${COMMANDALIASES[@]}; do
         echo "$ITEM" | gawk -F, '@include "trim.awk"; {printf "%-32s %-24s %-24s %-24s\n", trim($1), trim($2), trim($3), trim($4) }'
     done
fi
COMMANDPROC "UTILSET,SET" "Set & show config/env variables" "-a" "v1.5"; if [ $bCmd -gt 0 ] ; then
     print ""
     print ""
     print "PASSWORD:          "$PASSWORD
     print ""
     print "MYCUUTAG:          "$MYCUUTAG
     print "CUUHOME:           "$CUUHOME
     print "REGION:            "$REGION
     print "PUBLISH BUCKET:    "$PUBLISHBUCKET
     print "EXPIRES:           "$EXPIRES
     print "TIMEFACTOR:        "$TIMEFACTOR
     print "WINDOW START TIME  "$ISOAGO
     print "WINDOW END TIME    "$ISOANON
     print ""
     print "MYCIDR             "$MYCIDR
     print ""
     print "P1                 "$P1
     print "P2                 "$P2
     print "P3                 "$P3
     print "P4                 "$P4
     print "P5                 "$P5
     print "G1                 "$G1
     print "G2                 "$G2
     print "G3                 "$G3
     print "G4                 "$G4
     print "G5                 "$G5
     print ""
     getconfigecho "LASTVPCID";   LASTVPCID=$CONFIGITEM
     getconfigecho "LASTSUBNET1"; LASTSUBNET1=$CONFIGITEM
     getconfigecho "LASTSUBNET2"; LASTSUBNET2=$CONFIGITEM
     getconfigecho "LASTSGID";    LASTSGID=$CONFIGITEM
     print ""
     print "Region Lists"
     print "US     "$USREGIONLIST
     print "EUROPE "$EUROPEREGIONLIST
     print "GLOBAL "$GLOBALREGIONLIST

     print ""
     getconfigecho "LASTINSTANCEID";    LASTINSTANCEID=$CONFIGITEM
     getconfigecho "LASTIP";            LASTIP=$CONFIGITEM
     getconfigecho "LASTSSH";           LASTSSH=$CONFIGITEM
     getconfigecho "LASTSCP";           LASTSCP=$CONFIGITEM
     print ""
     egrep "^NAMESTRING" ~/.cuu.txt | gawk -F= '{printf("%-18s %s\n",$1,$2);}'
     print ""
     getconfigecho "LASTBUCKET";  LASTBUCKET=$CONFIGITEM
     print ""
     print "LAST COMMAND       $LASTCOMMAND"
     THISACCT=`aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"`
     print "CONSOLE     https://$THISACCT.signin.aws.amazon.com/console/"
     echoitem "THISDAY"
     print $LASTMONTHSTART
     print $LASTMONTHEND
     print $THISMONTHSTART
     print $THISMONTHEND
     print $THISYEAR
     print $THISYEAREND
     print $NEXTYEAR
     print $NEXTYEAREND
     print $USREGIONLIST
     print $EUROPEREGIONLIST
     print $GLOBALREGIONLIST
     print $RAN

fi
# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: TEST Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "TEST,HELLOWORLD" "Hello World Test Command"; if [ $bCmd -gt 0 ] ; then
print "Test Mode"
#      LRAN=`tr -cd \#_[:alnum:] < /dev/urandom |  fold -w 18 | head -1 |gawk '{print $0 "!!"}'`
#      assert "$ACCOUNT" "Profile not specified"
#      aws --profile $ACCOUNT --region $REGION ec2 describe-instances --output table \
#                             --query 'Reservations[].Instances[].[Tags[?Key==`Name`] | [0].Value,InstanceId,State.Name,InstanceType]'
#       echo "Welcome to LinuxCareer.com" | openssl enc -base64
#       echo "V2VsY29tZSB0byBMaW51eENhcmVlci5jb20K" | openssl enc -base64 -d
#      while [[ $i -lt 10000 ]] ; do
#            LRAN=`tr -cd \#_[:alnum:] < /dev/urandom |  fold -w 18 | head -1 |gawk '{print $0 "!!"}'`
#            print $LRAN >> /tmp/big
#            (( i += 1 ))
#        done
#     wipeSERVICESPECIFICCREDENTIALSa
    DOTCUULIST
fi



COMMANDPROC "TEST2" "Test Command Two"; if [ $bCmd -gt 0 ] ; then
     print "$AWS ec2 run-instances --image-id $AMI --count 1 --instance-type m5.large --key-name $KP --security-group-ids $SGID --subnet-id $SUBNET1"
     IID=`$AWS ec2 run-instances --image-id $AMI --count 1 --instance-type m5.large --key-name $KP --security-group-ids $SGID --subnet-id $SUBNET1 --query "Instances[0].InstanceId"`
     IP=`$AWS  ec2 describe-instances --instance-id $INSTANCEID --query "Reservations[0].Instances[0].PublicIpAddress"`
     $AWS ec2 describe-instances --instance-id $INSTANCEID --query "Reservations[0].Instances[0].State.Name"
     print $IID
     print $IP
     print $AWS" ec2 terminate-instances --instance-id "$IID
     print "ssh -i "$KP" ec2-user@"$IP
     NOTHING=0
fi
# -----------------------------------------------------------------------------------------------------------------------
# -- THESE TWO COMMANDPROCs MUST ALWAYS BE THE LAST ONES DEFINED
# -- THESE TWO COMMANDPROCs MUST ALWAYS BE THE LAST ONES DEFINED
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "UTILCOMMANDLS,UTILCOMMANDLIST,COMMANDLIST" "List Commands"; if [ $bCmd -gt 0 ] ; then
     cat $CuuCommandFile
fi
COMMANDPROC "UTILCOMMANDS,COMMANDS" "Command help"; if [ $bCmd -gt 0 ] ; then
     COMMANDLIST
fi

COMMANDPROC "HELP" "Help User Commands"; if [ $bCmd -gt 0 ] ; then
     COMMANDLIST $ARG2
fi
# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET END
# -----------------------------------------------------------------------------------------------------------------------

if [ $gCmd -eq 0 ] ; then
    print "CUU Error!"
    print "     \""$COMMAND"\" is not a cuu command"
else
    LASTCOMMAND=`history -0`
fi

exit 0
