#!/usr/bin/ksh
Tmp="/tmp/$$"
TmpDir="/tmp/dir$$"
CuuCommandFile="/tmp/CuuCommandFile$$"
trap 'rm -f "$Tmp" >/dev/null 2>&1' 0
trap "exit 2" 1 2 3 13 15
rm $Tmp  >/dev/null 2>&1
# ---------------------------------------------------------------------------------------------------------
#  / ___| | | | | | |            / \   _ __      / \ \      / / ___|   / ___| |   |_ _| |_   _|__   ___ | |
# | |   | | | | | | |  _____    / _ \ | '_ \    / _ \ \ /\ / /\___ \  | |   | |    | |    | |/ _ \ / _ \| |
# | |___| |_| | |_| | |_____|  / ___ \| | | |  / ___ \ V  V /  ___) | | |___| |___ | |    | | (_) | (_) | |
#  \____|\___/ \___/          /_/   \_\_| |_| /_/   \_\_/\_/  |____/   \____|_____|___|   |_|\___/ \___/|_|
# ---------------------------------------------------------------------------------------------------------
#                               | |/ / ___|| | | | |  _ \ _   _| | ___  ___| | | |
#                               | ' /\___ \| |_| | | |_) | | | | |/ _ \/ __| | | |
#                               | . \ ___) |  _  | |  _ <| |_| | |  __/\__ \_|_|_|
#                               |_|\_\____/|_| |_| |_| \_\\__,_|_|\___||___(_|_|_)
# ---------------------------------------------------------------------------------------------------------
#                                / ___| __ ___      _| | __ |  _ \ _   _| | ___  ___ 
#                               | |  _ / _` \ \ /\ / / |/ / | |_) | | | | |/ _ \/ __|
#                               | |_| | (_| |\ V  V /|   <  |  _ <| |_| | |  __/\__ \
#                                \____|\__,_| \_/\_/ |_|\_\ |_| \_\\__,_|_|\___||___/
# ---------------------------------------------------------------------------------------------------------
# README.md Start
# CUU - An AWS CLI Wrapper
# M <pre>
usage(){
     print ""
     print "Usage: cuu [-h][-a][-u][-p][-t][-d][-D][-j][-F][-B][-E][-R][-Z][-i][-c]"
     print "      -a  operand:  cli profile name      (from .aws/config)"
     print "      -u  operand:  username"
     print "      -p  operand:  password    (default may be set in ~/.cuu.txt)"
     print "      -t  operand:  thing name  (specify a resource or object name)"
     print "      -T  operand:  time window in hours (to specify now-T to now)"
     print "      -h  display usage"
     print "      -d  limits abbreviations"
     print "      -D  Specify a document\file to upload (e.g. a policy document)"
     print "      -j  use long datetime fields"
     print "      -F  force mode, do not confirm any command"
     print "      -B  show full user names"
     print "      -E  show event names"
     print "      -R  show raw records in output"
     print "      -Z  output iso time"
     print "      -i  interactive mode ('q' to quit)"
     print "      -c  command:"
     print "          Optional :UL: may specify a user, a list of users, a file, or the keyword ALLUSERS"
     print "          Optional :PL: may specify a profile, a list of profiles, or the special keyword ALLPROFILES"
     print "          ----------------------------------------------------------------------------------------------"
     print "Quick Menus"
     print "     dum    describeusermenu         -a            Interactive user menu, Describes users"
     print "     ctm    cloudtrailmenu           -a            Interactive user menu, CloudTrail 48Hr Audit Report"
     print "User Commands"
     print "     du     describeusers            -a :PL:       List users and their attached groups and policies" 
     print "     lu     listusers                -a :PL:       List users" 
     print "     lu2    listusers2               -a :PL:       List users simple form" 
     print "            deleteuser               -a -u         Delete the user"
     print "     du     describeusers            -a :PL:       List users and their attached groups and policies" 
     print "            createuser               -a -u -p      Creates with no privledges"
     print "            createadminuser          -a -u -p      Creates a user with Administor Access"
     print "            createreadonlyuser       -a -u -p      Creates a user with Read Only"
     print "     scram  scrampassword            -a -u         Assignis the user an unknown (scrammed) password"
     print "     cp     changepassword           -a -u -p      Changes a user password"
     print "                                                   For commands above, User will change password"
     print "                                                   after first login.  Password may be set in ~/.cuu.txt"
     print "Access Key Commands"
     print "     lak    listaccesskeys           -a -u         List the users access keys"
     print "     rak    replaceaccesskeys        -a -u         Deletes all keys for user, Creates a single new key"
     print "     cak    createaccesskey          -a -u         Creates an access key for the user"
     print "     dak    deleteaccesskeys         -a -u         Deletes all the users access keys"
     print "Policy Commands"
     print "            createpolicy             -a -t         Create new policy (-t) with policydoc.json template"
     print "            deletepolicy             -a -t         Delete policy by name (-t)"
     print "     lp     listallpolicies          -a            Lists all defined policies"
     print "     lpl    listlocalpoliciesl       -a            Lists local (user managed) policies"
     print "     lpa    listawspolicies          -a            Lists aws policies"
     print "     upp    updatepolicy             -a -t -D      Update local policy name (-t) with policy doc (-D, use file://)"
     print "            attachpolicyset          -a -u         Attach policy ARNs listed in file policyset.txt to user (-u)"
     print "            removepolicyset          -a -u         Removes policy ARNs listed in policyset.txt to user (-u)"
     print "     gap    getallpolicies           -a <-t regex> Get all policy docs defined for this profile"
     print "     glp    getlocalpolicies         -a <-t regex> Get all local policy docs defined for this profile"
     print "                                                   Use regex for a specific policy"
     print "            listuserpolicies         -a -u"
     print "            detachuserpolicies       -a -u"
     print "            attachpolicytouser       -a -u -t      Specify the policy arn (-t)"
     print "Role Commands"
     print "     lr     listroles                -a            List all roles defined" 
     print "Group Commands"
     print "     lg     listgroups               -a            List all groups defined" 
     print "            listusergroups           -a -u         Lists groups associated with user"
     print "            listusersingroup         -a -u -t      Lists the users in  group (-t)"
     print "            addtogroup               -a -u -t      Add user to a group (-t)"
     print "            removerfromgroup         -a -u -t      Remove user group (-t)"
     print "            removerfromallgroups     -a -u         Remove user from all groups"
     print "VPC and EC2 Commands"
     print "            ec2                      -a            List instances and securitygroups"
     print "            ec2-sg                   -a            Security groups detail listing"
     print "            ec2-sgsum                -a            Security groups summary listing (incl. empty SGs)"
     print "     vpc2   createvpc-2subnets       -a -r         Creates an internet accessible VPC with Pub\Priv Subnets"
     print "            deletevpc             -a -r -t <vpc>   Deletes a VPC (-t vpcid)"
     print "            createkeypair            -a -u         Creates a Key Pair"
     print "CloudTrail Commands"
     print "     ca     cloudtrail-active     -a -T         Lists active users in time window"
     print "     cu     cloudtrail-user       -a -T -u :UL: Lists user activity in time window"
     print "     cz     cloudtrail-allusers   -a -T         Runs cloudtrail-users for all users"
     print "     cw     cloudtrail-watch      -T            Runs cloudtrail-users for each profile in PROFILELIST"
     print "                                                   on the WATCHUSER in ~/.cuu.txt"
     print "                                                   -T specifies time window in hour"
     print "Specific Policy Commands"
     print "            iamuserchangepassword-add    -a -u :UL: Adds Policy"
     print "            iamuserchangepassword-remove -a -u :UL: Removes Policy"
     print "Other"
     print "            time                     -T            Print time window"
     print "            accountnumber            -a            Prints the account number for profile (-a)"
     print "            commands                               Lists all the cuu commands"
     print ""
     print "Note: Abbreviations are applied to output fields to limit line length"
     print "            -d will limit abbreviations"
}
# M </pre>
# README.md End
commandABBREVIATIONS() {
	case "$COMMAND" in
            LR)                    COMMAND="LISTROLES" ;;
            VPC2)                  COMMAND="CREATEVPC-2SUBNETS" ;;
            CTM)                   COMMAND="CLOUDTRAILMENU" ;;
            CTMENU)                COMMAND="CLOUDTRAILMENU" ;;
            DUMENU)                COMMAND="USERMENU" ;;
            UM)                    COMMAND="USERMENU" ;;
            DUM)                   COMMAND="USERMENU" ;;
            CAK)                   COMMAND="CREATEACCESSKEYS" ;;
            RAK)                   COMMAND="REPLACEACCESSKEYS" ;;
            LAK)                   COMMAND="LISTACCESSKEYS" ;;
            DAK)                   COMMAND="DELETEACCESSKEYS" ;;
            GLP)                   COMMAND="GETLOCALPOLICIES" ;;
            GAP)                   COMMAND="GETALLPOLICIES" ;;
            LAP)                   COMMAND="LISTALLPOLICIES" ;;
            LLP)                   COMMAND="LISTLOCALPOLICIES" ;;
            LAWSP)                 COMMAND="LISTAWSPOLICIES" ;;
            CP)                    COMMAND="CHANGEPASSWORD" ;;
            CA)                    COMMAND="CLOUDTRAIL-ACTIVE" ;;
            CU)                    COMMAND="CLOUDTRAIL-USER" ;;
            CZ)                    COMMAND="CLOUDTRAIL-USER"
                                   USERNAME="ALL"
                                   ;;
            CW)                    COMMAND="CLOUDTRAIL-WATCH" ;;
            LU)                    COMMAND="LISTUSERS" ;;
            LU2)                   COMMAND="LISTUSERS2" ;;
            DU)                    COMMAND="DESCRIBEUSERS" ;;
            DESCRIBEUSER)          COMMAND="DESCRIBEUSERS" ;;
            LG)                    COMMAND="LISTGROUPS" ;;
            LR)                    COMMAND="LISTROLES" ;;
            SCRAM)                 COMMAND="SCRAMPASSWORD" ;;
	esac
}
# ---------------------------------------------------------------------------------------------------------
# MACROS
# ---------------------------------------------------------------------------------------------------------
window() {
     print "WINDOW START TIME  "$ISOAGO"  "$AGO
     print "WINDOW END TIME    "$ISOANON"  "$ANON
}
createACCESSKEY() {
     assertACCOUNTandUSERNAME
     aws --profile $ACCOUNT --output text iam create-access-key --user-name $USERNAME > $Tmp
     cat $Tmp | gawk -v A=$ACCOUNT -v U=$USERNAME '@include "cuu.awk"; { print configrecord($0,A,U,A); }'
}
createUSER() {
     assertACCOUNTandUSERNAMEandPASSWORD
     aws --profile $ACCOUNT iam create-user --user-name $USERNAME
     aws --profile $ACCOUNT iam create-login-profile --user-name $USERNAME --password $PASSWORD  --password-reset-required
     aws --profile $ACCOUNT iam attach-user-policy --user-name $USERNAME --policy-arn arn:aws:iam::aws:policy/IAMUserChangePassword
}
deleteUSER() {
     assertACCOUNTandUSERNAME
     aws --profile $ACCOUNT iam delete-login-profile --user-name $USERNAME 
     aws --profile $ACCOUNT iam delete-user --user-name $USERNAME 
}
wipeUSER() {
     assertACCOUNTandUSERNAME
     wipePOLICIES
     wipeGROUPS
     wipeACCESSKEYS
}
wipePOLICIES() {
     assertACCOUNTandUSERNAME
     LISTPOLICIES=`aws --profile $ACCOUNT iam list-attached-user-policies --user-name $USERNAME --query "AttachedPolicies[*].[PolicyArn]" --output text`
     for ITEM in $LISTPOLICIES; do
          aws --profile $ACCOUNT iam detach-user-policy --user-name $USERNAME --policy-arn $ITEM 
     done
     LISTPOLICIES=""
 }
wipeGROUPS() {
     assertACCOUNTandUSERNAME
     GROUPLIST=`aws --profile $ACCOUNT iam list-groups-for-user --user-name $USERNAME --query "Groups[*].[GroupName]" --output text`
     confirm
     for ITEM in $GROUPLIST; do
          aws --profile $ACCOUNT iam remove-user-from-group --user-name $USERNAME --group-name $ITEM 
     done
     GROUPLIST=""
}
wipeACCESSKEYS() {
     assertACCOUNTandUSERNAME
     ACCESSKEYLIST=`aws --profile $ACCOUNT iam list-access-keys --user-name $USERNAME  --query "AccessKeyMetadata[*].[AccessKeyId]" --output text`
     for ITEM in $ACCESSKEYLIST; do
          aws --profile $ACCOUNT iam delete-access-key --user-name $USERNAME --access-key-id $ITEM
     done
     ACCESSKEYLIST=""
}

buildUSERLIST() {
     USERLIST=""
     if [ "$USERNAME" == "USERLIST" ] ; then
          USERLIST=`cat userlist`
     else
          if [ "$USERNAME" == "" ] ; then
              confirmprompt "You have selected all the users in "$1
              USERLIST=`aws --profile $1 iam list-users --query "Users[*].[UserName]" --output text`
          else
              USERLIST=$USERNAME
          fi
     fi
}
buildPROFILELIST() {
     PROFILELIST=""
     if [ "$ACCOUNT" == "ACCOUNTLIST" ] ; then
          PROFILELIST=`cat profilelist`
     else
          if [ "$ACCOUNT" == "" ] ; then
              confirmprompt "You have selected all the accounts from ~/.cuu.txt"
              PROFILELIST=`gawk -v  w=PROFILELIST -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
          else
              PROFILELIST=$ACCOUNT
          fi
     fi
}
groupREMOVE() {
     aws --profile $ACCOUNT iam remove-user-from-group --user-name $USERNAME --group-name $1
}
optionalGROUPADD() {
     if [ "$THING" != "" ] ; then
           aws --profile $ACCOUNT iam add-user-to-group --group-name $THING  --user-name $USERNAME
     fi
}
groupADD() {
     aws --profile $ACCOUNT iam add-user-to-group      --user-name $USERNAME --group-name $1
}
groupsetREMOVE() {
               THISSET=`cat groupset.txt | egrep -v "(^#)|(^$)" | egrep arn[:]aws[:]iam`
               confirmset
               for ITEM in $THISSET; do
                    groupREMOVE $ITEM
               done
               THISSET=""
}
groupsetATTACH() {
               THISSET=`cat groupset.txt | egrep -v "(^#)|(^$)" | egrep arn[:]aws[:]iam`
               confirmset
               for ITEM in $THISSET; do
                    groupADD $ITEM
               done
               THISSET=""
}
policysetREMOVE() {
               THISSET=`cat policyset.txt | egrep -v "(^#)|(^$)" | egrep arn[:]aws[:]iam`
               confirmset
               for ITEM in $THISSET; do
                    policyREMOVE $ITEM
               done
               THISSET=""
}
policysetATTACH() {
     THISSET=`cat policyset.txt | egrep -v "(^#)|(^$)" | egrep arn[:]aws[:]iam`
     confirmset
     for ITEM in $THISSET; do
          policyATTACH $ITEM
     done
     THISSET=""
}

policyREMOVE() {
               assertACCOUNTandUSERNAME
               if [ "$USERNAME" == "USERLIST" ] ; then
                   LIST=`cat userlist`
               else
                    LIST=$USERNAME
               fi
               for USER in $LIST; do
                    print $USER $1
                    aws --profile $ACCOUNT iam detach-user-policy --policy-arn $1 --user-name $USER
               done
               LIST=""
}
policyATTACH() {
     assertACCOUNTandUSERNAME
     if [ "$USERNAME" == "USERLIST" ] ; then
         LIST=`cat userlist`
     else
         LIST=$USERNAME
     fi
     for USER in $LIST; do
          print $USER $1
          aws --profile $ACCOUNT iam attach-user-policy --policy-arn $1 --user-name $USER
     done
     LIST=""
}

clean() {
    rm -rf $Tmp
    rm -rf ./cuu.out
    rm -rf ./cuureport.txt
}
awsnull() {
    NOTHING=0;
}
awsdbg() {
     printf "DBGOUT:   aws %s %s %s %s %s %s %s %s %s %s %s %s\n" $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12
}
assertfile() {
    if [ -a $1 ] ; then
         NOTHING=0
    else
         print "File "$1" Not Found"
         exit 1
    fi
}
asserte() {
    print "Checking: "$1
    if [ "$1" == "" ] ; then
         print $2
         exit 1
    fi
}
assert() {
    if [ "$1" == "" ] ; then
         print $2
         exit 1
    fi
}
assertACCOUNTandUSERNAME() {
     assert "$ACCOUNT" "Profile not specified"
     assert "$USERNAME" "User not specified"
}
assertACCOUNTandUSERNAMEandPASSWORD() {
     assert "$ACCOUNT"  "Profile not specified"
     assert "$USERNAME" "Username not specified"
     assert "$PASSWORD" "Password not specified"
}
assertACCOUNTandUSERNAMEandTHING() {
     assert "$ACCOUNT"  "Profile not specified"
     assert "$USERNAME" "Username not specified"
     assert "$THING"    $1" not specified"
}
assertACCOUNTandTHING() {
     assert "$ACCOUNT"  "Profile not specified"
     assert "$THING"    $1" not specified"
}
antiassert() {
    if [ "$1" != "" ] ; then
         print $2
         exit 1
    fi
}
confirmset() {
     print ""
     for ITEM in $THISSET; do
          print "   "$ITEM
     done
     confirm
}
confirmprompt() {
     print "   "$1
     confirm
}
confirm() {
     if [ "$FORCE" != "yes" ] ; then
          print -n "   For "$ACCOUNT":  Enter '10111' to confirm >> "
          read STRIN
          if [ "$STRIN" != "10111" ] ; then
               print "   Exiting - No Match"
               exit 1
          fi
     fi
}
typeset -u COMMAND
COMMAND=""
USERNAME=""
ACCOUNT=""
CREATEUSER=""
THING=""
COUNT=""
ACCTNUMBER=""
IN=""
OUT=""
FORCE=""
LOOP="no"
GROUPREMOVE="" 
POLICYADD="" 
MYCIDR="" 
VPCID="" 
IGWID="" 
AMI="" 
REGION="us-east-1"
RAN=`tr -cd \#_[:alnum:] < /dev/urandom |  fold -w 18 | head -1 |gawk '{print $0 "!!"}'`
PASSWORD=`gawk -v w=PASSWORD -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
WATCHUSER=`gawk -v w=WATCHUSER -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
WATCHPROFILE=`gawk -v w=WATCHPROFILE -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
PROFILELIST=`gawk -v w=PROFILELIST -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
POLICYLIST=`gawk -v  w=POLICYLIST -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
GROUPREMOVE=`gawk -v w=GROUPREMOVE -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
POLICYADD=`gawk -v   w=POLICYADD -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
TIMEFACTOR=`gawk -v  w=TIMEFACTOR -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
MYCIDR=`gawk -v  w=MYCIDR -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
VPCID=`gawk -v  w=VPCID -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
IGWID=`gawk -v  w=IGWID -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
SUBNET1=`gawk -v  w=SUBNET1 -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
SUBNET2=`gawk -v  w=SUBNET2 -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
AMI=`gawk -v  w=AMI -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
KP=`gawk -v  w=KP -F= '{b="";gsub(/[;].*$/,"",$0);gsub(/[ ]*$/,"",$0);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`

DETAILFLAG=""
SHOWRAW="no" 
ISOTIME="no" 
BIGNAMES="no" 
BIGEVENTS="no" 
SUMMARY="no" 
while getopts "jr:Ff:D:dn:c:Ru:a:p:t:ihbSZBET:" arg
do
	case $arg in
            S) SUMMARY="yes" ;;
            B) BIGNAMES="yes" ;;
            E) BIGEVENTS="yes" ;;
            Z) ISOTIME="yes" ;;
            r) REGION=$OPTARG  ;;
            F) FORCE="yes" ;;
            f) FILE=$OPTARG ;;
            i) LOOP="yes" ;;
            d) DETAIL="yes"; DETAILFLAG=" -d " ;;
            D) DOCUMENT=$OPTARG ;;
            n) COUNT=$OPTARG ;;
            T) TIMEFACTOR=$OPTARG ;;
            c) COMMAND=$OPTARG ;;
            u) USERNAME=$OPTARG
               if [ "$USERNAME" == "ALLUSERS" ] ; then
                  assert "$ACCOUNT"  "Profile not specified"
                  USERNAME=`aws --profile $ACCOUNT iam list-users --query "Users[*].[UserName]" --output text`
                  print "" 
                  print "   You are operating on all the users in the account"
                  print "" 
                  echo $USERNAME
                  print "" 
                  confirm
                  print "" 
               fi
               ;;
            R) SHOWRAW="yes" ;;
            p) PASSWORD=$OPTARG ;;
            t) THING=$OPTARG ;;
	    h) usage; exit 0 ;;
            a) ACCOUNT=$OPTARG
               if [ "$ACCOUNT" == "ALL" ] ; then
                   ACCOUNT=$PROFILELIST
               fi
               if [ "$ACCOUNT" == "ALLACCOUNTS" ] ; then
                   ACCOUNT=$PROFILELIST
               fi
               if [ "$ACCOUNT" == "LIST" ] ; then
                   ACCOUNT=$PROFILELIST
               fi
               ;;
	    *) exit 0 ;;
	esac
done
shift $(($OPTIND - 1))


if [ $# -eq 1 ] ; then
     if [ "$COMMAND" == "" ] ; then
          COMMAND=$1
     fi
fi

while [[ 0 -eq 0 ]]; do
commandABBREVIATIONS
# -----------------------------------------------------------------------------------------------------------------------
# -- AWS CLI command line prefix setup
# -----------------------------------------------------------------------------------------------------------------------
AWS="aws --profile $ACCOUNT --region $REGION --output text "
AWSJ="aws --profile $ACCOUNT --region $REGION --output json "

if [ "$TIMEFACTOR" == "" ] ; then
     TIMEFACTOR=24
fi
ISOAGO=`gawk -v T=$TIMEFACTOR '@include "cuu.awk"; BEGIN { print isoyesterhour(T);}'`
ISOANON=`gawk '@include "cuu.awk"; BEGIN { print isonow();}'`
AGO=`gawk  -v T=$ISOAGO  '@include "cuu.awk"; BEGIN { print isotolocal(T, "%m/%d/%Y %I:%M:%S%p");}'`
ANON=`gawk -v T=$ISOANON '@include "cuu.awk"; BEGIN { print isotolocal(T, "%m/%d/%Y %I:%M:%S%p");}'`
# -----------------------------------------------------------------------------------------------------------------------
# Notes
# https://aws.amazon.com/blogs/security/a-simple-way-to-export-your-iam-settings/
# aws --profile ECD3 iam get-account-authorization-details 
#   aws --profile ECD3 iam list-policies
#   aws --profile ECD3 iam list-policies
#   aws --profile ECD3 iam list-policies --scope Local
#   sz = "aws --profile " A " iam delete-access-key --user-name " U " --access-key-id  " $2
#   sz = "aws --profile " A " iam list-policy-versions --policy-arn " $2
#   aws --profile $ACCOUNT -output json iam create-policy-version --policy-arn $T --policy-document file://$FILE --set-as-default
#   aws --profile $ACCOUNT iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/ReadOnlyAccess         --user-name $USERNAME
#   aws --profile $ACCOUNT iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/CloudWatchFullAccess   --user-name $USERNAME
#   aws --profile $ACCOUNT iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/AWSCodeCommitPowerUser --user-name $USERNAME
# arn:aws:iam::aws:policy/AWSCodeCommitPowerUser
# aws --profile $ACCOUNT --output json --region $REGION ec2 describe-vpcs
# -----------------------------------------------------------------------------------------------------------------------

# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND PROCESSOR: 
# -----------------------------------------------------------------------------------------------------------------------
bCmd=0
gCmd=0
rm -rf $CuuCommandFile  >/dev/null 2>&1
COMMANDPROC() {
     bCmd=0
     print $1 >> $CuuCommandFile
     if [ "$COMMAND" == $1 ] ; then
         bCmd=1
         gCmd=1
     else
         bCmd=0
     fi
     return bCmd
}
# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: TEST Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "HELLOWORLD"; if [ $bCmd -gt 0 ] ; then
     print "Hello World!"
     NOTHING=0
fi
# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: TEST Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "TEST"; if [ $bCmd -gt 0 ] ; then
     LIST=`$AWS ec2 describe-vpcs --query "Vpcs[].VpcId"`
     for ITEM in $LIST; do
          print $ITEM
          print "-------------------------------------------"
          $AWS ec2 describe-security-groups --filters "Name=vpc-id,Values=$ITEM" --query "SecurityGroups[].GroupId"
     done
     NOTHING=0
fi

COMMANDPROC "TEST2"; if [ $bCmd -gt 0 ] ; then
     IID=`$AWS ec2 run-instances --image-id $AMI --count 1 --instance-type t2.micro --key-name $KP --security-group-ids $SGID --subnet-id $SUBNET1 --query "Instances[0].InstanceId"`
     IP=`$AWS  ec2 describe-instances --instance-id $INSTANCEID --query "Reservations[0].Instances[0].PublicIpAddress"`
     $AWS ec2 describe-instances --instance-id $INSTANCEID --query "Reservations[0].Instances[0].State.Name"
     print $IID
     print $IP
     print $AWS" ec2 terminate-instances --instance-id "$IID
     print "ssh -i "$KP" ec2-user@"$IP
     NOTHING=0
fi

# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: VPC Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "DELETEVPC"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$REGION"   "Region not specified"
     assert "$THING"    "VPC ID not specified"
     VPCID=$THING
     confirm

     IGWID=`$AWS ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPCID" --query "InternetGateways[].InternetGatewayId"`
     print "IGW   "$IGWID

     RTLIST=`$AWS ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPCID" "Name=association.main,Values=false" --query "RouteTables[].RouteTableId"`
     print "RT    "$RTLIST

     LIST=`$AWS ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPCID" --query "SecurityGroups[].GroupId"`
     print $LIST
     for ITEM in $LIST; do
          aws --profile $ACCOUNT --output json --region $REGION ec2 delete-security-group --group-id $ITEM >/dev/null 2>&1
     done
     LIST=""

     LIST=`$AWS ec2 describe-subnets --filters "Name=vpc-id,Values=$VPCID" --query "Subnets[*].SubnetId"`
     for ITEM in $LIST; do
          aws --profile $ACCOUNT --output text --region $REGION ec2 delete-subnet --subnet-id $ITEM
     done
     LIST=""

     LIST=`$AWS ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPCID" "Name=association.main,Values=false" --query "RouteTables[*].Associations[*].RouteTableAssociationId"`
     for ITEM in $LIST; do
          aws --profile $ACCOUNT --output json --region $REGION ec2 disassociate-route-table  --association-id $ITEM
     done
     LIST=""

     $AWSJ ec2 delete-route-table --route-table-id $RTLIST
     $AWSJ ec2 detach-internet-gateway --internet-gateway-id $IGWID --vpc-id $VPCID
     $AWSJ ec2 delete-internet-gateway --internet-gateway-id $IGWID
     $AWSJ ec2 delete-vpc --vpc-id $VPCID

     NOTHING=0
fi

COMMANDPROC "CREATEVPC-2SUBNETS"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$REGION"   "Region not specified"
     assert "$MYCIDR"   "My CIDR not specified"
     THIS=""
     SUBNET1=""
     SUBNET2=""
     IGWID=""
     confirm

     # $AWS        ec2 describe-vpcs           --query "Vpcs[*].[VpcId,CidrBlock]"
     VPCID=`$AWS   ec2 create-vpc              --cidr-block 10.0.0.0/16 --query "Vpc.VpcId"`
     SUBNET1=`$AWS ec2 create-subnet           --vpc-id $VPCID --cidr-block 10.0.0.0/24 --query "Subnet.SubnetId"`
     SUBNET2=`$AWS ec2 create-subnet           --vpc-id $VPCID --cidr-block 10.0.1.0/24 --query "Subnet.SubnetId"`
     IGWID=`$AWS   ec2 create-internet-gateway --query "InternetGateway.InternetGatewayId"`
     $AWS          ec2 attach-internet-gateway --vpc-id $VPCID --internet-gateway-id $IGWID > $Tmp
     THIS=`$AWS    ec2 create-route-table      --vpc-id $VPCID --query "RouteTable.RouteTableId"`
     $AWS          ec2 create-route            --route-table-id $THIS --destination-cidr-block 0.0.0.0/0 --gateway-id $IGWID > $Tmp
     ASSID=`$AWS   ec2 associate-route-table   --subnet-id $SUBNET1 --route-table-id $THIS --query "AssociationId"`
     $AWS          ec2 modify-subnet-attribute --subnet-id $SUBNET1 --map-public-ip-on-launch > $Tmp
     SGID=`$AWS    ec2 create-security-group   --group-name SSHAccess --description "SG for SSH access" --vpc-id $VPCID --query "GroupId"`
     $AWSJ         ec2 authorize-security-group-ingress --group-id $SGID --protocol tcp --port 22 --cidr $MYCIDR > $Tmp
     print "VPC ID      "$VPCID
     print "VPC SUBNET1 "$SUBNET1
     print "VPC SUBNET2 "$SUBNET1
     print "SG ID       "$SGID
     print "My CIDR     "$MYCIDR
     THIS=""
     NOTHING=0
fi

# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: PUBLISH Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "PUBLISH"; if [ $bCmd -gt 0 ] ; then
     assertfile cuureport.txt
     EPOCHTIME=`date --rfc-3339=seconds |gawk '{print $1 "." $2}'`
     DSTAMP=`date '+%F%H%M%S' | sed 's/-//g'`
     FNAME="cuureport"-$EPOCHTIME".txt"
     print $FNAME
     cp cuureport.txt $FNAME
     aws --profile $ACCOUNT s3api put-object --bucket ecd3pub --key $FNAME --body $FNAME --content-type text/plain > $Tmp
     aws --profile $ACCOUNT s3 ls s3://ecd3pub --recursive
     java Gpurl us-east-1 ecd3pub $FNAME 15
fi

COMMANDPROC "WORLD"; if [ $bCmd -gt 0 ] ; then
                    assert "$ACCOUNT"  "Profile not specified"
                    LIST=`$AWS ec2 describe-regions --query "Regions[*].RegionName"`
                    for ITEM in $LIST; do
                        print "cuu -T 100 -c cu -u "$USERNAME" -r "$ITEM" -a "$ACCOUNT
                    done

fi
COMMANDPROC "WWEC2"; if [ $bCmd -gt 0 ] ; then
                    assert "$ACCOUNT"  "Profile not specified"
                    LIST=`aws ec2 describe-regions --query "Regions[*].RegionName" --output text`
                    for ITEM in $LIST; do
                    aws --profile $ACCOUNT  --region $ITEM ec2 describe-instances --query "Reservations[*].Instances[*].
                              {ST: State.Name, ID:InstanceId, TY: InstanceType}" --output text | gawk -v r=$ITEM '{print r,$0;}'
                    done

fi
# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: POLICY Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "CREATEPOLICY"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandTHING "Policy-Name"
     confirm
     aws --profile $ACCOUNT iam create-policy --policy-name $THING --policy-document file://this.json
     THIS=""
fi

COMMANDPROC "DELETEPOLICY"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandTHING "Policy-Name"
     confirm
     THIS=`aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"`
     aws --profile $ACCOUNT iam delete-policy --policy-arn "arn:aws:iam::"$THIS":policy/"$THING
     THIS=""
fi

COMMANDPROC "GETPOLICY"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$THING"    "Policy not specified"
     LIST=`$AWS iam list-policies --scope All --query "Policies[*].[join(',',[PolicyName,Arn,DefaultVersionId])]" |grep $THING |tee $Tmp`
     cat $Tmp
fi

COMMANDPROC "UPDATEPOLICY-TEST"; if [ $bCmd -gt 0 ] ; then
     THIS=`aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"`
     gawk -v A=$THIS -f thisaccount.awk $DOCUMENT | tee $Tmp
     print "file://"$Tmp
     THIS=""
fi

COMMANDPROC "UPDATEPOLICY"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$THING"    "Policy not specified"
     asserte "$DOCUMENT" "Document not specified"
     THIS=`aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"`
     ARN="arn:aws:iam::"$THIS":policy/"$THING
     LIST=`aws --profile $ACCOUNT iam list-policy-versions --output text --policy-arn $ARN --query "Versions[*].[VersionId]" |gawk -f skipfirst.awk`
     for ITEM in $LIST; do
          aws --profile $ACCOUNT iam delete-policy-version --policy-arn $ARN --version-id $ITEM
     done
     gawk -v A=$THIS -f thisaccount.awk $DOCUMENT > $Tmp
     aws --profile $ACCOUNT iam create-policy-version  --policy-arn $ARN --policy-document file://$Tmp --set-as-default
     aws --profile $ACCOUNT iam list-policy-versions --output text --policy-arn $ARN --query "Versions[*].[VersionId,CreateDate,IsDefaultVersion]" 
     THIS=""
     ARN=""
fi
COMMANDPROC "GETALLPOLICIES"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     if [ "$THING" == "" ] ; then
          LIST=`aws --profile $ACCOUNT iam list-policies --scope All --output text --query "Policies[*].[join(',',[PolicyName,Arn,DefaultVersionId])]" | tee $Tmp`
     else 
          LIST=`aws --profile $ACCOUNT iam list-policies --scope All --output text --query "Policies[*].[join(',',[PolicyName,Arn,DefaultVersionId])]" |egrep $THING |tee $Tmp`
     fi
     CT=`cat $Tmp | wc -l`
     confirmprompt $CT" Policy Document(s) will be retrieved"
     mkdir -p ./policies
     for ITEM in $LIST; do
          gNAME=`print "$ITEM" | gawk -F, '{print $1}'`
          gVER=`print "$ITEM" | gawk -F, '{print $3}'`
          gFILE="./policies/"$ACCOUNT"___"$gNAME"___"$gVER
          gARN=`print "$ITEM" | gawk -F, '{print $2}'`
          gARNFILE=`print "$ITEM" | gawk -F, '{gsub(/[/]/,"::::",$2);print "./policies/"$2}'`
          print "\nUpdate with:"
          print "cuu -a "$ACCOUNT" -c updatepolicy  -t "$gARN"   -D <file>"
          print $gARNFILE
          print "this.json"
          aws --profile $ACCOUNT --output json iam get-policy-version --policy-arn $gARN --version-id $gVER | jq .[].Document.Statement > $gARNFILE
          cp $gARNFILE this.json
     done
fi
COMMANDPROC "GETLOCALPOLICIES"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT"  "Profile not specified"
               if [ "$THING" == "" ] ; then
                    LIST=`aws --profile $ACCOUNT iam list-policies --scope Local --output text --query "Policies[*].[join(',',[PolicyName,Arn,DefaultVersionId])]" |tee $Tmp`
               else 
                    LIST=`aws --profile $ACCOUNT iam list-policies --scope Local --output text --query "Policies[*].[join(',',[PolicyName,Arn,DefaultVersionId])]" |egrep $THING |tee $Tmp`
               fi
               CT=`cat $Tmp | wc -l`
               confirmprompt $CT" Policy Document(s) will be retrieved"
               mkdir -p ./policies
               mkdir -p ./rawpolicies
               for ITEM in $LIST; do
                    gNAME=`print "$ITEM" | gawk -F, '{print $1}'`
                    gVER=`print "$ITEM" | gawk -F, '{print $3}'`
                    gARN=`print "$ITEM" | gawk -F, '{print $2}'`
                    gARNFILE=`print "$ITEM" | gawk -F, '{gsub(/[/]/,"::::",$2);print "policies/"$2}'`
                    print "\nUpdate with:"
                    print "cuu -a "$ACCOUNT" -c updatepolicy  -t "$gNAME"   -D file://"
                    print $gARNFILE
                    print $gARN
                    print "this.json"
                    aws --profile $ACCOUNT --output json iam get-policy-version --policy-arn $gARN --version-id $gVER  > $gARNFILE
                    cp $gARNFILE this.json
               done
fi
COMMANDPROC "LISTALLPOLICIES"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               clean
               for ITEM in $ACCOUNT; do
                    aws --profile $ITEM --output text iam list-policies --scope All --query "Policies[*].[Arn]" | sort
               done
fi
COMMANDPROC "LISTLOCALPOLICIES"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               clean
               for ITEM in $ACCOUNT; do
                   aws --profile $ITEM --output text iam list-policies --scope Local --query "Policies[*].[PolicyName,UpdateDate,DefaultVersionId,Arn]" | column -t
               done
fi
COMMANDPROC "LISTAWSPOLICIES"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               clean
               for ITEM in $ACCOUNT; do
                    aws --profile $ITEM --output text iam list-policies --scope AWS --query "Policies[*].[PolicyName,UpdateDate,DefaultVersionId,Arn]" | column -t
               done
fi

COMMANDPROC "ATTACHPOLICYSET"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               assert "$USER" "Profile not specified"
               policysetATTACH
fi
COMMANDPROC "REMOVEPOLICYSET"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               assert "$USER" "Profile not specified"
               policysetREMOVE
fi

# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: KEY PAIR Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "CREATEKEYPAIR"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT"  "Profile not specified"
     assert "$THING"    "Key Name not specified"
     $AWS ec2 create-key-pair --key-name $THING --query 'KeyMaterial' > $THING.pem
     chmod 400 $THING.pem
fi

# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: ACCESS KEY Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "REPLACEACCESSKEYS"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               confirm
               wipeACCESSKEYS
               aws --profile $ACCOUNT --output text iam create-access-key --user-name $USERNAME > $Tmp
               aws --profile $ACCOUNT --output text iam list-access-keys --user-name $USERNAME
               cat $Tmp | gawk -v A=$ACCOUNT -v U=$USERNAME ' @include "cuu.awk"; {print configrecord($0,A,U,A);}'
fi
COMMANDPROC "CREATEACCESSKEY"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               aws --profile $ACCOUNT --output text iam create-access-key --user-name $USERNAME > $Tmp
               aws --profile $ACCOUNT --output text iam list-access-keys --user-name $USERNAME
               cat $Tmp | gawk -v A=$ACCOUNT -v U=$USERNAME ' @include "cuu.awk"; {print configrecord($0,A,U);}'
fi
COMMANDPROC "LISTACCESSKEYS"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               aws --profile $ACCOUNT --output text iam list-access-keys --user-name $USERNAME
fi
COMMANDPROC "DELETEACCESSKEYS"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               confirm
               wipeACCESSKEYS
fi
# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: USER Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "CREATEREADMINUSER"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAMEandPASSWORD
               createUSER
               policyATTACH arn:aws:iam::aws:policy/AdministratorAccess
               optionalGROUPADD
fi
COMMANDPROC "CREATEREADONLYUSER"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAMEandPASSWORD
               createUSER
               policyATTACH arn:aws:iam::aws:policy/ReadOnlyAccess
               optionalGROUPADD
fi
COMMANDPROC "CREATEUSERNOKEY"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAMEandPASSWORD
               createUSER
               optionalGROUPADD
fi
COMMANDPROC "CREATEUSER"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAMEandPASSWORD
               createUSER
               optionalGROUPADD
               createACCESSKEY
fi
COMMANDPROC "CHANGEPASSWORD"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAMEandPASSWORD
               confirm
               aws --profile $ACCOUNT iam update-login-profile --user-name $USERNAME --password $PASSWORD  --password-reset-required
fi
COMMANDPROC "SCRAMPASSWORD"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               RAN=`tr -cd \#_[:alnum:] < /dev/urandom |  fold -w 18 | head -1 |gawk '{print $0 "!!"}'`
               confirm
               aws --profile $ACCOUNT iam update-login-profile --user-name $USERNAME --password $RAN
fi
COMMANDPROC "DELETEUSER"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               wipeUSER
               deleteUSER
fi
COMMANDPROC "LISTUSERS"; if [ $bCmd -gt 0 ] ; then
               buildPROFILELIST
               clean
               for ITEM in $PROFILELIST; do
                    aws --profile $ITEM iam list-users --query "Users[*].[UserName,CreateDate,Arn]" | gawk -v A=$ITEM -f noindent.awk >> $Tmp
               done
               cat $Tmp | column -t
fi
COMMANDPROC "LISTUSERS2"; if [ $bCmd -gt 0 ] ; then
               buildPROFILELIST
               clean
               for ITEM in $PROFILELIST; do
                    aws --profile $ITEM iam list-users --query "Users[*].[UserName]" >> $Tmp
               done
               cat $Tmp
fi
COMMANDPROC "LISTUSERS-JSON"; if [ $bCmd -gt 0 ] ; then
               buildPROFILELIST
               clean
               for ITEM in $PROFILELIST; do
                    aws --profile $ITEM iam list-users --query "Users[*].[Arn]" >> $Tmp
               done
               cat $Tmp | gawk '
               BEGIN {print "[";c="";} { printf "%s", c "\"" $0 "\"";c=",\n"; } END {print "\n]"}'
fi
COMMANDPROC "USERMENU"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               buildUSERLIST  $ACCOUNT
               clean
               print "PS3='Pick user, enter choice:'" > $Tmp
               print -n "select clean_menu in " >> $Tmp
               for USER in $USERLIST; do
                    print -n "\""$USER"\" " >> $Tmp
               done
               print "\"Exit\"" >> $Tmp
               print "do" >> $Tmp
               print "case \$clean_menu in" >> $Tmp
               for USER in $USERLIST; do
                    print "\""$USER"\")" >> $Tmp
                    print "cuu -a "$ACCOUNT" -c du -u "$USER";;" >> $Tmp
               done
               print "\"Exit\") break;;" >> $Tmp
               print "esac" >> $Tmp
               print "done" >> $Tmp
               chmod 777 $Tmp
               $Tmp
fi
COMMANDPROC "DESCRIBEUSERS"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     clean
     for ITEM in $ACCOUNT; do
          buildUSERLIST $ITEM
          for USER in $USERLIST; do
           print $ITEM $USER |tee -a cuu.out
           GROUPLIST=`aws --profile $ITEM iam list-groups-for-user  --output text --user-name $USER --query "Groups[*].[GroupName]"`
           aws --profile $ITEM iam list-groups-for-user        --user-name $USER --query "Groups[*].{ARN:Arn}" |
                                   gawk -v A=$USER -v B=$ITEM -v C="GRP" -f indent.awk |tee -a cuu.out
           for G in $GROUPLIST; do
                aws --profile $ITEM iam list-attached-group-policies --group-name $G --query "AttachedPolicies[*].{ARN:PolicyArn}" |
                                        gawk -v A=$USER -v B=$ITEM -v C="GPO" -f indent.awk |tee -a cuu.out 
           done
           aws --profile $ITEM iam list-attached-user-policies --user-name $USER --query "AttachedPolicies[*].{ARN:PolicyArn}" |
                                   gawk -v A=$USER -v B=$ITEM -v C="UPO" -f indent.awk |tee -a cuu.out 
           aws --profile $ITEM iam list-access-keys            --user-name $USER --query "AccessKeyMetadata[*].[AccessKeyId]"  |
                                   gawk -v A=$USER -v B=$ITEM -v C="KEY" -f indent.awk |tee -a cuu.out

           done 
     done 
fi


# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: ROLE Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "LISTROLES"; if [ $bCmd -gt 0 ] ; then
               buildPROFILELIST
               clean
               for ITEM in $PROFILELIST; do
                    aws --profile $ITEM iam list-roles --query "Roles[*].[Arn]" | gawk -v A=$ITEM -f noindent.awk >> $Tmp
               done
               cat $Tmp | column -t
fi

# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: GROUP Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "CREATEGROUP"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               assert "$THING"   "Group not specified"
               clean
               aws --profile $ACCOUNT iam create-group --group-name $THING --output text
               aws --profile $ACCOUNT iam list-groups --output text --query "Groups[*].[GroupName,CreateDate,Arn]"
fi
COMMANDPROC "DELETEGROUP"; if [ $bCmd -gt 0 ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT" "Profile not specified"
               assert "$THING" "Group not specified"
               aws --profile $ACCOUNT iam delete-group --group-name $THING
fi
COMMANDPROC "LISTGROUPS"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               clean
               for ITEM in $ACCOUNT; do
                    aws --profile $ITEM iam list-groups --output text --query "Groups[*].[GroupName,CreateDate,Arn]" >> $Tmp
               done
               cat $Tmp | gawk -v A=$ITEM -f noindent.awk | column -t
fi
# ----------------------------------------------------
# These commands operate on users
# ----------------------------------------------------
COMMANDPROC "LISTUSERPOLICIES"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               aws --profile $ACCOUNT iam list-attached-user-policies --user-name $USERNAME --query "AttachedPolicies[*].[PolicyName,PolicyArn]" --output text
fi
COMMANDPROC "LISTUSERGROUPS"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               aws --profile $ACCOUNT iam list-groups-for-user --user-name $USERNAME --query "Groups[*].[GroupName]" --output text
fi
COMMANDPROC "REMOVEALLGROUPS"; if [ $bCmd -gt 0 ] ; then
    wipeGROUPS
fi

COMMANDPROC "NEWPOLICYDOC"; if [ $bCmd -gt 0 ] ; then
               cp policydoc.json this.json
fi

COMMANDPROC "DETACHUSERPOLICIES"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               confirm
               aws --profile $ACCOUNT iam list-attached-user-policies --user-name $USERNAME | gawk -v A=$ACCOUNT -v U=$USERNAME '
               {
                   sz = "aws --profile " A " iam detach-user-policy --user-name " U " --policy-arn " $2
                   system(sz)
               }'
fi
COMMANDPROC "ATTACHPOLICYTOALLUSERS"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandTHING "Policy-ARN"
               buildUSERLIST $ACCOUNT
               for USER in $USERLIST; do
                    policyATTACH $THING
               done
               USERLIST=""
fi
COMMANDPROC "ATTACHPOLICYTOUSER"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               assert "$THING" "Thing not specified"
               policyATTACH $THING
fi


COMMANDPROC "IAMNAMEDPOLICY-REMOVE"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAMEandTHING "Policy-ARN"
               policyREMOVE $THING
fi
COMMANDPROC "IAMNAMEDPOLICY-ADD"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAMEandTHING "Policy-ARN"
               policyATTACH $THING
fi
COMMANDPROC "IAMNAMEDPOLICY-REMOVE"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandTHING "Policy-Name"
               THIS=`aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"`
               policyREMOVE "arn:aws:iam::"$THIS":policy/"$THING
               THIS=""
fi
COMMANDPROC "IAMNAMEDPOLICY-ADD"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandTHING "Policy-Name"
               THIS=`aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"`
               policyATTACH "arn:aws:iam::"$THIS":policy/"$THING
               THIS=""
fi

COMMANDPROC "IAMUSERCODECOMMITPOWERUSER-ADD"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               policyATTACH "arn:aws:iam::aws:policy/AWSCodeCommitPowerUser"
fi
COMMANDPROC "IAMUSERCHANGEPASSWORD-ADD"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               policyATTACH "arn:aws:iam::aws:policy/IAMUserChangePassword"
fi
COMMANDPROC "IAMUSERCHANGEPASSWORD-REMOVE"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               policyREMOVE arn:aws:iam::aws:policy/IAMUserChangePassword
fi

COMMANDPROC "LISTUSERSINGROUP"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandTHING "Group-Name"
     buildUSERLIST $ACCOUNT
     for USER in $USERLIST; do
         print $USER
     done
     USERLIST=""
fi
COMMANDPROC "ADDTOGROUP"; if [ $bCmd -gt 0 ] ; then
     assertACCOUNTandTHING "Group-Name"
     aws --profile $ACCOUNT iam add-user-to-group --group-name $THING  --user-name $USERNAME
     aws --profile $ACCOUNT iam list-groups-for-user --user-name $USERNAME --query "Groups[*].{ARN:Arn}" |
                                gawk -v A=$USER -v B=$ACCOUNT -v C="GRP" -f noindent.awk
fi

COMMANDPROC "SWAP"; if [ $bCmd -gt 0 ] ; then
               assertACCOUNTandUSERNAME
               policyATTACH $POLICYADD
               groupREMOVE $GROUPREMOVE
fi
COMMANDPROC "REMOVEFROMGROUP"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               assert "$USERNAME" "Username not specified"
               assert "$THING" "Group name not specified"
               confirm
               aws --profile $ACCOUNT iam remove-user-from-group --user-name $USERNAME --group-name $THING 
fi



COMMANDPROC "EC2"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --profile $ACCOUNT --output text ec2 describe-instances | gawk 'BEGIN {print "\n\n\n"}/INSTANCES/{print $0}/SECURITYGROUPS/{print $0 "\n\n\n"}'
fi

COMMANDPROC "EC2-LIST"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     for ACCT in $ACCOUNT; do
          LIST="us-east-1 us-east-2 us-west-1 us-west-2"
          for ITEM in $LIST; do
               aws --profile $ACCT ec2 describe-instances --output text --region $ITEM \
                   --query "Reservations[*].Instances[*].[InstanceId,InstanceType,State.Name,Tags[?Key==Name].Value]" | gawk -v A=$ACCT -v B=$ITEM -f noindent.awk
          done
      done
fi

#          XLIST=`aws --profile $ACCOUNT ec2 describe-regions --query "Regions[*].RegionName" --output text`



COMMANDPROC "EC2-SGSUM"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --output text --profile $ACCOUNT ec2 describe-security-groups --query '
                               SecurityGroups[*].{
                                    SG:GroupId,
                                    PERM:IpPermissions[*].
                                         {PR:IpProtocol,
                                          FP:FromPort,
                                          TP:ToPort,
                                          IP:IpRanges[*].CidrIp,
                                          UG:UserIdGroupPairs[*].{GI:GroupId}
                                         }
                               }' |  gawk -F " " -v A=$ACCOUNT '
               BEGIN    {szOut="";}
               /^sg[-]/ {print szOut;szOut=$1;}
               /^PERM/ { szOut=szOut " " $3; }
           ' 
fi
COMMANDPROC "EC2-SG"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --output text --profile $ACCOUNT ec2 describe-security-groups --query '
                               SecurityGroups[*].{
                                    SG:GroupId,
                                    PERM:IpPermissions[*].
                                         {PR:IpProtocol,
                                          FP:FromPort,
                                          TP:ToPort,
                                          IP:IpRanges[*].CidrIp,
                                          UG:UserIdGroupPairs[*].{GI:GroupId}
                                         }
                               }' |  gawk -F " " -v A=$ACCOUNT '
               BEGIN    {FLAG=0;ct=6;}
               /^sg[-]/ {SG=$1;ct=6;}
               /^PERM/ {
                    proto=$3; sub(/[-]1/,"all",proto);if (match(proto,/all/)>0) FLAG=1; 
                    fport=$2; sub(/None/,"all",fport);if (match(fport,/all/)>0) FLAG=1; 
                    fport=$2; sub(/[-]1/,"all",fport);if (match(fport,/all/)>0) FLAG=1; 
                    tport=$4; sub(/None/,"all",tport);if (match(tport,/all/)>0) FLAG=1; 
                    tport=$4; sub(/[-]1/,"all",tport);if (match(tport,/all/)>0) FLAG=1; 
                    printf("\n%4s %-20s %-5s %6s %6s",A,SG,proto,fport,tport)
                    block="                                                   ";
                    ctl="\n";
               }
               /^UG/ { printf(" %28s",$2)}
               /^IP/ {     
                          if (match($2,/0[.]0[.]0[.]0/) > 0 ) FLAG=1; 
                          if (( ct % 5) == 0) printf("\n                                             ");
                          printf(" %28s",$2); ct++;
                     }
               END   { printf("\n"); if (FLAG==1) printf("\n*** FLAGGED SUSPECT IPs/SGs/Protos ***\n");}
           ' 
fi
COMMANDPROC "EC2-SPARK"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --profile $ACCOUNT --output text ec2 describe-instances | gawk 'BEGIN {}/INSTANCES/{if(NF==19) print $8;if(NF==22) print $9}' | gawk -v S=$ISOAGO -v A=$ACCOUNT '
               @include "cuu.awk"
               {
               sz ="aws --profile " A " cloudwatch get-metric-statistics --metric-name CPUUtilization --period 3600 --namespace AWS/EC2 --statistics Maximum \
                   --dimensions Name=InstanceId,Value=" $0 " --start-time " isoyesterday(1) " --end-time " isonow()
               print "INSTANCE " $0
               system(sz)
           } ' | gawk '
           @include "cuu.awk" 
           BEGIN {ct=1;fc=0;file="file0"}
           END {print ""}
           /XXINSTANCE/ {printf("\n./spark ",$1)}
           /INSTANCE/ {close(file);fc++;file="file" fc}
           /INSTANCE/ {printf("%s\n",$0)}
           /DATAPOINTS/ {ct++;printf("%5.2f\n", $2) >> file}
           ' 
           fi

COMMANDPROC "EC2-UTIL"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --profile $ACCOUNT --output text ec2 describe-instances | gawk 'BEGIN {}/INSTANCES/{if(NF==19) print $8;if(NF==22) print $9}' | gawk -v S=$ISOAGO -v A=$ACCOUNT '
               @include "cuu.awk"
               {
               sz ="aws --profile " A " cloudwatch get-metric-statistics --metric-name CPUUtilization --period 300 --namespace AWS/EC2 --statistics Maximum \
                   --dimensions Name=InstanceId,Value=" $0 " --start-time " isoyesterday(1) " --end-time " isonow()
               print "INSTANCE " $0
               system(sz)
           } ' | gawk '
           @include "cuu.awk" 
           /INSTANCE/ {printf("%s\n",$0)}
           /DATAPOINTS/ {printf("METRIC %5.2f %s\n", $2, isotolocal($3))}
           ' 
           fi


# aws --profile  ce get-cost-and-usage --granularity MONTHLY --metrics BlendedCost --time-period Start=2018-04-01,End=2018-04-30  
# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: CLOUD TRAIL Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "CLOUDTRAIL-ACTIVE"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --profile $ACCOUNT --output text cloudtrail lookup-events --start-time $ISOAGO | gawk '
               /^EVENTS/ {
                    print $NF 
               }' | sort | uniq
fi
COMMANDPROC "CLOUDTRAILMENU"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT" "Profile not specified"
               buildUSERLIST  $ACCOUNT
               clean
               print "PS3='Pick user, enter choice:'" > $Tmp
               print -n "select clean_menu in " >> $Tmp
               for USER in $USERLIST; do
                    print -n "\""$USER"\" " >> $Tmp
               done
               print "\"Exit\"" >> $Tmp
               print "do" >> $Tmp
               print "case \$clean_menu in" >> $Tmp
               for USER in $USERLIST; do
                    print "\""$USER"\")" >> $Tmp
                    print "cuu -B -E -T 24 -a "$ACCOUNT" -c cu -u "$USER";;" >> $Tmp
               done
               print "\"Exit\") break;;" >> $Tmp
               print "esac" >> $Tmp
               print "done" >> $Tmp
               chmod 777 $Tmp
               $Tmp
fi

COMMANDPROC "CLOUDTRAIL-WATCH"; if [ $bCmd -gt 0 ] ; then
               assert "PROFILELIST"  "Profile  not specified"
               if [ "$USERNAME" == "" ] ; then
                    assert "$WATCHUSER"    "User not specified"
                    for sz in $PROFILELIST; do
                         cuu -a $sz -c CU -u $WATCHUSER $DETAILFLAG
                    done
               else
                    assert "$USERNAME"    "User not specified"
                    for sz in $PROFILELIST; do
                         cuu -a $sz -c CU -u $USERNAME $DETAILFLAG
                    done
               fi
fi
COMMANDPROC "CLOUDTRAIL-USER"; if [ $bCmd -gt 0 ] ; then
               assert "$ACCOUNT"  "Profile not specified"
               assert "$USERNAME" "Username not specified"
               clean
               window | tee -a cuureport.txt
               if [ "$USERNAME" == "USERLIST" ] ; then
                    rm -rf $Tmp  >/dev/null 2>&1
                    LIST=`cat userlist`
                    for USER in $LIST; do
                      aws --profile $ACCOUNT --region $REGION --output text cloudtrail lookup-events --no-paginate --start-time $ISOAGO --lookup-attributes AttributeKey=Username,AttributeValue=$USER >> $Tmp
                    done
               else
                    if [ "$USERNAME" == "ALL" ] ; then
                      aws --profile $ACCOUNT --region $REGION --output text cloudtrail lookup-events --no-paginate --start-time $ISOAGO  > $Tmp
                    else
                      aws --profile $ACCOUNT --region $REGION --output text cloudtrail lookup-events --no-paginate --start-time $ISOAGO --lookup-attributes AttributeKey=Username,AttributeValue=$USERNAME > $Tmp
                    fi
               fi
               cat $Tmp | gawk  -v REG=$REGION -v SMY=$SUMMARY -v USR=$USERNAME -v ACCT=$ACCOUNT -v DETAIL=$DETAIL -v BN=$BIGNAMES -v BE=$BIGEVENTS -v RAW=$SHOWRAW -v ISOTIME=$ISOTIME '
               @include "cuu.awk"
               /^EVENTS/ {
                    if (match(SMY,/^yes/) != 0) {
                         BE="yes"
                         BN="yes"
                    }
                    sz=$0;
                    timepre=jget($0, "^.*[\"]eventTime[\"]:","NA");
                    ip=  jget($0, "^.*[\"]sourceIPAddress[\"]:","NA");
                    ty=  jget($0, "^.*[\"]eventType[\"]:","NA");
                    en=  jget($0, "^.*[\"]eventName[\"]:","NA");
                    req= jget($0, "^.*[\"]requestParameters[\"]:","NA");
                    resp= jget($0, "^.*[\"]responseElements[\"]:","NA");
                    time=isotolocal(timepre, "%m/%d/%Y %I:%M:%S%p");
                    shorttime=isotolocal(timepre, "%m/%d/%Y");
                    if (match(ISOTIME,/^yes/) > 0 ) {
                         time=timepre;
                         shorttime=timepre;
                    }
                    name=$NF;
                    sub(/HIDDEN_DUE_TO_SECURITY_REASONS/,"HIDDEN",name);
                    if (match(DETAIL,/^yes/) == 0) {
                         sub(/^Aws/, "", ty);
                         gsub(/["]/, "", resp);
                         gsub(/Validation/, "Valid", resp);
                         gsub(/Region/, "Reg", resp);
                         gsub(/Required/, "Req", resp);
                         gsub(/Bucket/, "Bk", resp);
                         gsub(/Service/, "Sv", resp);
                         gsub(/[ ]/, "", resp);
                         gsub(/createDate/, "cD", resp);
                         gsub(/userName/, "uN", resp);
                         gsub(/userName/, "uN", req);
                         gsub(/userId/, "uID", resp);
                         gsub(/AIDA................/, "AIDA..", resp);
                         gsub(/Jan/,"01",resp); gsub(/Feb/,"02",resp); gsub(/Mar/,"03",resp); gsub(/Apr/,"04",resp); gsub(/May/,"05",resp); gsub(/Jun/,"06",resp);
                         gsub(/Jul/,"07",resp); gsub(/Aug/,"08",resp); gsub(/Sep/,"09",resp); gsub(/Oct/,"10",resp); gsub(/Nov/,"11",resp); gsub(/Dec/,"12",resp);
                         gsub(/,2018/,"2018",resp);
                         gsub(/GroupName/,"GName",req);
                         gsub(/StreamName/,"SName",req);
                         gsub(/GroupName/,"GName",resp);
                         gsub(/StreamName/,"SName",resp);
                         gsub(/Permission/,"Perm",resp);
                         gsub(/Protocol/,"Prtcl",resp);
                         gsub(/Permission/,"Perm",req);
                         gsub(/Protocol/,"Prtcl",req);
                         gsub(/Port/,"P",req);
                         gsub(/request/,"req",req);
                         gsub(/request/,"req",resp);
                         gsub(/vpcConfig/,"vpcCfg",req);
                         gsub(/vpcConfig/,"vpcCfg",resp);
                         gsub(/memorySize/,"memSz",req);
                         gsub(/memorySize/,"memSz",resp);
                         gsub(/revisionId/,"revId",req);
                         gsub(/revisionId/,"revId",resp);
                         gsub(/destinationCidrBlock/,"DestCidr",req);
                         gsub(/destinationCidrBlock/,"DestCidr",resp);

                         gsub(/[Bb]lock/,"Bblk",req);
                         gsub(/[Bb]lock/,"Bblk",resp);

                         gsub(/[Pp]rivate/,"Prv",req);
                         gsub(/[Pp]rivate/,"Prv",resp);
                         gsub(/[Pp]ublic/,"Pub",req);
                         gsub(/[Pp]ublic/,"Pub",resp);
                         gsub(/[Aa]llocation/,"Alloc",req);
                         gsub(/[Aa]llocation/,"Alloc",resp);
                         gsub(/[Aa]llocate/,"Alloc",req);
                         gsub(/[Aa]llocate/,"Alloc",resp);
                         gsub(/[Aa]llocate/,"Alloc",ty);
                         
                         
                         
                         
                         gsub(/[Aa]ssociation/,"Assoc",req);
                         gsub(/[Aa]ssociation/,"Assoc",resp);
                         gsub(/[Aa]ssociation/,"Assoc",ty);
                         gsub(/[Aa]ssociate/,"Assoc",req);
                         gsub(/[Aa]ssociate/,"Assoc",resp);
                         gsub(/[Aa]ssociate/,"Assoc",ty);

                         gsub(/[Mm]odify/,"Mod",ty);
                         gsub(/[Ii]nstance/,"Inst",ty);
                         gsub(/[Ss]ecurity/,"Sec",ty);
                         gsub(/[Aa]uthorize/,"Auth",ty);
                         gsub(/[Aa]ttach/,"Atch",ty);
                         gsub(/[Gg]roup/,"Grp",ty);

                         gsub(/[Rr]oute/,"Rte",req);
                         gsub(/[Rr]oute/,"Rte",resp);
                         gsub(/[Rr]oute/,"Rte",ty);
                         gsub(/[Gg]ateway/,"Gtwy",req);
                         gsub(/[Gg]ateway/,"Gtwy",resp);
                         gsub(/[Gg]ateway/,"Gtwy",ty);

                         gsub(/keyFingerprint:..:..:..:..:..:..:..:..:..:..:..:..:..:../,"keyFngPrnt..",req);
                         gsub(/keyFingerprint:..:..:..:..:..:..:..:..:..:..:..:..:..:../,"keyFngPrnt..",resp);
                         gsub(/AKIA........./,"AKIA..",req);
                         gsub(/AKIA........./,"AKIA..",resp);
                         gsub(/........-....-....-....-............/,"...",req);
                         gsub(/........-....-....-....-............/,"...",resp);
                         gsub(/[Cc]onsole/,"Con",ty);
                         gsub(/[Cc]onsole/,"Con",resp);
                         gsub(/[Cc]onsole/,"Con",req);
                         gsub(/[Ss]ecurity/,"Sec",resp);

                         gsub(/[Ss]ecurity/,"Sec",req);
                         gsub(/functionName/,"fName",resp);
                         gsub(/functionName/,"fName",req);

                         gsub(/instance/,"inst",req);
                         gsub(/instance/,"inst",resp);
                         gsub(/group/,"grp",req);
                         gsub(/group/,"grp",resp);
                         gsub(/Profile/,"Prf",req);
                         gsub(/Profile/,"Prf",resp);
                         gsub(/[Nn]etwork/,"net",req);
                         gsub(/[Nn]etwork/,"net",resp);
                         gsub(/[Ii]nterface/,"inter",req);
                         gsub(/[Ii]nterface/,"inter",resp);
                         if (match(BE,/no/) > 0) {
                             gsub(/Configuration/,"Config",en);
                             gsub(/Config/,"Cfg",en);
                             gsub(/[Dd]elete/,"Del",en);
                             gsub(/[Ll]aunch/,"Lnch",en);
                             gsub(/[Cc]hange/,"Chg",en);
                             gsub(/[Ss]caling/,"Scl",en);
                             gsub(/Permission/,"Perm",en);
                             gsub(/Function/,"Func",en);
                             gsub(/Resource/,"Res",en);
                             gsub(/Update/,"Upd",en);
                             gsub(/Create/,"Cr",en);
                             gsub(/[Cc]onsole/,"Con",en);
                             gsub(/[Ii]nstance/,"Inst",en);
                             gsub(/[Aa]ssociation/,"Assoc",en);
                             gsub(/[Mm]odify/,"Mod",en);
                             gsub(/[Aa]ssociate/,"Assoc",en);
                             gsub(/[Gg]roup/,"Grp",en);
                             gsub(/[Aa]uthorize/,"Auth",en);
                             gsub(/[Gg]ateway/,"Gtwy",en);
                             gsub(/[Aa]ttach/,"Atch",en);
                             gsub(/[Aa]llocate/,"Alloc",en);
                             gsub(/[Ss]ecurity/,"Sec",en);
                             gsub(/[Rr]oute/,"Rte",en);
                             gsub(/[aeiou]/,"",en);
                             en=cutpad(en,12);
                         }
                         else {
                             NOTHING=0
                             if (match(SMY,/^no/) > 0) {
                                  en=cutpad(en,18);
                             }
                         }

                         if (match(BN,/no/) > 0) {
                             name=cutpad(name,10);
                         }

                         ty=cutpad(ty,8);

                         sub(/arn:aws:iam::......../,"arn:aws:iam::",req);
                         sub(/arn:aws:iam::......../,"arn:aws:iam::",resp);

                    }
                    else {

                         ty=cutpad(ty,18);
                    }
                    if (length(req) > 256) req=substr(req,1,256) "(TRUNCATED)";
                    if (length(resp) > 256) resp=substr(resp,1,256) "(TRUNCATED)";
                    # print "-"
                    # print "acct","time","name","eventtype","eventname","req","resp"
                    if (match(SMY,/^yes/) != 0) {
                         print trim(ACCT), time, name, en
                    }
                    else {
                         print trim(ACCT), REG, time, name, ty, en, "IN-" req
                         print trim(ACCT), REG, time, name, ty, en, "OU-" resp
                    }
                    if (match(RAW,/^yes/) != 0) print $0 "\n\n"
               }'  
#                > $Tmp
# 
#                if [ "$SUMMARY" == "yes" ] ; then
#                     cat $Tmp | tee -a cuureport.txt
#                else
#                     cat $Tmp | sort -k 5,5 -k 4,4 | tee -a cuureport.txt
#                fi
fi

# -----------------------------------------------------------------------------------------------------------------------
# -- COMMAND SET: UTILITY Operations
# -----------------------------------------------------------------------------------------------------------------------
COMMANDPROC "TIME"; if [ $bCmd -gt 0 ] ; then
     print "WINDOW START TIME  "$ISOAGO"  "$AGO
     print "WINDOW END TIME    "$ISOANON"  "$ANON
fi
COMMANDPROC "ACCOUNTNUMBER"; if [ $bCmd -gt 0 ] ; then
     assert "$ACCOUNT" "Profile not specified"
     aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"
fi
COMMANDPROC "COMMANDS"; if [ $bCmd -gt 0 ] ; then
     cat $CuuCommandFile
fi




if [ $gCmd -eq 0 ] ; then
    print "CUU Error!"
    print "     \""$COMMAND"\" is not a cuu command"
fi


if [ "$LOOP" == "yes" ] ; then
COMMANDPROC "EXIT"; if [ $bCmd -gt 0 ] ; then
                    exit 0
     fi
COMMANDPROC "QUIT"; if [ $bCmd -gt 0 ] ; then
                    exit 0
     fi
COMMANDPROC "Q"; if [ $bCmd -gt 0 ] ; then
                    exit 0
     fi
COMMANDPROC "h"; if [ $bCmd -gt 0 ] ; then
                    usage
     fi
COMMANDPROC "H"; if [ $bCmd -gt 0 ] ; then
                    usage
     fi
else
     exit 0
fi

print -n "cuu "$ACCOUNT" "$USERNAME" "$THING">> "
read COMMAND
     set -A array $COMMAND
     if [ "${array[0]}" == "ACCOUNT" ] ; then
          ACCOUNT="${array[1]}"
     fi
     if [ "${array[0]}" == "USERNAME" ] ; then
         USERNAME="${array[1]}"
     fi
     if [ "${array[0]}" == "THING" ] ; then
         THING="${array[1]}"
     fi

done
exit 1
