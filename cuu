#!/usr/bin/ksh
Tmp="/tmp/$$"
TmpDir="/tmp/dir$$"
trap 'rm -f "$Tmp" >/dev/null 2>&1' 0
trap "exit 2" 1 2 3 13 15
rm $Tmp  >/dev/null 2>&1
# ---------------------------------------------------------------------------------------------------------
#  / ___| | | | | | |            / \   _ __      / \ \      / / ___|   / ___| |   |_ _| |_   _|__   ___ | |
# | |   | | | | | | |  _____    / _ \ | '_ \    / _ \ \ /\ / /\___ \  | |   | |    | |    | |/ _ \ / _ \| |
# | |___| |_| | |_| | |_____|  / ___ \| | | |  / ___ \ V  V /  ___) | | |___| |___ | |    | | (_) | (_) | |
#  \____|\___/ \___/          /_/   \_\_| |_| /_/   \_\_/\_/  |____/   \____|_____|___|   |_|\___/ \___/|_|
# ---------------------------------------------------------------------------------------------------------
#                               | |/ / ___|| | | | |  _ \ _   _| | ___  ___| | | |
#                               | ' /\___ \| |_| | | |_) | | | | |/ _ \/ __| | | |
#                               | . \ ___) |  _  | |  _ <| |_| | |  __/\__ \_|_|_|
#                               |_|\_\____/|_| |_| |_| \_\\__,_|_|\___||___(_|_|_)
# ---------------------------------------------------------------------------------------------------------
#                                / ___| __ ___      _| | __ |  _ \ _   _| | ___  ___ 
#                               | |  _ / _` \ \ /\ / / |/ / | |_) | | | | |/ _ \/ __|
#                               | |_| | (_| |\ V  V /|   <  |  _ <| |_| | |  __/\__ \
#                                \____|\__,_| \_/\_/ |_|\_\ |_| \_\\__,_|_|\___||___/
# ---------------------------------------------------------------------------------------------------------
# README.md Start
# CUU - An AWS CLI Wrapper
# M <pre>
usage(){
     print ""
     print "Usage: cuu [-h][-a][-u][-p][-t][-s][-d][-j][-F][-B][-E][-R][-Z][-i][-c]"
     print "      -h  display usage"
     print "      -a  cli profile name      (from .aws/config)"
     print "      -u  operand:  username"
     print "      -p  operand:  password    (default set in ~/.cuu.txt)"
     print "      -t  operand:  thing name  (used to specify a resource or object name)"
     print "      -s  operand:  start date  (default set in ~/.cuu.txt)"
     print "      -d  limits abbreviations"
     print "      -j  use long datetime fields"
     print "      -F  force mode, do not confirm any command (e.g. deletes)"
     print "      -B  show full user names"
     print "      -E  show event names"
     print "      -R  show raw records in output"
     print "      -Z  user iso time"
     print "      -i  interactive mode ('q' to quit)"
     print "      -c  command:"
     print "          Optional :ULIST: may specify a user, a list of users, or the special keyword ALLUSERS"
     print "          Optional :PLIST: may specify a profile, a list of profiles, or the special keyword ALLPROFILES"
     print "          ----------------------------------------------------------------------------------------------"
     print "User Commands"
     print "     lu     listusers                -a :PLIST:    Lists users" 
     print "            deleteuser               -a -u"
     print "     du     describeusers            -a :PLIST:    Lists users and their attached groups and policies" 
     print "            createuser               -a -u -p      Creates with no privledges"
     print "            createadminuser          -a -u -p      Creates a user with Administor Access"
     print "            createreadonlyuser       -a -u -p      Creates a user with Read Only"
     print "     scram  scrampassword            -a -u         Assign an unknown (scrammed) password"
     print "            changepassword           -a -u -p      Changes a users pwd, Will use PASSWORD in ~/.cuu.txt"
     print "                                                   NOTE: for commands above, User will change password"
     print "                                                   after first login.  Password may be set in ~/.cuu.txt"
     print "            listaccesskeys           -a -u         Lists the users (-u) access keys)"
     print "            createaccesskey          -a -u         Creates an accesskey for the user (-u)"
     print "            deleteaccesskeys         -a -u         Deletes the users (-u) access keys)"
     print "Policy Commands"
     print "     lp     listallpolicies          -a            Lists all defined policies"
     print "     lpl    listlocalpoliciesl       -a            Lists local (user managed) policies"
     print "     lpa    listawspolicies          -a            Lists aws policies"
     print "     gap    getallpolicies           -a <-t arn>   Get all policy docs defined for this acct (-t arn for a specific policy)"
     print "     glp    getlocalpolicies         -a <-t arn>   Get all local policy docs defined for this acct (-t arn for a specific policy)"
     print "            listuserpolicies         -a -u"
     print "            detachuserpolicies       -a -u"
     print "            attachpolicytouser       -a -u -t      Specify the policy arn with -t"
     print "Group Commands"
     print "     lg     listgroups               -a            List all groups defined" 
     print "            addusertogroup           -a -u -t      Specify the group name with -t"
     print "            listusergroups           -a -u         Lists groups associated with user"
     print "            removeuserfromallgroups  -a -u         Remove the user from attach attached groups"
     print "EC2 Commands"
     print "            ec2                      -a            List instances and securitygroups"
     print "            ec2-sg                   -a            Security groups detail listing"
     print "            ec2-sgsum                -a            Security groups summary listing (incl. empty SGs)"
     print "CloudTrail Commands"
     print "     ca     cloudtrail-active        -a -s         Lists active users since start date (-s)"
     print "     cu     cloudtrail-user          -a -u -s      Lists user (-u) activity since start date (-s)"
     print "     cz     cloudtrail-allusers      -a -s         Runs cloudtrail-users for all users"
     print "     cw     cloudtrail-watch         -s            Runs cloudtrail-users for each profile in PROFILELIST"
     print "                                                    on the WATCHUSER in ~/.cuu.txt"
     print "Specific Policy Commands"
     print "            iamuserchangepassword-add    -a -u :ULIST: Adds Policy"
     print "            iamuserchangepassword-remove -a -u :ULIST: Removes Policy"
     print ""
     print "Note: Abbreviations are applied to output fields to limit line length"
     print "            -d will limit abbreviations"
}
# M </pre>
# README.md End

changeop() {
     CHANGEOPERATION="YES" 
}
nochangeop() {
     CHANGEOPERATION="NO" 
}
clean() {
    rm -rf $Tmp
}
awsnull() {
    NOTHING=0;
}
awsdbg() {
     printf "DBGOUT:   aws %s %s %s %s %s %s %s %s %s %s %s %s\n" $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12
}
assert() {
    if [ "$1" == "" ] ; then
         print $2
         exit 1
    fi
}
antiassert() {
    if [ "$1" != "" ] ; then
         print $2
         exit 1
    fi
}
confirmprompt() {
     print "   "$1
     confirm
}
confirm() {
     if [ "$FORCE" != "yes" ] ; then
          print -n "   Enter '10111' to confirm >> "
          read STRIN
          if [ "$STRIN" != "10111" ] ; then
               print "   Exiting - No Match"
               exit 1
          fi
     fi
}
typeset -u COMMAND
COMMAND=""
USERNAME=""
ACCOUNT=""
CREATEUSER=""
THING=""
COUNT=""
ACCTNUMBER=""
IN=""
OUT=""
FORCE=""
LOOP="no"
REGION="us-east-1"
RAN=`tr -cd \#_[:alnum:] < /dev/urandom |  fold -w 18 | head -1 |gawk '{print $0 "!!"}'`
PASSWORD=`gawk -v w=PASSWORD -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
STARTDATE=`gawk -v w=STARTDATE -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
WATCHUSER=`gawk -v w=WATCHUSER -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
WATCHPROFILE=`gawk -v w=WATCHPROFILE -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
PROFILELIST=`gawk -v w=PROFILELIST -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
POLICYLIST=`gawk -v w=POLICYLIST -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' ~/.cuu.txt`
DETAILFLAG=""
SHOWRAW="no" 
ISOTIME="no" 
BIGNAMES="no" 
BIGEVENTS="no" 
CHANGEOPERATION="YES" 
changeop

while getopts "jr:Ff:Dds:n:c:Ru:a:p:t:ihbZBE" arg
do
	case $arg in
            B) BIGNAMES="yes" ;;
            E) BIGEVENTS="yes" ;;
            Z) ISOTIME="yes" ;;
            r) REGION=$OPTARG  ;;
            F) FORCE="yes" ;;
            f) FILE=$OPTARG ;;
            i) LOOP="yes" ;;
            d) DETAIL="yes"; DETAILFLAG=" -d " ;;
            s) STARTDATE=$OPTARG ;;
            n) COUNT=$OPTARG ;;
            c) COMMAND=$OPTARG ;;
            u) USERNAME=$OPTARG
               if [ "$USERNAME" == "ALLUSERS" ] ; then
                  assert "$ACCOUNT"  "Profile not specified"
                  USERNAME=`aws --profile $ACCOUNT iam list-users --query "Users[*].[UserName]" --output text`
                  print "" 
                  print "   You are operating on all the users in the account"
                  print "" 
                  echo $USERNAME
                  print "" 
                  confirm
                  print "" 
               fi
               ;;
            R) SHOWRAW="yes" ;;
            p) PASSWORD=$OPTARG ;;
            t) THING=$OPTARG ;;
	    h) usage; exit 0 ;;
            a) ACCOUNT=$OPTARG
               if [ "$ACCOUNT" == "ALL" ] ; then
                   ACCOUNT=$PROFILELIST
               fi
               if [ "$ACCOUNT" == "ALLACCOUNTS" ] ; then
                   ACCOUNT=$PROFILELIST
               fi
               if [ "$ACCOUNT" == "LIST" ] ; then
                   ACCOUNT=$PROFILELIST
               fi
               ;;
	    *) exit 0 ;;
	esac
done
shift $(($OPTIND - 1))


if [ $# -eq 1 ] ; then
     if [ "$COMMAND" == "" ] ; then
          COMMAND=$1
     fi
fi

while [[ 0 -eq 0 ]];do

	case "$COMMAND" in
            GLP)                   COMMAND="GETLOCALPOLICIES" ;;
            GAP)                   COMMAND="GETALLPOLICIES" ;;
            LAP)                   COMMAND="LISTALLPOLICIES" ;;
            LLP)                   COMMAND="LISTLOCALPOLICIES" ;;
            LAWSP)                 COMMAND="LISTAWSPOLICIES" ;;
            CA)                    COMMAND="CLOUDTRAIL-ACTIVE" ;;
            CU)                    COMMAND="CLOUDTRAIL-USER" ;;
            CW)                    COMMAND="CLOUDTRAIL-WATCH" ;;
            CZ)                    COMMAND="CLOUDTRAIL-ALLUSERS" ;;
            LU)                    COMMAND="LISTUSERS" ;;
            DU)                    COMMAND="DESCRIBEUSERS" ;;
            LG)                    COMMAND="LISTGROUPS" ;;
            LR)                    COMMAND="LISTROLES" ;;
            LA)                    COMMAND="LISTACCESSKEYS" ;;
            SCRAM)                 COMMAND="SCRAMPASSWORD" ;;
	esac
# -----------------------------------------------------------------------------------------------------------------------
# Notes
# https://aws.amazon.com/blogs/security/a-simple-way-to-export-your-iam-settings/
# aws --profile ECD3 iam get-account-authorization-details 
#   aws --profile ECD3 iam list-policies
#   aws --profile ECD3 iam list-policies |  grep SAND
#   aws --profile ECD3 iam list-policies --scope Local
#   sz = "aws --profile " A " iam delete-access-key --user-name " U " --access-key-id  " $2
#   sz = "aws --profile " A " iam list-policy-versions --policy-arn " $2
#   aws --profile $ACCOUNT -output json iam create-policy-version --policy-arn $T --policy-document file://$FILE --set-as-default
#   aws --profile $ACCOUNT iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/ReadOnlyAccess         --user-name $USERNAME
#   aws --profile $ACCOUNT iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/CloudWatchFullAccess   --user-name $USERNAME
#   aws --profile $ACCOUNT iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/AWSCodeCommitPowerUser --user-name $USERNAME
#
# -----------------------------------------------------------------------------------------------------------------------

if [ "$COMMAND" == "TEST" ] ; then
                    assert "$ACCOUNT"  "Profile not specified"
                    awsnull --profile $ACCOUNT iam create-user --user-name $USERNAME
                    awsnull --profile $ACCOUNT iam create-login-profile --user-name $USERNAME --password $PASSWORD  --password-reset-required
                    awsnull --profile $ACCOUNT iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/$sz --user-name $USERNAME
                    LIST=`aws --profile $ACCOUNT iam list-users --query "Users[*].[UserName]" --output text`
                    print $LIST
                    for ITEM in $LIST; do
                        print $ITEM
                    done

fi

if [ "$COMMAND" == "WWEC2" ] ; then
                    assert "$ACCOUNT"  "Profile not specified"
                    LIST=`aws ec2 describe-regions --query "Regions[*].RegionName" --output text`
                    for ITEM in $LIST; do
                    aws --profile $ACCOUNT  --region $ITEM ec2 describe-instances --query "Reservations[*].Instances[*].
                              {ST: State.Name, ID:InstanceId, TY: InstanceType}" --output text | gawk -v r=$ITEM '{print r,$0;}'
                    done

fi
if [ "$COMMAND" == "UPDATEPOLICY" ] ; then
               assert "$ACCOUNT"  "Profile not specified"
               assert "$THING"  "Policy not specified"
               confirm
               aws --profile $ACCOUNT iam create-policy-version --policy-arn $THING --policy-document ./policy 
fi
if [ "$COMMAND" == "GETALLPOLICIES" ] ; then
               assert "$ACCOUNT"  "Profile not specified"
               if [ "$THING" == "" ] ; then
                    LIST=`aws --profile $ACCOUNT iam list-policies --scope All --output text --query "Policies[*].[join(',',[PolicyName,Arn,DefaultVersionId])]" | tee $Tmp`
               else 
                    LIST=`aws --profile $ACCOUNT iam list-policies --scope All --output text --query "Policies[*].[join(',',[PolicyName,Arn,DefaultVersionId])]" | tee $Tmp | grep $THING`
               fi
               CT=`cat $Tmp | wc -l`
               confirmprompt $CT" Policy Document(s) will be retrieved"
               mkdir -p ./policies
               for ITEM in $LIST; do
                    gNAME=`print "$ITEM" | gawk -F, '{print $1}'`
                    gVER=`print "$ITEM" | gawk -F, '{print $3}'`
                    gFILE="./policies/"$ACCOUNT"___"$gNAME"___"$gVER
                    gARN=`print "$ITEM" | gawk -F, '{print $2}'`
                    gARNFILE=`print "$ITEM" | gawk -F, '{gsub(/[/]/,"::::",$2);print "./policies/"$2}'`
                    print $gARN" in "$gARNFILE
                    aws --profile $ACCOUNT --output json iam get-policy-version --policy-arn $gARN --version-id $gVER > $gARNFILE
               done
fi
if [ "$COMMAND" == "GETLOCALPOLICIES" ] ; then
               assert "$ACCOUNT"  "Profile not specified"
               if [ "$THING" == "" ] ; then
                    LIST=`aws --profile $ACCOUNT iam list-policies --scope Local --output text --query "Policies[*].[join(',',[PolicyName,Arn,DefaultVersionId])]" |tee $Tmp`
               else 
                    LIST=`aws --profile $ACCOUNT iam list-policies --scope Local --output text --query "Policies[*].[join(',',[PolicyName,Arn,DefaultVersionId])]" |grep $THING |tee $Tmp`
               fi
               CT=`cat $Tmp | wc -l`
               confirmprompt $CT" Policy Document(s) will be retrieved"
               mkdir -p ./policies
               for ITEM in $LIST; do
                    gNAME=`print "$ITEM" | gawk -F, '{print $1}'`
                    gVER=`print "$ITEM" | gawk -F, '{print $3}'`
                    gFILE="./policies/"$ACCOUNT"___"$gNAME"___"$gVER
                    gARN=`print "$ITEM" | gawk -F, '{print $2}'`
                    gARNFILE=`print "$ITEM" | gawk -F, '{gsub(/[/]/,"::::",$2);print "./policies/"$2}'`
                    print $gARN" in "$gARNFILE
                    aws --profile $ACCOUNT --output json iam get-policy-version --policy-arn $gARN --version-id $gVER > $gARNFILE
               done
fi
# ----------------------------------------------------
# Fundamental User Commands
#       Create User, Change Password, Delete User
# ----------------------------------------------------
if [ "$COMMAND" == "CREATEADMINUSER" ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT"  "Profile not specified"
               assert "$PASSWORD" "Password not specified"
               aws --profile $ACCOUNT iam create-user --user-name $USERNAME
               aws --profile $ACCOUNT iam create-login-profile --user-name $USERNAME --password $PASSWORD  --password-reset-required
               aws --profile $ACCOUNT iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/AdministratorAccess    --user-name $USERNAME
               print $USERNAME
               print $PASSWORD
fi
if [ "$COMMAND" == "CREATEREADONLYUSER" ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT"  "Profile not specified"
               assert "$PASSWORD" "Password not specified"
               aws --profile $ACCOUNT iam create-user --user-name $USERNAME
               aws --profile $ACCOUNT iam create-login-profile --user-name $USERNAME --password $PASSWORD  --password-reset-required
               aws --profile $ACCOUNT iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/ReadOnlyAccess         --user-name $USERNAME
fi
if [ "$COMMAND" == "CREATEUSER" ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT"  "Profile not specified"
               assert "$PASSWORD" "Password not specified"
               aws --profile $ACCOUNT iam create-user --user-name $USERNAME
               aws --profile $ACCOUNT iam create-login-profile --user-name $USERNAME --password $PASSWORD  --password-reset-required
               aws --profile $ACCOUNT iam add-user-to-group --group-name ACCOUNT_USER_GROUP  --user-name $USERNAME
               aws --profile $ACCOUNT iam attach-user-policy --user-name $USERNAME --policy-arn arn:aws:iam::aws:policy/IAMUserChangePassword
               aws --profile $ACCOUNT --output text iam create-access-key --user-name $USERNAME | gawk '
               @include "cuu.awk" 
               { 
                   print configrecord($0); 
               }'
fi
if [ "$COMMAND" == "CHANGEPASSWORD" ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT"  "Profile not specified"
               assert "$PASSWORD" "Password not specified"
               confirm
               aws --profile $ACCOUNT iam update-login-profile --user-name $USERNAME --password $PASSWORD  --password-reset-required
fi
if [ "$COMMAND" == "SCRAMPASSWORD" ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT"  "Profile not specified"
               RAN=`tr -cd \#_[:alnum:] < /dev/urandom |  fold -w 18 | head -1 |gawk '{print $0 "!!"}'`
               assert "$PASSWORD" "Password not specified"
               confirm
               aws --profile $ACCOUNT iam update-login-profile --user-name $USERNAME --password $RAN
fi
if [ "$COMMAND" == "DELETEUSER" ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT" "Profile not specified"
               confirm
               LIST=`aws --profile $ACCOUNT iam list-groups-for-user --user-name $USERNAME --query "Groups[*].[GroupName]" --output text`
               confirm
               for ITEM in $LIST; do
                   aws --profile $ACCOUNT iam remove-user-from-group --user-name $USERNAME --group-name $ITEM 
               done
               LIST=`aws --profile $ACCOUNT iam list-access-keys --user-name $USERNAME  --query "AccessKeyMetadata[*].[AccessKeyId]" --output text`
               for ITEM in $LIST; do
                    aws --profile $ACCOUNT iam delete-access-key --user-name $USERNAME --access-key-id $ITEM
               done
               LIST=`aws --profile $ACCOUNT iam list-attached-user-policies --user-name $USERNAME --query "AttachedPolicies[*].[PolicyArn]" --output text`
               for ITEM in $LIST; do
                    aws --profile $ACCOUNT iam detach-user-policy --user-name $USERNAME --policy-arn $ITEM 
               done
               aws --profile $ACCOUNT iam delete-login-profile --user-name $USERNAME 
               aws --profile $ACCOUNT iam delete-user --user-name $USERNAME 
fi
if [ "$COMMAND" == "ACCOUNTNUMBER" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --profile $ACCOUNT sts get-caller-identity --output text --query "Account"
fi
# ----------------------------------------------------
# These commands operate on accounts
# ----------------------------------------------------
if [ "$COMMAND" == "LISTROLES" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               clean
               for ITEM in $ACCOUNT; do
                    aws --profile $ITEM iam list-roles --query "Roles[*].[Arn]" >> $Tmp
               done
               cat $Tmp | gawk -v A=$ITEM -f noindent.awk | column -t
fi
if [ "$COMMAND" == "LISTUSERS" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               clean
               for ITEM in $ACCOUNT; do
                    aws --profile $ITEM iam list-users --query "Users[*].[UserName,CreateDate,Arn]" >> $Tmp
               done
               cat $Tmp | gawk -v A=$ITEM -f noindent.awk | column -t
fi
if [ "$COMMAND" == "LISTGROUPS" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               clean
               for ITEM in $ACCOUNT; do
                    aws --profile $ITEM iam list-groups --output text --query "Groups[*].[GroupName,CreateDate,Arn]" >> $Tmp
               done
               cat $Tmp | gawk -v A=$ITEM -f noindent.awk | column -t
fi
if [ "$COMMAND" == "LISTALLPOLICIES" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               clean
               for ITEM in $ACCOUNT; do
                    aws --profile $ITEM --output text iam list-policies --scope All --query "Policies[*].[Arn]" | sort
               done
fi
if [ "$COMMAND" == "LISTLOCALPOLICIES" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               clean
               for ITEM in $ACCOUNT; do
                   aws --profile $ITEM --output text iam list-policies --scope Local --query "Policies[*].[PolicyName,UpdateDate,DefaultVersionId,Arn]" | column -t
               done
fi
if [ "$COMMAND" == "LISTAWSPOLICIES" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               clean
               for ITEM in $ACCOUNT; do
                    aws --profile $ITEM --output text iam list-policies --scope AWS --query "Policies[*].[PolicyName,UpdateDate,DefaultVersionId,Arn]" | column -t
               done
fi

if [ "$COMMAND" == "DESCRIBEUSERS" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               clean
               nochangeop
               for ITEM in $ACCOUNT; do
                    # LIST=`aws --profile $ITEM iam list-users --query "Users[*].[UserName]" --output text`
                    LIST=$USERNAME
                    for USER in $LIST; do
                         print $ITEM $USER
                         aws --profile $ITEM iam list-groups-for-user        --user-name $USER --query "Groups[*].{ARN:Arn}"                 | gawk -v A=$ITEM -f indent.awk
                         aws --profile $ITEM iam list-attached-user-policies --user-name $USER --query "AttachedPolicies[*].{ARN:PolicyArn}" | gawk -v A=$ITEM -f indent.awk 
                         aws --profile $ITEM iam list-access-keys            --user-name $USER --query "AccessKeyMetadata[*].[AccessKeyId]"  | gawk -v A=$ITEM -f indent.awk 
                    done 
               done 
fi
# ----------------------------------------------------
# These commands operate on users
# ----------------------------------------------------
if [ "$COMMAND" == "LISTUSERPOLICIES" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               assert "$USERNAME" "Username not specified"
               aws --profile $ACCOUNT iam list-attached-user-policies --user-name $USERNAME --query "AttachedPolicies[*].[PolicyName,PolicyArn]" --output text
fi
if [ "$COMMAND" == "LISTUSERGROUPS" ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT" "Profile not specified"
               aws --profile $ACCOUNT iam list-groups-for-user --user-name $USERNAME --query "Groups[*].[GroupName]" --output text
fi
if [ "$COMMAND" == "REMOVEUSERFROMALLGROUPS" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               assert "$USERNAME" "Username not specified"
               LIST=`aws --profile $ACCOUNT iam list-groups-for-user --user-name $USERNAME --query "Groups[*].[GroupName]" --output text`
               confirm
               for ITEM in $LIST; do
                   aws --profile $ACCOUNT iam remove-user-from-group --user-name $USERNAME --group-name $ITEM 
               done
fi

if [ "$COMMAND" == "DETACHUSERPOLICIES" ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT" "Profile not specified"
               confirm
               aws --profile $ACCOUNT iam list-attached-user-policies --user-name $USERNAME | gawk -v A=$ACCOUNT -v U=$USERNAME '
               {
                   sz = "aws --profile " A " iam detach-user-policy --user-name " U " --policy-arn " $2
                   system(sz)
               }'
fi
if [ "$COMMAND" == "ATTACHPOLICYTOALLUSERS" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               assert "$THING" "Thing not specified"
               aws --profile $ACCOUNT iam list-users --query "Users[*].[UserName]" --output text | gawk -v A=$ACCOUNT -v T=$THING '{
                    system("aws --profile " A " iam attach-user-policy --policy-arn " T  " --user-name " $1);
               }'
fi
if [ "$COMMAND" == "ATTACHPOLICYTOUSER" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               assert "$THING" "Thing not specified"
               ACCTNUMBER=`aws --profile $ACCOUNT sts get-caller-identity | gawk '{print $1}'`
               aws --profile $ACCOUNT iam attach-user-policy --policy-arn $THING  --user-name $USERNAME
fi
if [ "$COMMAND" == "IAMUSERCHANGEPASSWORD-ADD" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               assert "$USERNAME" "Username not specified"
               antiassert "$THING" "  Don't explicitly define the policy"
               THING="arn:aws:iam::aws:policy/IAMUserChangePassword"
               LIST=$USERNAME
               print ""
               print $THING
               confirmprompt "Ready to add policy"
               for USER in $LIST; do
                    print $USER $THING
                    aws --profile $ACCOUNT iam attach-user-policy --policy-arn $THING --user-name $USER
               done
fi
if [ "$COMMAND" == "IAMUSERCHANGEPASSWORD-REMOVE" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               assert "$USERNAME" "Username not specified"
               antiassert "$THING" "  Don't explicitly define the policy"
               THING="arn:aws:iam::aws:policy/IAMUserChangePassword"
               LIST=$USERNAME
               print ""
               print $THING
               confirmprompt "Ready to remove policy"
               for USER in $LIST; do
                    print $USER $THING
                    aws --profile $ACCOUNT iam detach-user-policy --policy-arn $THING --user-name $USER
               done
fi


if [ "$COMMAND" == "ADDUSERTOGROUP" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               assert "$THING" "Thing not specified"
               aws --profile $ACCOUNT iam add-user-to-group --group-name $THING  --user-name $USERNAME
fi

if [ "$COMMAND" == "CLOUDTRAIL-ACTIVE" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --profile $ACCOUNT --output text cloudtrail lookup-events --start-time $STARTDATE | gawk '
               /^EVENTS/ {
                    print $NF 
               }' | sort | uniq
fi

if [ "$COMMAND" == "CREATEACCESSKEY" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               assert "$USERNAME" "Username not specified"
               aws --profile $ACCOUNT --output text iam create-access-key --user-name $USERNAME | gawk '
               @include "cuu.awk" 
               { 
                   print configrecord($0); 
               }'
fi
if [ "$COMMAND" == "LISTACCESSKEYS" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               assert "$USERNAME" "Profile not specified"
               aws --profile $ACCOUNT --output text iam list-access-keys --user-name $USERNAME
fi
if [ "$COMMAND" == "DELETEACCESSKEYS" ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT" "Profile not specified"
               confirm
               aws --profile $ACCOUNT iam list-access-keys --user-name $USERNAME | gawk -v A=$ACCOUNT -v U=$USERNAME '
               {
                   sz = "aws --profile " A " iam delete-access-key --user-name " U " --access-key-id  " $2
                   system(sz)
               }'
fi

if [ "$COMMAND" == "EC2" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --profile $ACCOUNT --output text ec2 describe-instances | gawk 'BEGIN {print "\n\n\n"}/INSTANCES/{print $0}/SECURITYGROUPS/{print $0 "\n\n\n"}'
fi

if [ "$COMMAND" == "EC2-LIST" ] ; then
     assert "$ACCOUNT" "Profile not specified"
     for ACCT in $ACCOUNT; do
          LIST="us-east-1 us-east-2 us-west-1 us-west-2"
          for ITEM in $LIST; do
               aws --profile $ACCT ec2 describe-instances --output text --region $ITEM \
                   --query "Reservations[*].Instances[*].[InstanceId,InstanceType,State.Name,Tags[?Key==Name].Value]" | gawk -v A=$ACCT -v B=$ITEM -f noindent.awk
          done
      done
fi

#          XLIST=`aws --profile $ACCOUNT ec2 describe-regions --query "Regions[*].RegionName" --output text`



if [ "$COMMAND" == "EC2-SGSUM" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --output text --profile $ACCOUNT ec2 describe-security-groups --query '
                               SecurityGroups[*].{
                                    SG:GroupId,
                                    PERM:IpPermissions[*].
                                         {PR:IpProtocol,
                                          FP:FromPort,
                                          TP:ToPort,
                                          IP:IpRanges[*].CidrIp,
                                          UG:UserIdGroupPairs[*].{GI:GroupId}
                                         }
                               }' |  gawk -F " " -v A=$ACCOUNT '
               BEGIN    {szOut="";}
               /^sg[-]/ {print szOut;szOut=$1;}
               /^PERM/ { szOut=szOut " " $3; }
           ' 
fi
if [ "$COMMAND" == "EC2-SG" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --output text --profile $ACCOUNT ec2 describe-security-groups --query '
                               SecurityGroups[*].{
                                    SG:GroupId,
                                    PERM:IpPermissions[*].
                                         {PR:IpProtocol,
                                          FP:FromPort,
                                          TP:ToPort,
                                          IP:IpRanges[*].CidrIp,
                                          UG:UserIdGroupPairs[*].{GI:GroupId}
                                         }
                               }' |  gawk -F " " -v A=$ACCOUNT '
               BEGIN    {FLAG=0;ct=6;}
               /^sg[-]/ {SG=$1;ct=6;}
               /^PERM/ {
                    proto=$3; sub(/[-]1/,"all",proto);if (match(proto,/all/)>0) FLAG=1; 
                    fport=$2; sub(/None/,"all",fport);if (match(fport,/all/)>0) FLAG=1; 
                    fport=$2; sub(/[-]1/,"all",fport);if (match(fport,/all/)>0) FLAG=1; 
                    tport=$4; sub(/None/,"all",tport);if (match(tport,/all/)>0) FLAG=1; 
                    tport=$4; sub(/[-]1/,"all",tport);if (match(tport,/all/)>0) FLAG=1; 
                    printf("\n%4s %-20s %-5s %6s %6s",A,SG,proto,fport,tport)
                    block="                                                   ";
                    ctl="\n";
               }
               /^UG/ { printf(" %28s",$2)}
               /^IP/ {     
                          if (match($2,/0[.]0[.]0[.]0/) > 0 ) FLAG=1; 
                          if (( ct % 5) == 0) printf("\n                                             ");
                          printf(" %28s",$2); ct++;
                     }
               END   { printf("\n"); if (FLAG==1) printf("\n*** FLAGGED SUSPECT IPs/SGs/Protos ***\n");}
           ' 
fi
if [ "$COMMAND" == "EC2-SPARK" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --profile $ACCOUNT --output text ec2 describe-instances | gawk 'BEGIN {}/INSTANCES/{if(NF==19) print $8;if(NF==22) print $9}' | gawk -v S=$STARTDATE -v A=$ACCOUNT '
               @include "cuu.awk"
               {
               sz ="aws --profile " A " cloudwatch get-metric-statistics --metric-name CPUUtilization --period 3600 --namespace AWS/EC2 --statistics Maximum \
                   --dimensions Name=InstanceId,Value=" $0 " --start-time " isoyesterday(1) " --end-time " isonow()
               print "INSTANCE " $0
               system(sz)
           } ' | gawk '
           @include "cuu.awk" 
           BEGIN {ct=1;fc=0;file="file0"}
           END {print ""}
           /XXINSTANCE/ {printf("\n./spark ",$1)}
           /INSTANCE/ {close(file);fc++;file="file" fc}
           /INSTANCE/ {printf("%s\n",$0)}
           /DATAPOINTS/ {ct++;printf("%5.2f\n", $2) >> file}
           ' 
           fi

if [ "$COMMAND" == "EC2-UTIL" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --profile $ACCOUNT --output text ec2 describe-instances | gawk 'BEGIN {}/INSTANCES/{if(NF==19) print $8;if(NF==22) print $9}' | gawk -v S=$STARTDATE -v A=$ACCOUNT '
               @include "cuu.awk"
               {
               sz ="aws --profile " A " cloudwatch get-metric-statistics --metric-name CPUUtilization --period 300 --namespace AWS/EC2 --statistics Maximum \
                   --dimensions Name=InstanceId,Value=" $0 " --start-time " isoyesterday(1) " --end-time " isonow()
               print "INSTANCE " $0
               system(sz)
           } ' | gawk '
           @include "cuu.awk" 
           /INSTANCE/ {printf("%s\n",$0)}
           /DATAPOINTS/ {printf("METRIC %5.2f %s\n", $2, isotolocal($3))}
           ' 
           fi


# aws --profile  ce get-cost-and-usage --granularity MONTHLY --metrics BlendedCost --time-period Start=2018-04-01,End=2018-04-30  

if [ "$COMMAND" == "CLOUDTRAIL-ALLUSERS" ] ; then
               assert "$ACCOUNT" "Profile not specified"
               aws --profile $ACCOUNT iam list-users | gawk -v A=$ACCOUNT -v D=$DETAIL '{
                    if (D=="yes")
                         sz = "cuu -d -a " A " -c cu -u " $NF;
                    else
                         sz = "cuu  -a " A " -c cu -u " $NF;
                    system(sz)
               }' 
fi

if [ "$COMMAND" == "CLOUDTRAIL-WATCH" ] ; then
               assert "PROFILELIST"  "Profile  not specified"
               if [ "$USERNAME" == "" ] ; then
                    assert "$WATCHUSER"    "User not specified"
                    for sz in $PROFILELIST; do
                         cuu -a $sz -c CU -u $WATCHUSER $DETAILFLAG
                    done
               else
                    assert "$USERNAME"    "User not specified"
                    for sz in $PROFILELIST; do
                         cuu -a $sz -c CU -u $USERNAME $DETAILFLAG
                    done
               fi
fi
if [ "$COMMAND" == "CLOUDTRAIL-USER" ] ; then
               assert "$ACCOUNT"  "Profile not specified"
               assert "$USERNAME" "Username not specified"
               if [ "$USERNAME" == "ALL" ] ; then
                 aws --profile $ACCOUNT --region $REGION --output text cloudtrail lookup-events --no-paginate --start-time $STARTDATE  > $Tmp
               else
                 aws --profile $ACCOUNT --region $REGION --output text cloudtrail lookup-events --no-paginate --start-time $STARTDATE --lookup-attributes AttributeKey=Username,AttributeValue=$USERNAME > $Tmp
               fi
               cat $Tmp | gawk  -v USR=$USERNAME -v ACCT=$ACCOUNT -v DETAIL=$DETAIL -v BN=$BIGNAMES -v BE=$BIGEVENTS -v RAW=$SHOWRAW -v ISOTIME=$ISOTIME '
               @include "cuu.awk"
               /^EVENTS/ {
                    sz=$0;
                    timepre=jget($0, "^.*[\"]eventTime[\"]:","NA");
                    ip=  jget($0, "^.*[\"]sourceIPAddress[\"]:","NA");
                    ty=  jget($0, "^.*[\"]eventType[\"]:","NA");
                    en=  jget($0, "^.*[\"]eventName[\"]:","NA");
                    req= jget($0, "^.*[\"]requestParameters[\"]:","NA");
                    resp= jget($0, "^.*[\"]responseElements[\"]:","NA");
                    time=isotolocal(timepre, "%m/%d/%Y %I:%M:%S%p");
                    shorttime=isotolocal(timepre, "%m/%d/%Y");
                    if (match(ISOTIME,/^yes/) > 0 ) {
                         time=timepre;
                         shorttime=timepre;
                    }
                    name=$NF;
                    sub(/HIDDEN_DUE_TO_SECURITY_REASONS/,"HIDDEN",name);
                    if (match(DETAIL,/^yes/) == 0) {
                         sub(/^Aws/, "", ty);
                         gsub(/["]/, "", resp);
                         gsub(/Validation/, "Valid", resp);
                         gsub(/Region/, "Reg", resp);
                         gsub(/Required/, "Req", resp);
                         gsub(/Bucket/, "Bk", resp);
                         gsub(/Service/, "Sv", resp);
                         gsub(/[ ]/, "", resp);
                         gsub(/createDate/, "cD", resp);
                         gsub(/userName/, "uN", resp);
                         gsub(/userName/, "uN", req);
                         gsub(/userId/, "uID", resp);
                         gsub(/AIDA................/, "AIDA..", resp);
                         gsub(/Jan/,"01",resp); gsub(/Feb/,"02",resp); gsub(/Mar/,"03",resp); gsub(/Apr/,"04",resp); gsub(/May/,"05",resp); gsub(/Jun/,"06",resp);
                         gsub(/Jul/,"07",resp); gsub(/Aug/,"08",resp); gsub(/Sep/,"09",resp); gsub(/Oct/,"10",resp); gsub(/Nov/,"11",resp); gsub(/Dec/,"12",resp);
                         gsub(/,2018/,"2018",resp);
                         gsub(/GroupName/,"GName",req);
                         gsub(/StreamName/,"SName",req);
                         gsub(/GroupName/,"GName",resp);
                         gsub(/StreamName/,"SName",resp);
                         gsub(/Permission/,"Perm",resp);
                         gsub(/Protocol/,"Prtcl",resp);
                         gsub(/Permission/,"Perm",req);
                         gsub(/Protocol/,"Prtcl",req);
                         gsub(/Port/,"P",req);
                         gsub(/request/,"req",req);
                         gsub(/request/,"req",resp);
                         gsub(/vpcConfig/,"vpcCfg",req);
                         gsub(/vpcConfig/,"vpcCfg",resp);
                         gsub(/memorySize/,"memSz",req);
                         gsub(/memorySize/,"memSz",resp);
                         gsub(/revisionId/,"revId",req);
                         gsub(/revisionId/,"revId",resp);
                         gsub(/destinationCidrBlock/,"DestCidr",req);
                         gsub(/destinationCidrBlock/,"DestCidr",resp);

                         gsub(/[Bb]lock/,"Bblk",req);
                         gsub(/[Bb]lock/,"Bblk",resp);

                         gsub(/[Pp]rivate/,"Prv",req);
                         gsub(/[Pp]rivate/,"Prv",resp);
                         gsub(/[Pp]ublic/,"Pub",req);
                         gsub(/[Pp]ublic/,"Pub",resp);
                         gsub(/[Aa]llocation/,"Alloc",req);
                         gsub(/[Aa]llocation/,"Alloc",resp);
                         gsub(/[Aa]llocate/,"Alloc",req);
                         gsub(/[Aa]llocate/,"Alloc",resp);
                         gsub(/[Aa]llocate/,"Alloc",ty);
                         
                         
                         
                         
                         gsub(/[Aa]ssociation/,"Assoc",req);
                         gsub(/[Aa]ssociation/,"Assoc",resp);
                         gsub(/[Aa]ssociation/,"Assoc",ty);
                         gsub(/[Aa]ssociate/,"Assoc",req);
                         gsub(/[Aa]ssociate/,"Assoc",resp);
                         gsub(/[Aa]ssociate/,"Assoc",ty);

                         gsub(/[Mm]odify/,"Mod",ty);
                         gsub(/[Ii]nstance/,"Inst",ty);
                         gsub(/[Ss]ecurity/,"Sec",ty);
                         gsub(/[Aa]uthorize/,"Auth",ty);
                         gsub(/[Aa]ttach/,"Atch",ty);
                         gsub(/[Gg]roup/,"Grp",ty);

                         gsub(/[Rr]oute/,"Rte",req);
                         gsub(/[Rr]oute/,"Rte",resp);
                         gsub(/[Rr]oute/,"Rte",ty);
                         gsub(/[Gg]ateway/,"Gtwy",req);
                         gsub(/[Gg]ateway/,"Gtwy",resp);
                         gsub(/[Gg]ateway/,"Gtwy",ty);

                         gsub(/keyFingerprint:..:..:..:..:..:..:..:..:..:..:..:..:..:../,"keyFngPrnt..",req);
                         gsub(/keyFingerprint:..:..:..:..:..:..:..:..:..:..:..:..:..:../,"keyFngPrnt..",resp);
                         gsub(/AKIA........./,"AKIA..",req);
                         gsub(/AKIA........./,"AKIA..",resp);
                         gsub(/........-....-....-....-............/,"...",req);
                         gsub(/........-....-....-....-............/,"...",resp);
                         gsub(/[Cc]onsole/,"Con",ty);
                         gsub(/[Cc]onsole/,"Con",resp);
                         gsub(/[Cc]onsole/,"Con",req);
                         gsub(/[Ss]ecurity/,"Sec",resp);

                         gsub(/[Ss]ecurity/,"Sec",req);
                         gsub(/functionName/,"fName",resp);
                         gsub(/functionName/,"fName",req);

                         gsub(/instance/,"inst",req);
                         gsub(/instance/,"inst",resp);
                         gsub(/group/,"grp",req);
                         gsub(/group/,"grp",resp);
                         gsub(/Profile/,"Prf",req);
                         gsub(/Profile/,"Prf",resp);
                         gsub(/[Nn]etwork/,"net",req);
                         gsub(/[Nn]etwork/,"net",resp);
                         gsub(/[Ii]nterface/,"inter",req);
                         gsub(/[Ii]nterface/,"inter",resp);
                         if (match(BE,/no/) > 0) {
                             gsub(/Configuration/,"Config",en);
                             gsub(/Config/,"Cfg",en);
                             gsub(/[Dd]elete/,"Del",en);
                             gsub(/[Ll]aunch/,"Lnch",en);
                             gsub(/[Cc]hange/,"Chg",en);
                             gsub(/[Ss]caling/,"Scl",en);
                             gsub(/Permission/,"Perm",en);
                             gsub(/Function/,"Func",en);
                             gsub(/Resource/,"Res",en);
                             gsub(/Update/,"Upd",en);
                             gsub(/Create/,"Cr",en);
                             gsub(/[Cc]onsole/,"Con",en);
                             gsub(/[Ii]nstance/,"Inst",en);
                             gsub(/[Aa]ssociation/,"Assoc",en);
                             gsub(/[Mm]odify/,"Mod",en);
                             gsub(/[Aa]ssociate/,"Assoc",en);
                             gsub(/[Gg]roup/,"Grp",en);
                             gsub(/[Aa]uthorize/,"Auth",en);
                             gsub(/[Gg]ateway/,"Gtwy",en);
                             gsub(/[Aa]ttach/,"Atch",en);
                             gsub(/[Aa]llocate/,"Alloc",en);
                             gsub(/[Ss]ecurity/,"Sec",en);
                             gsub(/[Rr]oute/,"Rte",en);
                             gsub(/[aeiou]/,"",en);
                             en=cutpad(en,12);
                         }
                         else {
                             en=cutpad(en,18);
                         }

                         if (match(BN,/no/) > 0) {
                             name=cutpad(name,10);
                         }

                         ty=cutpad(ty,8);

                         sub(/arn:aws:iam::......../,"arn:aws:iam::",req);
                         sub(/arn:aws:iam::......../,"arn:aws:iam::",resp);

                    }
                    else {

                         ty=cutpad(ty,18);
                    }
                    if (length(req) > 256) req=substr(req,1,256) "(TRUNCATED)";
                    if (length(resp) > 256) resp=substr(resp,1,256) "(TRUNCATED)";
                    # print "-"
                    # print "acct","time","name","eventtype","eventname","req","resp"
                    print trim(ACCT), time, name, ty, en, "IN-" req
                    print trim(ACCT), time, name, ty, en, "OU-" resp
                    if (match(RAW,/^yes/) != 0) print $0 "\n\n"
               }' 
fi

if [ "$LOOP" == "yes" ] ; then
     if [ "$COMMAND" == "EXIT" ] ; then
                    exit 0
     fi
     if [ "$COMMAND" == "QUIT" ] ; then
                    exit 0
     fi
     if [ "$COMMAND" == "Q" ] ; then
                    exit 0
     fi
     if [ "$COMMAND" == "h" ] ; then
                    usage
     fi
     if [ "$COMMAND" == "H" ] ; then
                    usage
     fi
else
     exit 0
fi

print -n "cuu "$ACCOUNT" "$USERNAME" "$THING">> "
read COMMAND
     set -A array $COMMAND
     if [ "${array[0]}" == "ACCOUNT" ] ; then
          ACCOUNT="${array[1]}"
     fi
     if [ "${array[0]}" == "USERNAME" ] ; then
         USERNAME="${array[1]}"
     fi
     if [ "${array[0]}" == "THING" ] ; then
         THING="${array[1]}"
     fi
done

exit 1
