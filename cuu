#!/usr/bin/ksh
Tmp="/tmp/$$"
TmpDir="/tmp/dir$$"
trap 'rm -f "$Tmp" >/dev/null 2>&1' 0
trap "exit 2" 1 2 3 13 15
rm $Tmp  >/dev/null 2>&1
# ----------------------------------------------------
#  | |/ / ___|| | | | |  _ \ _   _| | ___  ___| | | |
#  | ' /\___ \| |_| | | |_) | | | | |/ _ \/ __| | | |
#  | . \ ___) |  _  | |  _ <| |_| | |  __/\__ \_|_|_|
#  |_|\_\____/|_| |_| |_| \_\\__,_|_|\___||___(_|_|_)
# ----------------------------------------------------

usage(){
     print "Usage: cuu [-a][-u][-t][-c][-z][-h]"
     print "       -a  cli profile name  (from .aws/config)"
     print "       -u  operand:  username"
     print "       -t  operand:  thing name  (used to specify a resource or object name)"
     print "       -z  shadow file reset (/tmp/cuu.out)"
     print "       -c  command:"
     print "                     createuser         -a -u"
     print "                     createadminuser    -a -u                     Creates a user with AdministorAccess"
     print "                     changepassword     -a -u -p"
     print "                     listusers          -a" 
     print "                     listgroups         -a" 
     print "                     listpolicies       -a -u"
     print "                     listusergroups     -a -u"
     print "                     detachpolicies     -a -u"
     print "                     deleteuser         -a -u"
     print "                     attachpolicy       -a -u -t"
     print "                     getpolicyarn       -a -t                     Lists all defined policies filter with a regex (-t)"
     print "                     cloudtrail         -a <-n> <-t>"
     print "       -h  display usage"
}

assert() {
    if [ "$1" == "" ] ; then
         print $2
         exit 1
    fi
}
typeset -u COMMAND
COMMAND=""
USERNAME=""
ACCOUNT=""
CREATEUSER=""
THING=""
COUNT=""
PASSWORD=`gawk -v w=PASSWORD -F= '{b="";gsub(re,b,$1);gsub(re,b,$2);if ($1==w) {print $2;exit;}}' .cuu.txt`

while getopts "n:c:u:a:p:t:zhb" arg
do
	case $arg in
            n)
               COUNT=$OPTARG
               ;;
            c)
               COMMAND=$OPTARG
               ;;
            u)
               USERNAME=$OPTARG  
               ;;
            a)
               ACCOUNT=$OPTARG
               ;;
            p)
               PASSWORD=$OPTARG
               ;;
            t)
               THING=$OPTARG
               ;;
            z)
               rm -rf /tmp/cuu.out
               ;;
	    h)
               usage
	       exit 0
               ;;
	    *)
	       exit 0
	       ;;
	esac
done
shift $(($OPTIND - 1))

if [ "$COMMAND" == "TEST" ] ; then
     assert "$ACCOUNT" "Account not specified"
fi
if [ "$COMMAND" == "CREATEADMINUSER" ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT" "Account not specified"
               assert "$PASSWORD" "Password not specified"
               aws --profile $ACCOUNT iam create-user --user-name $USERNAME
               aws --profile $ACCOUNT iam create-login-profile --user-name $USERNAME --password $PASSWORD  --password-reset-required
               aws --profile $ACCOUNT iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/AdministratorAccess    --user-name $USERNAME
               print $USERNAME
               print $PASSWORD
fi
if [ "$COMMAND" == "CREATEUSER" ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT" "Account not specified"
               assert "$PASSWORD" "Password not specified"
               aws --profile $ACCOUNT iam create-user --user-name $USERNAME
               aws --profile $ACCOUNT iam create-login-profile --user-name $USERNAME --password $PASSWORD  --password-reset-required
               aws --profile $ACCOUNT iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/ReadOnlyAccess         --user-name $USERNAME
               aws --profile $ACCOUNT iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/CloudWatchFullAccess   --user-name $USERNAME
               aws --profile $ACCOUNT iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/AWSCodeCommitPowerUser --user-name $USERNAME
fi
if [ "$COMMAND" == "CHANGEPASSWORD" ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT" "Account not specified"
               assert "$PASSWORD" "Password not specified"
               aws --profile $ACCOUNT iam update-login-profile --user-name $USERNAME --password $PASSWORD  --password-reset-required
fi
if [ "$COMMAND" == "LISTUSERS" ] ; then
               assert "$ACCOUNT" "Account not specified"
               aws --profile $ACCOUNT iam list-users | gawk '{printf("%-44s %s\n",$6,$2)}'
fi
if [ "$COMMAND" == "LISTGROUPS" ] ; then
               assert "$ACCOUNT" "Account not specified"
               aws --profile $ACCOUNT iam list-groups | gawk '{printf("%-44s %s\n",$5,$2)}'
fi
if [ "$COMMAND" == "LISTPOLICIES" ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT" "Account not specified"
               aws --profile $ACCOUNT iam list-attached-user-policies --user-name $USERNAME | gawk '{print $0}'
fi
if [ "$COMMAND" == "LISTUSERGROUPS" ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT" "Account not specified"
               aws --profile $ACCOUNT iam list-groups-for-user --user-name $USERNAME | gawk '{print $5}'
fi
if [ "$COMMAND" == "DETACHGROUPS" ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT" "Account not specified"
               aws --profile $ACCOUNT iam list-groups-for-user --user-name $USERNAME | gawk -v A=$ACCOUNT -v U=$USERNAME '
               {
                   sz = "aws --profile " A " remove-user-from-group --user-name " U " --group-name " $5
                   print sz
               }'
fi
if [ "$COMMAND" == "DETACHPOLICIES" ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT" "Account not specified"
               aws --profile $ACCOUNT iam list-attached-user-policies --user-name $USERNAME | gawk -v A=$ACCOUNT -v U=$USERNAME '
               {
                   sz = "aws --profile " A " iam detach-user-policy --user-name " U " --policy-arn " $2
                   system(sz)
               }'
fi
if [ "$COMMAND" == "DELETEUSER" ] ; then
               assert "$USERNAME" "Username not specified"
               assert "$ACCOUNT" "Account not specified"
               aws --profile $ACCOUNT iam delete-login-profile --user-name $USERNAME 
               aws --profile $ACCOUNT iam delete-user --user-name $USERNAME 
fi
if [ "$COMMAND" == "ATTACHPOLICY" ] ; then
               assert "$ACCOUNT" "Account not specified"
               assert "$THING" "Thing not specified"
               aws --profile $ACCOUNT iam attach-user-policy --policy-arn $THING  --user-name $USERNAME
fi
if [ "$COMMAND" == "GETPOLICYARN" ] ; then
               assert "$ACCOUNT" "Account not specified"
               assert "$THING" "Thing not specified"
               aws --profile $ACCOUNT iam list-policies | gawk '{print $2}' | egrep -i $THING
fi

if [ "$COMMAND" == "CLOUDTRAIL" ] ; then
               assert "$ACCOUNT" "Account not specified"
               if [ "$THING" == "" ] ; then
                    THING="ConsoleLogin"
               fi
               if [ "$COUNT" == "" ] ; then
                    COUNT=6
               fi
               aws --profile $ACCOUNT cloudtrail lookup-events --max-items $COUNT --lookup-attributes AttributeKey=EventName,AttributeValue=$THING | gawk '
                     {print $0}
              ' | tee /tmp/cuu.out
fi
exit 1




               # /^EVE/{print ""}
               # aws --profile $ACCOUNT iam create-user --user-name $USERNAME
               # aws --profile $ACCOUNT iam create-login-profile --user-name $USERNAME --password $PASSWORD  --password-reset-required
               # aws --profile $ACCOUNT iam attach-user-policy --policy-arn arn:$ # aws:iam::$ # aws:policy/CloudWatchFullAccess   --user-name $USERNAME
               # aws --profile $ACCOUNT iam attach-user-policy --policy-arn arn:$ # aws:iam::$ # aws:policy/$ # awsCodeCommitPowerUser --user-name $USERNAME
               # aws --profile $1 iam create-user --user-name $USERNAME
               # aws --profile $1 iam create-login-profile --user-name $2 --password ONETWOthreefour1234!!!!  --password-reset-required
               # aws --profile $1 iam attach-user-policy --policy-arn arn:$ # aws:iam::$ # aws:policy/CloudWatchFullAccess   --user-name $USERNAME
               # aws --profile $1 iam attach-user-policy --policy-arn arn:$ # aws:iam::$ # aws:policy/$ # awsCodeCommitPowerUser --user-name $USERNAME

